<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pmem on PMem.io</title><link>https://pmem.io/tags/pmem/</link><description>Recent content in pmem on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 25 May 2023 13:46:31 +0200</lastBuildDate><atom:link href="https://pmem.io/tags/pmem/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploring the Software Ecosystem for Compute Express Link (CXL) Memory</title><link>https://pmem.io/blog/2023/05/exploring-the-software-ecosystem-for-compute-express-link-cxl-memory/</link><pubDate>Thu, 25 May 2023 13:46:31 +0200</pubDate><guid>https://pmem.io/blog/2023/05/exploring-the-software-ecosystem-for-compute-express-link-cxl-memory/</guid><description>CXL Software ecosystem The Compute Express Link (CXL) is going to be a transformative new technology in the heterogeneous memory space. While the transition from Persistent Memory (PMem) to CXL.mem may seem challenging at first, developers who have optimized their applications for PMem will find that no significant changes may be required. In this article, we will explore the CXL software ecosystem and its compatibility with the established PMem concepts and libraries.</description></item><item><title>Update on PMDK and our long term support strategy</title><link>https://pmem.io/blog/2022/11/update-on-pmdk-and-our-long-term-support-strategy/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0200</pubDate><guid>https://pmem.io/blog/2022/11/update-on-pmdk-and-our-long-term-support-strategy/</guid><description>Following Intel’s Q2 earnings call announcing the wind-down of Intel’s Optane business, Intel will also be winding down its investment in new feature development on Persistent Memory Development Kit (PMDK) libraries and adjusting long-term support and maintenance plans accordingly.
The PMDK collection of open-source libraries and tools hosted on GitHub will continue to be available to the software community. Documentation and resources via the pmem.io website will also remain available.</description></item><item><title>Memory Tiering (part 2): Writing Transparent Tiering Solution</title><link>https://pmem.io/blog/2022/06/memory-tiering-part-2-writing-transparent-tiering-solution/</link><pubDate>Wed, 29 Jun 2022 00:00:00 +0200</pubDate><guid>https://pmem.io/blog/2022/06/memory-tiering-part-2-writing-transparent-tiering-solution/</guid><description>This is the second part of the series of articles about memory tiering. The first one explained what memory tiering is and why we need it, the second one will explain some mechanisms behind transparent tiering.
This article is intended for those who would like to learn how tiering/numa balancing or memory profiling solutions work under the hood. We will focus on a high-level overview of how tiering/numa balancing could be designed, instead of dissecting any particular solution.</description></item><item><title>Similarity Search - opportunity for PMEM</title><link>https://pmem.io/blog/2022/06/similarity-search-opportunity-for-pmem/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0200</pubDate><guid>https://pmem.io/blog/2022/06/similarity-search-opportunity-for-pmem/</guid><description>At a high level, computing solves problems. These problems, even though different and individual, are sometimes somehow related. A new algorithmic challenge can usually be solved by bringing it down to a well-defined problem with an existing solution. Today, we will be talking about one of such universal solutions - similarity search, which has found its application in various areas of life, from search engines that tell us what we want to find, through recommendation engines that tell us what to watch, where to eat and what to buy, all the way to data science that provides valuable input to business decisions.</description></item><item><title>Can I install persistent memory and a GPU in my system?</title><link>https://pmem.io/knowledgebase/faq/100000003-can-i-install-persistent-memory-and-a-gpu-in-my-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/faq/100000003-can-i-install-persistent-memory-and-a-gpu-in-my-system/</guid><description>Applies To Intel® Optane™ Persistent Memory NVDIMM-N GPU Answer It is recommended to seek advice from the server OEM/ODM directly. While it is possible to support GPUs and persistent memory in the same system, several factors need to be considered which include, but are not limited to the following:
Server size (1U, 2U, 4U, etc) Power Supplies Internal and external cooling functions - Air cooled, liquid cooled, or hybrid The type and quantity of persistent memory modules or devices within the system with their power &amp;amp; thermal requirements The make and model of the GPU with its power and cooling requirements</description></item><item><title>Can I install persistent memory and an FPGA in my system?</title><link>https://pmem.io/knowledgebase/faq/100000004-can-i-install-persistent-memory-and-an-fpga-in-my-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/faq/100000004-can-i-install-persistent-memory-and-an-fpga-in-my-system/</guid><description>Applies To Intel® Optane™ Persistent Memory NVDIMM-N FPGA Answer It is recommended to seek advice from the server OEM/ODM directly. While it is possible to support FPGAs and persistent memory in the same system, several factors need to be considered which include, but are not limited to the following:
Server size (1U, 2U, 4U, etc) Power Supplies Internal and external cooling functions - Air cooled, liquid cooled, or hybrid The type and quantity of persistent memory modules or devices within the system with their power &amp;amp; thermal requirements The make, model, and quantity of the FPGAs with its power and cooling requirements</description></item><item><title>dmesg reports "DAX unsupported by block device. Turning off DAX." during boot or mounting file systems</title><link>https://pmem.io/knowledgebase/problem/100000016-dax-unsupported-by-block-device.-turning-off-dax.seen-in-dmesg-during-boot-or-mounting-file-systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000016-dax-unsupported-by-block-device.-turning-off-dax.seen-in-dmesg-during-boot-or-mounting-file-systems/</guid><description>Applies To Linux
XFS or EXT4 File Systems
Systems with Persistent Memory
Issue During system boot or mounting of an EXT4 or XFS filesystem, the following message may be seen in dmesg:
[125.755367] XFS (pmem0): DAX enabled. Warning: EXPERIMENTAL, use at your own risk[125.763736] XFS (pmem0): DAX unsupported by block device. Turning off DAX. The filesystem should still mount, but it will not have the &amp;lsquo;dax&amp;rsquo; (Direct Access) flag set as shown by the mount command:</description></item><item><title>Executing 'man -k ndctl' returns "ndctl. nothing appropriate."</title><link>https://pmem.io/knowledgebase/problem/100000021-man--k-ndctlreturns-ndctl-nothing-appropriate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000021-man--k-ndctlreturns-ndctl-nothing-appropriate/</guid><description>Applies To Linux man pages Issue When searching the short descriptions and manual page for a keyword, the man utility may return an empty set, for example:
# man -k ndctl ndctl: nothing appropriate. Cause If you built ndctl from source, the man page indexes may not have been automatically generated for you. Additionally, if you installed ndctl to a non-default location, your $MANPATH shell environment variable may not been updated to point to to the new man page locations.</description></item><item><title>Executing "daxctl offline-memory daxX.Y" returns "Failed to offline"</title><link>https://pmem.io/knowledgebase/problem/100000026-executing-daxctl-offline-memory-daxx.yreturns-failed-to-offline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000026-executing-daxctl-offline-memory-daxx.yreturns-failed-to-offline/</guid><description>Applies To Linux Linux Kernel v5.1 or later daxctl utility DAX System-RAM Feature Issue When attempting to offline a &amp;lsquo;system-ram&amp;rsquo; device, daxctl returns an error similar to the following:
# daxctl offline-memory dax0.0 libdaxctl: offline_one_memblock: dax0.0: Failed to offline /sys/devices/system/node/node2/memory851/state: Device or resource busy dax0.0: failed to offline memory: Device or resource busy error offlining memory: Device or resource busy Cause One or more processes are using memory from the system-ram device, causing the &amp;lsquo;Device or resource busy&amp;rsquo; error.</description></item><item><title>Executing "ipmctl delete -dimm" returns "Erase failed. Error (290) - Unsupported"</title><link>https://pmem.io/knowledgebase/problem/100000022-ipmctl-delete--dimm-returns-erase-failed-error-290---unsupported/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000022-ipmctl-delete--dimm-returns-erase-failed-error-290---unsupported/</guid><description>Applies To Linux ipmctl utility Secure Erase/Crypto Erase Issue The ipmctl delete -dimm command will securely erase the persistent data on one or more persistent memory devices. When executing the command, the following error is returned:
# ipmctl delete -dimm Erasing DIMM 0x0001. Do you want to continue? [y/n] y Erase failed: Error (290) - Unsupported Cause This command is subject to Operating System Vendor (OSV) support. It will return &amp;ldquo;Not Supported&amp;rdquo; or &amp;ldquo;Unsupported&amp;rdquo; if the security feature is not implemented.</description></item><item><title>Executing "lsmem" may cause a kernel panic in is_mem_section_removable() or hang the system</title><link>https://pmem.io/knowledgebase/problem/100000027-executing-lsmemmay-cause-a-kernel-panic-in-is_mem_section_removable-or-hang-the-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000027-executing-lsmemmay-cause-a-kernel-panic-in-is_mem_section_removable-or-hang-the-system/</guid><description>Applies To Linux
lsmem utility
Intel Optane Persistent Memory
Issue When executing the &amp;rsquo;lsmem&amp;rsquo; utility with persistent memory installed, Debian based systems, such as Ubuntu, may hang with no error reported and require a power-cycle to recover. Fedora, CentOS, and RHEL, for example, may crash and produce an error similar to the following:
// Fedora Non-Debug Kernel: $ lsmem Killed // Fedora Debug Kernel: # lsmem Segmentation fault When the kernel panics, dmesg will report errors similar to the following examples:</description></item><item><title>Executing "ndctl create-namespace" returns "failed to create namespace. Resource temporarily unavailable"</title><link>https://pmem.io/knowledgebase/problem/100000020-ndctl-create-namespacereturns-failed-to-create-namespace-resource-temporarily-unavailable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000020-ndctl-create-namespacereturns-failed-to-create-namespace-resource-temporarily-unavailable/</guid><description>Applies To Linux ndctl utility Issue Creating a new namespace using &amp;rsquo;ndctl create-namespace&amp;rsquo;, may return the following error:
# ndctl create-namespace -r region0 failed to create namespace: Resource temporarily unavailable Cause There are many potential causes including:
There&amp;rsquo;s no available capacity within the region because one or more namespaces exist and have consumed all the space. The region is disabled. There&amp;rsquo;s an issue with the labels for the NVDIMMs belonging to the region.</description></item><item><title>Executing "ndctl destroy-namespace" returns "Error. namespace0.0 is active, specify --force for re-configuration"</title><link>https://pmem.io/knowledgebase/problem/100000019-ndctl-destroy-namespacereturns-error-namespace0.0-is-active-specify---force-for-re-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000019-ndctl-destroy-namespacereturns-error-namespace0.0-is-active-specify---force-for-re-configuration/</guid><description>Applies To Linux ndctl utility Issue Destroying a namespace mode may fail with the following error:
# ndctl destroy-namespace namespace0.0 Error: namespace0.0 is active, specify --force for re-configuration Changing a namespace mode may fail with the following error:
# ndctl create-namespace -e namespace0.0 -m fsdax Error: namespace0.0 is active, specify --force for re-configuration failed to reconfigure namespace: Device or resource busy Cause The error indicates the namespace is currently active and potentially mounted (FSDAX) or in use, so the operation is not permitted.</description></item><item><title>Executing "ndctl disable-dimm nmem0" returns "nmem0 is active, skipping.."</title><link>https://pmem.io/knowledgebase/problem/100000017-ndctl-disable-dimm-nmemreturns-nmem0-is-active-skipping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000017-ndctl-disable-dimm-nmemreturns-nmem0-is-active-skipping/</guid><description>Applies To Linux ndctl utility Systems with Persistent Memory Issue When disabling an persistent memory device (nmem), a notice is displayed indicating it is active, eg:
# ndctl disable-dimm nmem0 nmem0 is active, skipping... disabled 0 nmem Cause The message indicates there&amp;rsquo;s at least one active/enabled Region and/or Namespace using the NVDIMM.
Solution All active/enabled Regions and Namespaces must be destroyed an/or disabled prior to disabling the dimm.
List the current configuration (Namespaces, Regions, DIMMs): # ndctl list -NRD Verify no fsdax or devdax namespaces are mounted or in-use by running applications: // Check for mounted file systems using the pmem devices # df -h // Check for any running processes that are currently accessing the namespaces # fuser /dev/pmem0 Destroy or disable the namespace(s) # ndctl destroy-namespace namespace0.</description></item><item><title>Executing "ndctl sanitize-dimm" returns "security operation not supported"</title><link>https://pmem.io/knowledgebase/problem/100000023-ndctl-sanitize-dimm-returns-security-operation-not-supported/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000023-ndctl-sanitize-dimm-returns-security-operation-not-supported/</guid><description>Applies To Linux ndctl utility Secure Erase/Crypto Erase Issue The &amp;rsquo;ndctl sanitize-dimm&amp;rsquo; command will securely erase the persistent data on one or more persistent memory devices. When executing the command, the following error is returned:
# ndctl sanitize-dimm all Error: nmem11: security operation not supported Error: nmem10: security operation not supported [...snip...] Cause To use this feature, you need a Linux Kernel v5.0.0 and ndctl version 64 or later. The feature is not implemented in earlier releases which is why the &amp;lsquo;security operation not supported&amp;rsquo; is returned.</description></item><item><title>How To Emulate Persistent Memory using the Linux "memmap" Kernel Option</title><link>https://pmem.io/knowledgebase/howto/100000012-how-to-emulate-persistent-memory-using-the-linux-memmapkernel-option/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/howto/100000012-how-to-emulate-persistent-memory-using-the-linux-memmapkernel-option/</guid><description>Applies To This document applies to Linux distributions and versions that support persistent memory.
Introduction The Linux pmem driver allows application developers to begin developing persistent memory enabled applications using memory mapped files residing on Direct Access Filesystems (DAX) such as EXT4 and XFS. A memmap kernel option was added that supports reserving one or more ranges of unassigned memory for use with emulated persistent memory. The memmap parameter documentation can be found at https://www.</description></item><item><title>Microsoft SQL Server 2019</title><link>https://pmem.io/knowledgebase/apps/100000024-microsoft-sql-server-2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/apps/100000024-microsoft-sql-server-2019/</guid><description>This document provides links to information and resources for Microsoft SQL Server 2019 (15.x) or later for Windows and Linux.
Home: https://www.microsoft.com/en-us/sql-server/sql-server-2019 Download: https://www.microsoft.com/en-us/sql-server/sql-server-downloads What&amp;rsquo;s New SQL Server In-Memory Database technologies leverage modern hardware innovation to deliver unparalleled performance and scale. SQL Server 2019 (15.x) builds on earlier innovations in this area, such as in-memory online transaction processing (OLTP), to unlock a new level of scalability across all your database workloads.</description></item><item><title>Mounting a DAX XFS file system can return "wrong fs type, bad option, bad superblock, missing code page or helper program, or other error"</title><link>https://pmem.io/knowledgebase/problem/100000005-mounting-a-dax-xfs-file-system-can-return-wrong-fs-type-bad-option-bad-superblock-missing-code-page-or-helper-program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000005-mounting-a-dax-xfs-file-system-can-return-wrong-fs-type-bad-option-bad-superblock-missing-code-page-or-helper-program/</guid><description>Applies To Linux Kernel 5.3.x or later XFS file system xfsprogs5.1 or later DAX (Direct Access) mount(1) command Issue After creating an XFS file system on an fsdax persistent memory namespace, mounting the file system returns the following error.
// Create an fsdax namespace using ndctl # ndctl create-namespace --region 0 --mode fsdax { &amp;#34;dev&amp;#34;:&amp;#34;namespace0.0&amp;#34;, &amp;#34;mode&amp;#34;:&amp;#34;fsdax&amp;#34;, &amp;#34;map&amp;#34;:&amp;#34;dev&amp;#34;, &amp;#34;size&amp;#34;:&amp;#34;1488.37 GiB (1598.13 GB)&amp;#34;, &amp;#34;uuid&amp;#34;:&amp;#34;2ced2361-1c0a-424e-939e-9fa7b5644deb&amp;#34;, &amp;#34;sector_size&amp;#34;:512, &amp;#34;align&amp;#34;:2097152, &amp;#34;blockdev&amp;#34;:&amp;#34;pmem0&amp;#34; } // Create an XFS file system # mkfs.</description></item><item><title>ndctl returns "error while loading shared libraries. libjson-c.so.2. cannot open shared object file. No such file or directory"</title><link>https://pmem.io/knowledgebase/problem/100000018-ndctl-returns-error-while-loading-shared-libraries-libjson-c.so.2-cannot-open-shared-object-file-no-such-file-or-dire/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/problem/100000018-ndctl-returns-error-while-loading-shared-libraries-libjson-c.so.2-cannot-open-shared-object-file-no-such-file-or-dire/</guid><description>Applies To Linux ndctl utility Issue Executing the ndctl utility, with or without commands or options, returns the following missing library error:
# ndctl --versionndctl: error while loading shared libraries: libjson-c.so.2: cannot open shared obj Cause The issue could be caused by one of the following issues:
The json-c package is not installed A version mis-match between the json-c and ndctl. More recent versions of json-c deliver libjson-c.so.4 rather than libjson-c.</description></item><item><title>Why msync() is less optimal for persistent memory</title><link>https://pmem.io/knowledgebase/development/100000025-why-msync-is-less-optimal-for-persistent-memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/development/100000025-why-msync-is-less-optimal-for-persistent-memory/</guid><description>From the msync(2) man page:
msync() flushes changes made to the in-core copy of a file that was mapped into memory using mmap(2) back to the filesystem. Without use of this call, there is no guarantee that changes are written back before munmap(2) is called. To be more precise, the part of the file that corresponds to the memory area starting at addr and having length length is updated.
So why is msync() not primarily used to flush dirty pages to persistent memory?</description></item></channel></rss>