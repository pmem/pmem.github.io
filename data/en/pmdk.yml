################################# Slider #####################################
slider:
  enable: true
  bg_image: '/images/backgrounds/faq_header.jpg'
  title: 'Persistent Memory Development Kit'
  content: "<p>The Persistent Memory Development Kit (PMDK) is a growing collection of libraries and tools. Tuned and validated on both Linux and Windows, the libraries build on the DAX (Direct Access) feature of those operating systems which allows applications to access persistent memory as memory-mapped files, as described in the <a href=\"https://www.snia.org/sites/default/files/technical_work/final/NVMProgrammingModel_v1.2.pdf\">SNIA NVM Programming Model</a>.</p>
            <p>The source for PMDK is in this <a href=\"https://github.com/pmem/pmdk/\">GitHub repository</a>.</p>
            <p>The following libraries are part of the PMDK.</p>"

################################# Libraries Section #################################
libraries_section:
  enable: true
  libraries:
    library_item1:
      title: 'libpmemobj'
      content: "<p>The <strong>libpmemobj</strong> library provides a transactional object store, providing memory allocation, transactions, and general facilities for persistent memory programming. Developers new to persistent memory probably want to start with this library.</p>
                <p>See the <a href=\"./libpmemobj\">libpmemobj page</a> for documentation and examples.</p>"
    library_item2:
      title: 'libpmemblk'
      content: "<p>The <strong>libpmemblk</strong> library supports arrays of pmem-resident blocks, all the same size, that are atomically updated. For example, a program keeping a cache of fixed-size objects in pmem might find this library useful.</p>
                <p>See the <a href=\"./libpmemblk\">libpmemblk page</a> for documentation and examples.</p>"
    library_item3:
      title: 'libpmemlog'
      content: "<p>The <strong>libpmemlog</strong> library provides a pmem-resident log file. This is useful for programs like databases that append frequently to a log file.</p>
                <p>See the <a href=\"./libpmemlog\">libpmemlog page</a> for documentation and examples.</p>"
    library_item4:
      title: 'libpmem'
      content: "<p>The <strong>libpmem</strong> library provides low level persistent memory support. The libraries above are implemented using <strong>libpmem</strong>. Developers wishing to roll their own persistent memory algorithms will find this library useful, but most developers will likely use <strong>libpmemobj</strong> above and let that library call <strong>libpmem</strong> for them.</p>
                <p>See the <a href=\"./libpmem\">libpmem page</a> for documentation and examples.</p>"
    library_item5:
      title: 'libpmem2'
      content: "<p>The <strong>libpmem2</strong> library provides low level persistent memory support. The library is a new version of <strong>libpmem</strong>. <strong>libpmem2</strong> provides a more universal and platform-agnostic interface. Developers wishing to roll their own persistent memory algorithms will find this library useful, but most developers will likely use <strong>libpmemobj</strong> above that provides memory allocation and transactions support.</p>
                <p>See the <a href=\"./libpmem2\">libpmem2 page</a> for documentation and examples.</p>"
    library_item6:
      title: 'libpmemset'
      content: "<p><strong>libpmemset</strong> aims to provide support for persistent file I/O operations, runtime mapping concatenation and multi-part support across poolsets. It relies on synchronous event streams for pool modifications.</p>
                <blockquote><p><strong>Note:</strong> This is still an <strong>experimental API</strong> and should not be used in production environments.</p></blockquote>
                <p>See the <a href=\"./libpmemset\">libpmemset page</a> for updates</p>"
    library_item7:
      title: 'libvmem'
      content: "<p>The <strong>libvmem</strong> library turns a pool of persistent memory into a volatile memory pool, similar to the system heap but kept separate and with its own malloc-style API.</p>
                <p>See the <a href=\"/vmem/libvmem\">libvmem page</a> for updates</p>
                <blockquote><p><strong>Note:</strong> Since persistent memory support has been integrated into <a href=\"https://github.com/memkind/memkind\">libmemkind</a>, that library is the <strong>recommended</strong> choice for any new volatile usages, since it combines support for multiple types of volatile memory into a single, convenient API.</p></blockquote>"
    library_item8:
      title: 'libvmmalloc'
      content: "<p>The <strong>libvmmalloc</strong> library <strong>transparently</strong> converts all the dynamic memory allocations into persistent memory allocations. This allows the use of persistent memory as volatile memory without modifying the target application.</p>
                <p>See the <a href=\"/vmem/libvmmalloc\">libvmmalloc page</a> for documentation and examples.</p>"
    library_item9:
      title: 'libpmempool'
      content: "<p>The <strong>libpmempool</strong> provides support for off-line pool management and diagnostics. Currently it provides only “check” and “repair” operations for pmemlog and pmemblk memory pools, and for BTT devices.</p>
                <p>See the <a href=\"./libpmempool\">libpmempool page</a> for documentation and examples.</p>"
    library_itemA1:
      title: 'pmempool'
      content: "<p><strong>pmempool</strong> is a management tool for persistent memory pool files created by the PMDK libraries. It may be useful for system administrators as well as for software developers for troubleshooting and debugging.</p>
                <p>See the <a href=\"./pmempool\">pmempool page</a> for available commands and documentation.</p>"
    library_itemA2:
      title: 'librpma'
      content: "<p><strong>librpma</strong> is a C library to simplify accessing persistent memory on remote hosts over Remote Direct Memory Access (RDMA).</p>
                <p>See the <a href=\"/rpma/\">librpma page</a> for available documentation.</p>"
    library_itemA3:
      title: 'librpmem'
      content: "<p><strong>pmempool</strong> is a management tool for persistent memory pool files created by the PMDK libraries. It may be useful for system administrators as well as for software developers for troubleshooting and debugging.</p>
                <p>See the <a href=\"./librpmem\">librpmem page</a> for documentation and examples.</p>
                <blockquote><p><strong>Note:</strong> This is still an <strong>experimental</strong> API and should not be used in production environments.</p></blockquote>
                <blockquote><p><strong>Note:</strong> The alternative solution for accessing remote persistent memory is implemented by the <a href=\"#librpma\">librpma</a> library (see below).</p></blockquote>"
    library_itemA4:
      title: 'libvmemcache'
      content: "<p><strong>libvmemcache</strong> is an embeddable and lightweight in-memory caching solution. It’s designed to fully take advantage of large capacity memory, such as persistent memory with DAX, through memory mapping in an efficient and scalable way.</p>
                <p>See the <a href=\"/vmemcache\">libvmemcache</a> for current documentation.</p>"
    library_itemA5:
      title: 'daxio'
      content: "<p>The <strong>daxio</strong> is a utility that performs I/O on Device DAX devices or zero a Device DAX device.</p>
                <p>See the <a href=\"./daxio\">daxio page</a> for available commands and documentation.</p>"
    library_itemA6:
      title: 'pmreorder'
      content: "<p>The <strong>pmreorder</strong> is an utility that performs a consistency check of a persistent program.</p>
                <p>See the <a href=\"./pmreorder\">pmreorder page</a> for available commands and documentation.</p>"
    library_itemA7:
      title: 'pmdk-convert'
      content: "<p>The <strong>pmdk-convert</strong> tool performs conversion of the specified pool from the old layout versions to the newest one supported by this tool.</p>
                <p>See the <a href=\"/pmdk-convert\">pmdk-convert</a> for current documentation.</p>"
    library_itemA8:
      title: 'C++ bindings'
      content: "<p>The C++ bindings aim at providing an easier to use, less error prone implementation of <strong>libpmemobj</strong>. The C++ implementation requires a compiler compliant with C++11 and one feature requires C++17.</p>
                <p>See the <a href=\"/libpmemobj-cpp/\">C++ bindings page</a> for documentation and examples.</p>"
    library_itemA9:
      title: 'pmemkv'
      content: "<p><strong>pmemkv</strong> is a local/embedded key-value datastore optimized for persistent memory. Rather than being tied to a single language or backing implementation, <strong>pmemkv</strong> provides different options for language bindings and storage engines.</p>
                <p>See the <a href=\"/pmemkv/\">pmemkv page</a> for available documentation.</p>"

################################# Disclaimer #################################
disclaimer:
  enable: true
  content: "The contents of this web site and the associated <a href=\"https://github.com/pmem\">GitHub repositories</a> are BSD-licensed open source."