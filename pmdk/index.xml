<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Persistent Memory Development Kit (PMDK) on PMem.io</title><link>https://pmem.io/pmdk/</link><description>Recent content in Persistent Memory Development Kit (PMDK) on PMem.io</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://pmem.io/pmdk/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title/><link>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title/><link>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title/><link>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title/><link>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title/><link>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title/><link>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title/><link>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title/><link>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/daxio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/daxio/</guid><description>The daxio utility daxio is a standalone utility that may be used to transfer data to or from Device DAX device or to wipe out data from a device.
See the daxio man page for current master documentation and examples or see older versions:
daxio version 1.11 daxio version 1.10 daxio version 1.9 daxio version 1.8 daxio version 1.7 daxio version 1.6 daxio version 1.5 daxio version 1.4</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/daxio/daxio.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
EXAMPLE
SEE ALSO
NAME daxio - Perform I/O on Device DAX devices or zero a Device DAX device
SYNOPSIS $ daxio [&amp;lt;options&amp;gt;] DESCRIPTION The daxio utility performs I/O on Device DAX devices or zero a Device DAX device. Since the standard I/O APIs (read/write) cannot be used with Device DAX, data transfer is performed on a memory-mapped device. The daxio may be used to dump Device DAX data to a file, restore data from a backup copy, move/copy data to another device or to erase data from a device.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/daxio/daxio.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
EXAMPLE
SEE ALSO
NAME daxio - Perform I/O on Device DAX devices or zero a Device DAX device
SYNOPSIS $ daxio [&amp;lt;options&amp;gt;] DESCRIPTION The daxio utility performs I/O on Device DAX devices or zero a Device DAX device. Since the standard I/O APIs (read/write) cannot be used with Device DAX, data transfer is performed on a memory-mapped device. The daxio may be used to dump Device DAX data to a file, restore data from a backup copy, move/copy data to another device or to erase data from a device.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/daxio/daxio.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
EXAMPLE
SEE ALSO
NAME daxio - Perform I/O on Device DAX devices or zero a Device DAX device
SYNOPSIS $ daxio [&amp;lt;options&amp;gt;] DESCRIPTION The daxio utility performs I/O on Device DAX devices or zero a Device DAX device. Since the standard I/O APIs (read/write) cannot be used with Device DAX, data transfer is performed on a memory-mapped device. The daxio may be used to dump Device DAX data to a file, restore data from a backup copy, move/copy data to another device or to erase data from a device.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/daxio/daxio.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
EXAMPLE
SEE ALSO
NAME daxio - Perform I/O on Device DAX devices or zero a Device DAX device
SYNOPSIS $ daxio [&amp;lt;options&amp;gt;] DESCRIPTION The daxio utility performs I/O on Device DAX devices or zero a Device DAX device. Since the standard I/O APIs (read/write) cannot be used with Device DAX, data transfer is performed on a memory-mapped device. The daxio may be used to dump Device DAX data to a file, restore data from a backup copy, move/copy data to another device or to erase data from a device.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/daxio/daxio.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
EXAMPLE
SEE ALSO
NAME daxio - Perform I/O on Device DAX devices or zero a Device DAX device
SYNOPSIS $ daxio [&amp;lt;options&amp;gt;] DESCRIPTION The daxio utility performs I/O on Device DAX devices or zero a Device DAX device. Since the standard I/O APIs (read/write) cannot be used with Device DAX, data transfer is performed on a memory-mapped device. The daxio may be used to dump Device DAX data to a file, restore data from a backup copy, move/copy data to another device or to erase data from a device.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/daxio/daxio.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/daxio/daxio.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/daxio/daxio.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/daxio/daxio.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/daxio/daxio.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/daxio/daxio.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
EXAMPLE
SEE ALSO
NAME daxio - Perform I/O on Device DAX devices or zero a Device DAX device
SYNOPSIS $ daxio [&amp;lt;options&amp;gt;] DESCRIPTION The daxio utility performs I/O on Device DAX devices or zero a Device DAX device. Since the standard I/O APIs (read/write) cannot be used with Device DAX, data transfer is performed on a memory-mapped device. The daxio may be used to dump Device DAX data to a file, restore data from a backup copy, move/copy data to another device or to erase data from a device.</description></item><item><title>daxio | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/daxio/daxio.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/daxio/daxio.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/libpmem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmem/</guid><description>The libpmem library libpmem provides low level persistent memory support. In particular, support for the persistent memory instructions for flushing changes to pmem is provided.
This library is provided for software which tracks every store to pmem and needs to flush those changes to durability. Most developers will find higher level libraries like libpmemobj to be much more convenient.
NOTE: Support for Windows and FreeBSD are deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem Library API versioning: const char *pmem_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmem_errormsg(void); Other library functions: A description of other libpmem functions can be found on the following manual pages:
most commonly used functions: pmem_is_pmem(3)
partial flushing operations: pmem_flush(3)</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_file(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_file(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); DESCRIPTION Most pmem-aware applications will take advantage of higher level libraries that alleviate the need for the application to call into libpmem directly.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/libpmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/libpmem.3/</guid><description>NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem Most commonly used functions: int pmem_is_pmem(const void *addr, size_t len); void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void *pmem_map_file(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); Partial flushing operations: void pmem_flush(const void *addr, size_t len); void pmem_drain(void); int pmem_has_hw_drain(void); Copying to persistent memory: void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); Library API versioning: const char *pmem_check_version( unsigned major_required, unsigned minor_required); Error handling:</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem Library API versioning: const char *pmem_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmem_errormsg(void); Other library functions: A description of other libpmem functions can be found on the following manual pages:
most commonly used functions: pmem_is_pmem(3)
partial flushing operations: pmem_flush(3)</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_file(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_file(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); DESCRIPTION Most pmem-aware applications will take advantage of higher level libraries that alleviate the need for the application to call into libpmem directly.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem Library API versioning: const char *pmem_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmem_errormsg(void); Other library functions: A description of other libpmem functions can be found on the following manual pages:
most commonly used functions: pmem_is_pmem(3)
partial flushing operations: pmem_flush(3)</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_file(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_file(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); DESCRIPTION Most pmem-aware applications will take advantage of higher level libraries that alleviate the need for the application to call into libpmem directly.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem Library API versioning: const char *pmem_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmem_errormsg(void); Other library functions: A description of other libpmem functions can be found on the following manual pages:
most commonly used functions: pmem_is_pmem(3)
partial flushing operations: pmem_flush(3)</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_file(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_file(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); DESCRIPTION Most pmem-aware applications will take advantage of higher level libraries that alleviate the need for the application to call into libpmem directly.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
NOTE: Support for Windows and FreeBSD are deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem Library API versioning: const char *pmem_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmem_errormsg(void); Other library functions: A description of other libpmem functions can be found on the following manual pages:</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_file(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_file(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); DESCRIPTION Most pmem-aware applications will take advantage of higher level libraries that alleviate the need for the application to call into libpmem directly.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/libpmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/libpmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/libpmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/libpmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmem/libpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmem/pmem_is_pmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmem/libpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmem/pmem_is_pmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmem/libpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmem/pmem_is_pmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmem/libpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmem/pmem_is_pmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem/libpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem/pmem_is_pmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem Library API versioning: const char *pmem_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmem_errormsg(void); Other library functions: A description of other libpmem functions can be found on the following manual pages:
most commonly used functions: pmem_is_pmem(3)
partial flushing operations: pmem_flush(3)</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_file(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_file(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); DESCRIPTION Most pmem-aware applications will take advantage of higher level libraries that alleviate the need for the application to call into libpmem directly.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/libpmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/libpmem.3/</guid><description>NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem Most commonly used functions: int pmem_is_pmem(const void *addr, size_t len); void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void *pmem_map_file(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); Partial flushing operations: void pmem_flush(const void *addr, size_t len); void pmem_drain(void); int pmem_has_hw_drain(void); Copying to persistent memory: void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); Library API versioning: const char *pmem_check_version( unsigned major_required, unsigned minor_required); Error handling:</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
NOTE: Support for Windows and FreeBSD are deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_fileU()/pmem_map_fileW(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_fileU(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); void *pmem_map_fileW(const wchar_t *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmem_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmem_check_versionW( unsigned major_required, unsigned minor_required); Error handling: const char *pmem_errormsgU(void); const wchar_t *pmem_errormsgW(void); Other library functions: A description of other libpmem functions can be found on the following manual pages:</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_fileU()/pmem_map_fileW(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_fileU(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); void *pmem_map_fileW(const wchar_t *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmem_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmem_check_versionW( unsigned major_required, unsigned minor_required); Error handling: const char *pmem_errormsgU(void); const wchar_t *pmem_errormsgW(void); Other library functions: A description of other libpmem functions can be found on the following manual pages:</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_fileU()/pmem_map_fileW(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_fileU(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); void *pmem_map_fileW(const wchar_t *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmem_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmem_check_versionW( unsigned major_required, unsigned minor_required); Error handling: const char *pmem_errormsgU(void); const wchar_t *pmem_errormsgW(void); Other library functions: A description of other libpmem functions can be found on the following manual pages:</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_fileU()/pmem_map_fileW(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_fileU(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); void *pmem_map_fileW(const wchar_t *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
NOTE: Support for Windows and FreeBSD are deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_fileU()/pmem_map_fileW(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_fileU(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); void *pmem_map_fileW(const wchar_t *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.3/libpmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/libpmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmem/libpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmem/pmem_is_pmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmem/libpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmem/pmem_is_pmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmem/libpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmem/pmem_is_pmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmem/libpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmem/pmem_is_pmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem/libpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem/pmem_is_pmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem/libpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem/libpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; cc ... -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmem_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmem_check_versionW( unsigned major_required, unsigned minor_required); Error handling: const char *pmem_errormsgU(void); const wchar_t *pmem_errormsgW(void); Other library functions: A description of other libpmem functions can be found on the following manual pages:</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem/pmem_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem/pmem_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_flush.3 &amp;ndash; man page for partial flushing operations
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_flush(), pmem_drain(), pmem_persist(), pmem_msync(), pmem_deep_flush(), pmem_deep_drain(), pmem_deep_persist(), pmem_has_hw_drain(), pmem_has_auto_flush() - check persistency, store persistent data and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void pmem_persist(const void *addr, size_t len); int pmem_msync(const void *addr, size_t len); void pmem_flush(const void *addr, size_t len); void pmem_deep_flush(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_drain(const void *addr, size_t len); (EXPERIMENTAL) int pmem_deep_persist(const void *addr, size_t len); (EXPERIMENTAL) void pmem_drain(void); int pmem_has_auto_flush(void); (EXPERIMENTAL) int pmem_has_hw_drain(void); DESCRIPTION The functions in this section provide access to the stages of flushing to persistence, for the less common cases where an application needs more control of the flushing operations than the pmem_persist() function.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem/pmem_is_pmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem/pmem_is_pmem.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
CAVEATS
BUGS
SEE ALSO
NAME pmem_is_pmem(), pmem_map_fileU()/pmem_map_fileW(), pmem_unmap() - check persistency, create and delete mappings
SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; int pmem_is_pmem(const void *addr, size_t len); void *pmem_map_fileU(const char *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); void *pmem_map_fileW(const wchar_t *path, size_t len, int flags, mode_t mode, size_t *mapped_lenp, int *is_pmemp); int pmem_unmap(void *addr, size_t len); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem/pmem_memmove_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem/pmem_memmove_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem_memmove_persist.3 &amp;ndash; man page for functions that provide optimized copying to persistent memory
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem_memmove(), pmem_memcpy(), pmem_memset(), pmem_memmove_persist(), pmem_memcpy_persist(), pmem_memset_persist(), pmem_memmove_nodrain(), pmem_memcpy_nodrain(), pmem_memset_nodrain()
functions that provide optimized copying to persistent memory SYNOPSIS #include &amp;lt;libpmem.h&amp;gt; void *pmem_memmove(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memcpy(void *pmemdest, const void *src, size_t len, unsigned flags); void *pmem_memset(void *pmemdest, int c, size_t len, unsigned flags); void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len); void *pmem_memset_persist(void *pmemdest, int c, size_t len); void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len); void *pmem_memset_nodrain(void *pmemdest, int c, size_t len); DESCRIPTION pmem_memmove(), pmem_memcpy() and pmem_memset() functions provide the same memory copying as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/libpmem2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmem2/</guid><description>The libpmem2 library libpmem2 provides low-level persistent memory support. In particular, support for the persistent memory instructions for flushing changes to pmem is provided.
This library is provided for software that tracks every store to pmem and needs to flush those changes to durability. Most developers will find higher level libraries like libpmemobj to be much more convenient.
NOTE: Support for Windows and FreeBSD are deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/libpmem2.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION libpmem2 provides low-level persistent memory (pmem) support for applications using direct access storage (DAX), which is storage that supports load/store access without paging blocks from a block storage device. Some types of non-volatile memory DIMMs (NVDIMMs) provide this type of byte addressable access to storage. A persistent memory aware file system is typically used to expose the direct access to applications.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( struct pmem2_badblock_context **bbctx, const struct pmem2_source *src); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration structure for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map_new() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for most parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *config, struct pmem2_vm_reservation *rsv, size_t rsv_offset); DESCRIPTION The pmem2_config_set_vm_reservation() function sets the virtual memory reservation and an offset to be used during a mapping. rsv should be already initialized. Please see pmem2_vm_reservation_new(3) for details. rsv_offset marks the offset in the reservation for the mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_deep_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsg() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsg(void); DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsg(). The error message buffer is thread-local; errors encountered in one thread do not affect its value in other threads. The buffer is never cleared by any library function; its content is significant only when the return value of the immediately preceding call to a libpmem2(7) function indicated an error.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_get_drain_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it. While it is not strictly true, draining can be thought of as waiting for previous flushes to complete.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_get_flush_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns. To get this guarantee, application should either use the persist operation (see pmem2_get_persist_fn(3)) or follow pmem2_flush_fn by a drain operation (see pmem2_get_drain_fn(3)).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_get_memmove_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_get_persist_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.
There are no alignment restrictions on the range described by ptr and size, but pmem2_persist_fn may expand the range as necessary to meet platform alignment requirements.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_delete.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_delete() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_delete(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map_delete() function deletes the mapping described by the struct pmem2_map object.
If pmem2_map_delete() succeeds in deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_from_existing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_from_existing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_from_existing() - creates a pmem2_map object from an existing mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_from_existing(struct pmem2_map **map, const struct pmem2_source *src, void *addr, size_t len, enum pmem2_granularity gran); DESCRIPTION The pmem2_map_from_existing() returns a new struct pmem2_map* for mapping provided by the user. This function allows usage of libpmem2(7) API without pmem2_map_new(3) for mapping file. Mapping is defined by addr and len. You have to specify underlying file as a src, and define granularity of this mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_map_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_new() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map_new(struct pmem2_map **map_ptr, const struct pmem2_config *config, const struct pmem2_source *source); DESCRIPTION The pmem2_map_new() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
Optionally, the mapping can be created at the offset of the virtual memory reservation set in the configuration config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perror() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perror(const char *format, ...); DESCRIPTION The pmem2_perror() function produces a message on standard error stream describing the last error encountered during library call.
pmem2_perror() takes a variable number of arguments. First, the argument string format is printed - similarly to the printf(3), followed by a colon and a blank. Then an error message retrieved from the pmem2_errormsg(), and a new-line.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map_new(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION The pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.
fd must be opened with O_RDONLY or O_RDWR mode.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_get_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_get_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_fd.3 &amp;ndash; man page for pmem2_source_get_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_fd() - reads file descriptor of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_fd(const struct pmem2_source *src, int *fd); DESCRIPTION The pmem2_source_get_fd() function reads the file descriptor of struct pmem2_source* object describing the data source and returns it by fd parameter.
RETURN VALUE The pmem2_source_get_fd() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_numa_node.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_numa_node.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_numa_node() - returns data source numa node
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_numa_node(const struct pmem2_source *source, int *numa_node); DESCRIPTION The pmem2_source_numa_node() function retrieves the numa node of the given data source. The numa node can be used to, e.g., pin threads to near-memory cores. The numa node is stored in *numa_node. It is the same value that is shown as numa_node in ndctl list -v.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_pread_mcsafe.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_pread_mcsafe.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_pread_mcsafe(), pmem2_source_pwrite_mcsafe() - read source contents or write to the source in a safe manner
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_pread_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); int pmem2_source_pwrite_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); DESCRIPTION The pmem2_source_pread_mcsafe() function reads size bytes from the source src starting at offset offset into the buffer buf. The pmem2_source_pwrite_mcsafe() function writes size bytes from the buffer buf to the source src starting at the offset offset.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor stored in the source and puts it in *size.
This function hides the quirkiness of Device DAX size detection.
RETURN VALUE The pmem2_source_size() function returns 0 on success.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_vm_reservation_extend.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_vm_reservation_extend.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_extend(), pmem2_vm_reservation_shrink() - extends and shrinks existing virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_extend(struct pmem2_vm_reservation *rsv, size_t size); int pmem2_vm_reservation_shrink(struct pmem2_vm_reservation *rsv, size_t offset, size_t size); DESCRIPTION The pmem2_vm_reservation_extend() function extends an existing virtual memory reservation by the given size. For the function to succeed the size has to be aligned to an appropriate allocation granularity.
If the pmem2_vm_reservation_extend() succeeds in extending a reservation, it provides placeholder virtual memory range that starts from an address at the end of the old reservation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_vm_reservation_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_vm_reservation_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_address() - reads address of the virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_vm_reservation_get_address(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_address() function reads address of the created virtual memory reservation. The rsv parameter points to the structure describing the reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_address() function returns a pointer to the virtual memory reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_vm_reservation_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_vm_reservation_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_size() - reads virtual memory reservation size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_vm_reservation_get_size(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_size() function reads size of the created virtual memory reservation. The rsv parameter points to the structure describing virtual memory reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_size() function returns a size of the virtual reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_vm_reservation_map_find.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_vm_reservation_map_find.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_map_find(), pmem2_vm_reservation_map_find_prev(), pmem2_vm_reservation_map_find_next(), pmem2_vm_reservation_map_find_first() and pmem2_vm_reservation_map_find_last() - search for the mapping located at the desirable location
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_map; struct pmem2_vm_reservation; int pmem2_vm_reservation_map_find(struct pmem2_vm_reservation *rsv, size_t reserv_offset, size_t len, struct pmem2_map **map_ptr); int pmem2_vm_reservation_map_find_prev(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **prev_map); int pmem2_vm_reservation_map_find_next(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **next_map); int pmem2_vm_reservation_map_find_first(struct pmem2_vm_reservation *rsv, struct pmem2_map **first_map); int pmem2_vm_reservation_map_find_last(struct pmem2_vm_reservation *rsv, struct pmem2_map **last_map); DESCRIPTION Mappings are inserted to the virtual memory reservation in the order of their virtual address space location.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes an instance of virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv_ptr, void *addr, size_t size); int pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv_ptr); DESCRIPTION The pmem2_vm_reservation_new() function creates a new blank mapping in the virtual address space of the calling process. Reservation serves as a placeholder of a given size on which sources can be mapped.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/libpmem2.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2021, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION libpmem2 provides low-level persistent memory (pmem) support for applications using direct access storage (DAX), which is storage that supports load/store access without paging blocks from a block storage device. Some types of non-volatile memory DIMMs (NVDIMMs) provide this type of byte addressable access to storage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the a persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( struct pmem2_badblock_context **bbctx, const struct pmem2_source *src); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration structure for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map_new() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for most parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *config, struct pmem2_vm_reservation *rsv, size_t rsv_offset); DESCRIPTION The pmem2_config_set_vm_reservation() function sets the virtual memory reservation and an offset to be used during a mapping. rsv should be already initialized. Please see pmem2_vm_reservation_new(3) for details. rsv_offset marks the offset in the reservation for the mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_deep_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsg() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsg(void); DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsg(). The error message buffer is thread-local; errors encountered in one thread do not affect its value in other threads. The buffer is never cleared by any library function; its content is significant only when the return value of the immediately preceding call to a libpmem2(7) function indicated an error.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_get_drain_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_get_flush_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_get_memmove_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_get_persist_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_delete.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_delete() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_delete(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map_delete() function deletes the mapping described by the struct pmem2_map object.
If pmem2_map_delete() succeeds in deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_from_existing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_from_existing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_from_existing() - creates a pmem2_map object from an existing mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_from_existing(struct pmem2_map **map, const struct pmem2_source *src, void *addr, size_t len, enum pmem2_granularity gran); DESCRIPTION The pmem2_map_from_existing() returns a new struct pmem2_map* for mapping provided by the user. This function allows usage of libpmem2(7) API without pmem2_map_new(3) for mapping file. Mapping is defined by addr and len. You have to specify underlying file as a src, and define granularity of this mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_map_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_new() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map_new(struct pmem2_map **map_ptr, const struct pmem2_config *config, const struct pmem2_source *source); DESCRIPTION The pmem2_map_new() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
Optionally, the mapping can be created at the offset of the virtual memory reservation set in the configuration config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perror() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perror(const char *format, ...); DESCRIPTION The pmem2_perror() function produces a message on standard error stream describing the last error encountered during library call.
pmem2_perror() takes a variable number of arguments. First, the argument string format is printed - similarly to the printf(3), followed by a colon and a blank. Then an error message retrieved from the pmem2_errormsg(), and a new-line.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map_new(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_get_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_get_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_fd.3 &amp;ndash; man page for pmem2_source_get_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_fd() - reads file descriptor of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_fd(const struct pmem2_source *src, int *fd); DESCRIPTION The pmem2_source_get_fd() function reads the file descriptor of struct pmem2_source* object describing the data source and returns it by fd parameter.
This function is Linux only, on Windows use pmem2_source_get_handle(3).
RETURN VALUE The pmem2_source_get_fd() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_get_handle.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_get_handle.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_handsle.3 &amp;ndash; man page for pmem2_source_get_handle
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_handle() - reads file handler of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_handle(const struct pmem2_source *src, HANDLE *h); DESCRIPTION The pmem2_source_get_handle() function reads the file handler of struct pmem2_source* object describing the data source and returns it by h parameter.
This function is Windows only, on Linux use pmem2_source_get_fd(3). If the source was created using pmem2_source_from_fd(3) then pmem2_source_get_handle() is also valid function to read handler, because file descriptor is converted to file handle during source creation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_vm_reservation_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_vm_reservation_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_address() - reads address of the virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_vm_reservation_get_address(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_address() function reads address of the created virtual memory reservation. The rsv parameter points to the structure describing the reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_address() function returns a pointer to the virtual memory reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_vm_reservation_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_vm_reservation_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_size() - reads virtual memory reservation size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_vm_reservation_get_size(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_size() function reads size of the created virtual memory reservation. The rsv parameter points to the structure describing virtual memory reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_size() function returns a size of the virtual reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes an instance of virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; void pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv_ptr, void *addr, size_t size); void pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv_ptr); DESCRIPTION The pmem2_vm_reservation_new() function creates a new blank mapping in the virtual address space of the calling process. Reservation serves as a placeholder of a given size on which sources can be mapped.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/libpmem2.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION libpmem2 provides low-level persistent memory (pmem) support for applications using direct access storage (DAX), which is storage that supports load/store access without paging blocks from a block storage device. Some types of non-volatile memory DIMMs (NVDIMMs) provide this type of byte addressable access to storage. A persistent memory aware file system is typically used to expose the direct access to applications.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the a persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( struct pmem2_badblock_context **bbctx, const struct pmem2_source *src); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration structure for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map_new() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for most parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *config, struct pmem2_vm_reservation *rsv, size_t rsv_offset); DESCRIPTION The pmem2_config_set_vm_reservation() function sets the virtual memory reservation and an offset to be used during a mapping. rsv should be already initialized. Please see pmem2_vm_reservation_new(3) for details. rsv_offset marks the offset in the reservation for the mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_deep_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsg() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsg(void); DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsg(). The error message buffer is thread-local; errors encountered in one thread do not affect its value in other threads. The buffer is never cleared by any library function; its content is significant only when the return value of the immediately preceding call to a libpmem2(7) function indicated an error.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_get_drain_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_get_flush_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_get_memmove_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_get_persist_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_delete.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_delete() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_delete(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map_delete() function deletes the mapping described by the struct pmem2_map object.
If pmem2_map_delete() succeeds in deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_from_existing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_from_existing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_from_existing() - creates a pmem2_map object from an existing mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_from_existing(struct pmem2_map **map, const struct pmem2_source *src, void *addr, size_t len, enum pmem2_granularity gran); DESCRIPTION The pmem2_map_from_existing() returns a new struct pmem2_map* for mapping provided by the user. This function allows usage of libpmem2(7) API without pmem2_map_new(3) for mapping file. Mapping is defined by addr and len. You have to specify underlying file as a src, and define granularity of this mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_map_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_new() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map_new(struct pmem2_map **map_ptr, const struct pmem2_config *config, const struct pmem2_source *source); DESCRIPTION The pmem2_map_new() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
Optionally, the mapping can be created at the offset of the virtual memory reservation set in the configuration config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perror() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perror(const char *format, ...); DESCRIPTION The pmem2_perror() function produces a message on standard error stream describing the last error encountered during library call.
pmem2_perror() takes a variable number of arguments. First, the argument string format is printed - similarly to the printf(3), followed by a colon and a blank. Then an error message retrieved from the pmem2_errormsg(), and a new-line.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map_new(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_get_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_get_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_fd.3 &amp;ndash; man page for pmem2_source_get_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_fd() - reads file descriptor of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_fd(const struct pmem2_source *src, int *fd); DESCRIPTION The pmem2_source_get_fd() function reads the file descriptor of struct pmem2_source* object describing the data source and returns it by fd parameter.
This function is Linux only, on Windows use pmem2_source_get_handle(3).
RETURN VALUE The pmem2_source_get_fd() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_get_handle.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_get_handle.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_handsle.3 &amp;ndash; man page for pmem2_source_get_handle
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_handle() - reads file handler of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_handle(const struct pmem2_source *src, HANDLE *h); DESCRIPTION The pmem2_source_get_handle() function reads the file handler of struct pmem2_source* object describing the data source and returns it by h parameter.
This function is Windows only, on Linux use pmem2_source_get_fd(3). If the source was created using pmem2_source_from_fd(3) then pmem2_source_get_handle() is also valid function to read handler, because file descriptor is converted to file handle during source creation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_numa_node.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_numa_node.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_numa_node() - returns data source numa node
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_numa_node(const struct pmem2_source *source, int *numa_node); DESCRIPTION The pmem2_source_numa_node() function retrieves the numa node of the given data source. The numa node can be used to, e.g., pin threads to near-memory cores. The numa node is stored in *numa_node. It is the same value that is shown as numa_node in ndctl list -v.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_vm_reservation_extend.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_vm_reservation_extend.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_extend(), pmem2_vm_reservation_shrink() - extends and shrinks existing virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_extend(struct pmem2_vm_reservation *rsv, size_t size); int pmem2_vm_reservation_shrink(struct pmem2_vm_reservation *rsv, size_t offset, size_t size); DESCRIPTION The pmem2_vm_reservation_extend() function extends an existing virtual memory reservation by the given size. For the function to succeed the size has to be aligned to an appropriate allocation granularity.
If the pmem2_vm_reservation_extend() succeeds in extending a reservation, it provides placeholder virtual memory range that starts from an address at the end of the old reservation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_vm_reservation_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_vm_reservation_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_address() - reads address of the virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_vm_reservation_get_address(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_address() function reads address of the created virtual memory reservation. The rsv parameter points to the structure describing the reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_address() function returns a pointer to the virtual memory reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_vm_reservation_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_vm_reservation_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_size() - reads virtual memory reservation size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_vm_reservation_get_size(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_size() function reads size of the created virtual memory reservation. The rsv parameter points to the structure describing virtual memory reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_size() function returns a size of the virtual reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_vm_reservation_map_find.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_vm_reservation_map_find.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_map_find(), pmem2_vm_reservation_map_find_prev(), pmem2_vm_reservation_map_find_next(), pmem2_vm_reservation_map_find_first() and pmem2_vm_reservation_map_find_last() - search for the mapping located at the desirable location
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_map; struct pmem2_vm_reservation; int pmem2_vm_reservation_map_find(struct pmem2_vm_reservation *rsv, size_t reserv_offset, size_t len, struct pmem2_map **map_ptr); int pmem2_vm_reservation_map_find_prev(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **prev_map); int pmem2_vm_reservation_map_find_next(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **next_map); int pmem2_vm_reservation_map_find_first(struct pmem2_vm_reservation *rsv, struct pmem2_map **first_map); int pmem2_vm_reservation_map_find_last(struct pmem2_vm_reservation *rsv, struct pmem2_map **last_map); DESCRIPTION Mappings are inserted to the virtual memory reservation in the order of their virtual address space location.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes an instance of virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv_ptr, void *addr, size_t size); int pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv_ptr); DESCRIPTION The pmem2_vm_reservation_new() function creates a new blank mapping in the virtual address space of the calling process. Reservation serves as a placeholder of a given size on which sources can be mapped.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/libpmem2.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION libpmem2 provides low-level persistent memory (pmem) support for applications using direct access storage (DAX), which is storage that supports load/store access without paging blocks from a block storage device. Some types of non-volatile memory DIMMs (NVDIMMs) provide this type of byte addressable access to storage. A persistent memory aware file system is typically used to expose the direct access to applications.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_async.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_async.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2022, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vdm(), pmem2_memcpy_async(), pmem2_memmove_async(), pmem2_memset_async() - asynchronous data movement operations
SYNOPSIS #define PMEM2_USE_MINIASYNC 1 #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_future; int pmem2_config_set_vdm(struct pmem2_config *cfg, struct vdm *vdm); struct pmem2_future pmem2_memcpy_async(struct pmem2_map *map, void *pmemdest, const void *src, size_t len, unsigned flags); struct pmem2_future pmem2_memmove_async(struct pmem2_map *map, void *pmemdest, const void *src, size_t len, unsigned flags) struct pmem2_future pmem2_memset_async(struct pmem2_map *map, void *pmemstr, int c, size_t n, unsigned flags) { DESCRIPTION To use those functions, you must have libminiasync installed.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( struct pmem2_badblock_context **bbctx, const struct pmem2_source *src); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration structure for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map_new() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for most parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *config, struct pmem2_vm_reservation *rsv, size_t rsv_offset); DESCRIPTION The pmem2_config_set_vm_reservation() function sets the virtual memory reservation and an offset to be used during a mapping. rsv should be already initialized. Please see pmem2_vm_reservation_new(3) for details. rsv_offset marks the offset in the reservation for the mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_deep_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsg() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsg(void); DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsg(). The error message buffer is thread-local; errors encountered in one thread do not affect its value in other threads. The buffer is never cleared by any library function; its content is significant only when the return value of the immediately preceding call to a libpmem2(7) function indicated an error.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_get_drain_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_get_flush_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_get_memmove_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_get_persist_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_delete.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_delete() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_delete(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map_delete() function deletes the mapping described by the struct pmem2_map object.
If pmem2_map_delete() succeeds in deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_from_existing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_from_existing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_from_existing() - creates a pmem2_map object from an existing mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_from_existing(struct pmem2_map **map, const struct pmem2_source *src, void *addr, size_t len, enum pmem2_granularity gran); DESCRIPTION The pmem2_map_from_existing() returns a new struct pmem2_map* for mapping provided by the user. This function allows usage of libpmem2(7) API without pmem2_map_new(3) for mapping file. Mapping is defined by addr and len. You have to specify underlying file as a src, and define granularity of this mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_map_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_new() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map_new(struct pmem2_map **map_ptr, const struct pmem2_config *config, const struct pmem2_source *source); DESCRIPTION The pmem2_map_new() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
Optionally, the mapping can be created at the offset of the virtual memory reservation set in the configuration config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perror() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perror(const char *format, ...); DESCRIPTION The pmem2_perror() function produces a message on standard error stream describing the last error encountered during library call.
pmem2_perror() takes a variable number of arguments. First, the argument string format is printed - similarly to the printf(3), followed by a colon and a blank. Then an error message retrieved from the pmem2_errormsg(), and a new-line.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map_new(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_get_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_get_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_fd.3 &amp;ndash; man page for pmem2_source_get_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_fd() - reads file descriptor of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_fd(const struct pmem2_source *src, int *fd); DESCRIPTION The pmem2_source_get_fd() function reads the file descriptor of struct pmem2_source* object describing the data source and returns it by fd parameter.
This function is Linux only, on Windows use pmem2_source_get_handle(3).
RETURN VALUE The pmem2_source_get_fd() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_get_handle.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_get_handle.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_handsle.3 &amp;ndash; man page for pmem2_source_get_handle
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_handle() - reads file handler of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_handle(const struct pmem2_source *src, HANDLE *h); DESCRIPTION The pmem2_source_get_handle() function reads the file handler of struct pmem2_source* object describing the data source and returns it by h parameter.
This function is Windows only, on Linux use pmem2_source_get_fd(3). If the source was created using pmem2_source_from_fd(3) then pmem2_source_get_handle() is also valid function to read handler, because file descriptor is converted to file handle during source creation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_numa_node.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_numa_node.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_numa_node() - returns data source numa node
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_numa_node(const struct pmem2_source *source, int *numa_node); DESCRIPTION The pmem2_source_numa_node() function retrieves the numa node of the given data source. The numa node can be used to, e.g., pin threads to near-memory cores. The numa node is stored in *numa_node. It is the same value that is shown as numa_node in ndctl list -v.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_pread_mcsafe.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_pread_mcsafe.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_pread_mcsafe(), pmem2_source_pwrite_mcsafe() - read source contents or write to the source in a safe manner
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_pread_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); int pmem2_source_pwrite_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); DESCRIPTION The pmem2_source_pread_mcsafe() function reads size bytes from the source src starting at offset offset into the buffer buf. The pmem2_source_pwrite_mcsafe() function writes size bytes from the buffer buf to the source src starting at the offset offset.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_vm_reservation_extend.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_vm_reservation_extend.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_extend(), pmem2_vm_reservation_shrink() - extends and shrinks existing virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_extend(struct pmem2_vm_reservation *rsv, size_t size); int pmem2_vm_reservation_shrink(struct pmem2_vm_reservation *rsv, size_t offset, size_t size); DESCRIPTION The pmem2_vm_reservation_extend() function extends an existing virtual memory reservation by the given size. For the function to succeed the size has to be aligned to an appropriate allocation granularity.
If the pmem2_vm_reservation_extend() succeeds in extending a reservation, it provides placeholder virtual memory range that starts from an address at the end of the old reservation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_vm_reservation_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_vm_reservation_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_address() - reads address of the virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_vm_reservation_get_address(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_address() function reads address of the created virtual memory reservation. The rsv parameter points to the structure describing the reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_address() function returns a pointer to the virtual memory reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_vm_reservation_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_vm_reservation_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_size() - reads virtual memory reservation size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_vm_reservation_get_size(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_size() function reads size of the created virtual memory reservation. The rsv parameter points to the structure describing virtual memory reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_size() function returns a size of the virtual reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_vm_reservation_map_find.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_vm_reservation_map_find.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_map_find(), pmem2_vm_reservation_map_find_prev(), pmem2_vm_reservation_map_find_next(), pmem2_vm_reservation_map_find_first() and pmem2_vm_reservation_map_find_last() - search for the mapping located at the desirable location
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_map; struct pmem2_vm_reservation; int pmem2_vm_reservation_map_find(struct pmem2_vm_reservation *rsv, size_t reserv_offset, size_t len, struct pmem2_map **map_ptr); int pmem2_vm_reservation_map_find_prev(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **prev_map); int pmem2_vm_reservation_map_find_next(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **next_map); int pmem2_vm_reservation_map_find_first(struct pmem2_vm_reservation *rsv, struct pmem2_map **first_map); int pmem2_vm_reservation_map_find_last(struct pmem2_vm_reservation *rsv, struct pmem2_map **last_map); DESCRIPTION Mappings are inserted to the virtual memory reservation in the order of their virtual address space location.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes an instance of virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv_ptr, void *addr, size_t size); int pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv_ptr); DESCRIPTION The pmem2_vm_reservation_new() function creates a new blank mapping in the virtual address space of the calling process. Reservation serves as a placeholder of a given size on which sources can be mapped.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/libpmem2.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION libpmem2 provides low-level persistent memory (pmem) support for applications using direct access storage (DAX), which is storage that supports load/store access without paging blocks from a block storage device.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_async.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_async.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vdm()(DEPRECATED), pmem2_memcpy_async()(DEPRECATED), pmem2_memmove_async()(DEPRECATED), pmem2_memset_async()(DEPRECATED) - asynchronous data movement operations
NOTICE: Support for async functions is deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release along with the miniasync dependency.
SYNOPSIS #define PMEM2_USE_MINIASYNC 1 #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_future; int pmem2_config_set_vdm(struct pmem2_config *cfg, struct vdm *vdm); struct pmem2_future pmem2_memcpy_async(struct pmem2_map *map, void *pmemdest, const void *src, size_t len, unsigned flags); struct pmem2_future pmem2_memmove_async(struct pmem2_map *map, void *pmemdest, const void *src, size_t len, unsigned flags) struct pmem2_future pmem2_memset_async(struct pmem2_map *map, void *pmemstr, int c, size_t n, unsigned flags) { DESCRIPTION To use those functions, you must have libminiasync installed.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( struct pmem2_badblock_context **bbctx, const struct pmem2_source *src); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration structure for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map_new() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for most parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *config, struct pmem2_vm_reservation *rsv, size_t rsv_offset); DESCRIPTION The pmem2_config_set_vm_reservation() function sets the virtual memory reservation and an offset to be used during a mapping. rsv should be already initialized. Please see pmem2_vm_reservation_new(3) for details. rsv_offset marks the offset in the reservation for the mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_deep_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsg() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsg(void); DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsg(). The error message buffer is thread-local; errors encountered in one thread do not affect its value in other threads. The buffer is never cleared by any library function; its content is significant only when the return value of the immediately preceding call to a libpmem2(7) function indicated an error.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_get_drain_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it. While it is not strictly true, draining can be thought of as waiting for previous flushes to complete.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_get_flush_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns. To get this guarantee, application should either use the persist operation (see pmem2_get_persist_fn(3)) or follow pmem2_flush_fn by a drain operation (see pmem2_get_drain_fn(3)).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_get_memmove_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_get_persist_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.
There are no alignment restrictions on the range described by ptr and size, but pmem2_persist_fn may expand the range as necessary to meet platform alignment requirements.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_delete.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_delete() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_delete(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map_delete() function deletes the mapping described by the struct pmem2_map object.
If pmem2_map_delete() succeeds in deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_from_existing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_from_existing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_from_existing() - creates a pmem2_map object from an existing mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_from_existing(struct pmem2_map **map, const struct pmem2_source *src, void *addr, size_t len, enum pmem2_granularity gran); DESCRIPTION The pmem2_map_from_existing() returns a new struct pmem2_map* for mapping provided by the user. This function allows usage of libpmem2(7) API without pmem2_map_new(3) for mapping file. Mapping is defined by addr and len. You have to specify underlying file as a src, and define granularity of this mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_map_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_new() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map_new(struct pmem2_map **map_ptr, const struct pmem2_config *config, const struct pmem2_source *source); DESCRIPTION The pmem2_map_new() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
Optionally, the mapping can be created at the offset of the virtual memory reservation set in the configuration config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perror() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perror(const char *format, ...); DESCRIPTION The pmem2_perror() function produces a message on standard error stream describing the last error encountered during library call.
pmem2_perror() takes a variable number of arguments. First, the argument string format is printed - similarly to the printf(3), followed by a colon and a blank. Then an error message retrieved from the pmem2_errormsg(), and a new-line.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map_new(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_get_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_get_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_fd.3 &amp;ndash; man page for pmem2_source_get_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_fd() - reads file descriptor of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_fd(const struct pmem2_source *src, int *fd); DESCRIPTION The pmem2_source_get_fd() function reads the file descriptor of struct pmem2_source* object describing the data source and returns it by fd parameter.
This function is Linux only, on Windows use pmem2_source_get_handle(3).
RETURN VALUE The pmem2_source_get_fd() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_get_handle.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_get_handle.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_handsle.3 &amp;ndash; man page for pmem2_source_get_handle
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_handle() - reads file handler of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_handle(const struct pmem2_source *src, HANDLE *h); DESCRIPTION The pmem2_source_get_handle() function reads the file handler of struct pmem2_source* object describing the data source and returns it by h parameter.
This function is Windows only, on Linux use pmem2_source_get_fd(3). If the source was created using pmem2_source_from_fd(3) then pmem2_source_get_handle() is also valid function to read handler, because file descriptor is converted to file handle during source creation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_numa_node.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_numa_node.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_numa_node() - returns data source numa node
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_numa_node(const struct pmem2_source *source, int *numa_node); DESCRIPTION The pmem2_source_numa_node() function retrieves the numa node of the given data source. The numa node can be used to, e.g., pin threads to near-memory cores. The numa node is stored in *numa_node. It is the same value that is shown as numa_node in ndctl list -v.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_pread_mcsafe.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_pread_mcsafe.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_pread_mcsafe(), pmem2_source_pwrite_mcsafe() - read source contents or write to the source in a safe manner
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_pread_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); int pmem2_source_pwrite_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); DESCRIPTION The pmem2_source_pread_mcsafe() function reads size bytes from the source src starting at offset offset into the buffer buf. The pmem2_source_pwrite_mcsafe() function writes size bytes from the buffer buf to the source src starting at the offset offset.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_vm_reservation_extend.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_vm_reservation_extend.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_extend(), pmem2_vm_reservation_shrink() - extends and shrinks existing virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_extend(struct pmem2_vm_reservation *rsv, size_t size); int pmem2_vm_reservation_shrink(struct pmem2_vm_reservation *rsv, size_t offset, size_t size); DESCRIPTION The pmem2_vm_reservation_extend() function extends an existing virtual memory reservation by the given size. For the function to succeed the size has to be aligned to an appropriate allocation granularity.
If the pmem2_vm_reservation_extend() succeeds in extending a reservation, it provides placeholder virtual memory range that starts from an address at the end of the old reservation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_vm_reservation_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_vm_reservation_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_address() - reads address of the virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_vm_reservation_get_address(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_address() function reads address of the created virtual memory reservation. The rsv parameter points to the structure describing the reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_address() function returns a pointer to the virtual memory reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_vm_reservation_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_vm_reservation_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_size() - reads virtual memory reservation size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_vm_reservation_get_size(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_size() function reads size of the created virtual memory reservation. The rsv parameter points to the structure describing virtual memory reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_size() function returns a size of the virtual reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_vm_reservation_map_find.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_vm_reservation_map_find.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_map_find(), pmem2_vm_reservation_map_find_prev(), pmem2_vm_reservation_map_find_next(), pmem2_vm_reservation_map_find_first() and pmem2_vm_reservation_map_find_last() - search for the mapping located at the desirable location
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_map; struct pmem2_vm_reservation; int pmem2_vm_reservation_map_find(struct pmem2_vm_reservation *rsv, size_t reserv_offset, size_t len, struct pmem2_map **map_ptr); int pmem2_vm_reservation_map_find_prev(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **prev_map); int pmem2_vm_reservation_map_find_next(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **next_map); int pmem2_vm_reservation_map_find_first(struct pmem2_vm_reservation *rsv, struct pmem2_map **first_map); int pmem2_vm_reservation_map_find_last(struct pmem2_vm_reservation *rsv, struct pmem2_map **last_map); DESCRIPTION Mappings are inserted to the virtual memory reservation in the order of their virtual address space location.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes an instance of virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv_ptr, void *addr, size_t size); int pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv_ptr); DESCRIPTION The pmem2_vm_reservation_new() function creates a new blank mapping in the virtual address space of the calling process. Reservation serves as a placeholder of a given size on which sources can be mapped.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem2/libpmem2.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem2/pmem2_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem2/pmem2_config.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem2/pmem2_errormsg.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem2/pmem2_mapping.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmem2/pmem2_mapping.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/libpmem2.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library (EXPERIMENTAL)
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION GRANULARITY The libpmem2 library introduces the concept of granularity through which you may easily distinguish between different types of reaching power-fail protected domain by data. Data can reach this domain in different ways depending on the platform capabilities.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the a persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( const struct pmem2_source *src, struct pmem2_badblock_context **bbctx); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_clear_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_clear_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_clear_address() - reset addr and request_type to the default values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; void pmem2_config_clear_address(struct pmem2_config *cfg); DESCRIPTION The pmem2_config_clear_address() function resets *addr and \request_type to the default values. The function is used to revert changes set by pmem2_config_set_address(3). If the *addr is default, the starting mapping address will be chosen by the operating system, for more information please see pmem2_map(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for all possible parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_address() - set requested address in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_address_request_type { PMEM2_ADDRESS_FIXED_REPLACE, PMEM2_ADDRESS_FIXED_NOREPLACE, }; int pmem2_config_set_address(struct pmem2_config *cfg, void *addr, enum pmem2_address_request_type request_type); DESCRIPTION The pmem2_config_set_address() function sets the starting address *addr which will be used for memory mapping. If the *addr is not specified in the config, the starting address will be chosen by the operating system.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *cfg, struct pmem2_vm_reservation *rsv, size_t offset); DESCRIPTION The pmem2_config_set_vm_reservation() function is not supported yet.
RETURN VALUE pmem2_config_set_vm_reservation() returns PMEM2_E_NOSUPP .
SEE ALSO libpmem2(7), pmem2_vm_reservation_new(3) and http://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_deep_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsg() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsg(void); DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsg(). The error message buffer is thread-local; errors encountered in one thread do not affect its value in other threads. The buffer is never cleared by any library function; its content is significant only when the return value of the immediately preceding call to a libpmem2(7) function indicated an error.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_get_drain_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_get_flush_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_get_memmove_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_get_persist_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map(const struct pmem2_config *config, const struct pmem2_source *source, struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
For a mapping to succeed, the config structure must have the granularity parameter set to the appropriate level.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perror() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perror(const char *format, ...); DESCRIPTION The pmem2_perror() function produces a message on standard error stream describing the last error encountered during library call.
pmem2_perror() takes a variable number of arguments. First, the argument string format is printed - similarly to the printf(3), followed by a colon and a blank. Then an error message retrieved from the pmem2_errormsg(), and a new-line.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified, and one of the following errors is returned:</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_unmap.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_unmap.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_unmap() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_unmap(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_unmap() function deletes the mapping described by the struct pmem2_map object.
If pmem2_unmap() succeeds, deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value will be returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes virtual memory reservation that is made basing on the pmem2_vm_reservation structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; void pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv, size_t size, void *address); void pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv); DESCRIPTION pmem2_vm_reservation_new() and pmem2_vm_reservation_delete() functions are not supported yet.
RETURN VALUE pmem2_vm_reservation_new() returns PMEM2_E_NOSUPP . pmem2_vm_reservation_delete() returns PMEM2_E_NOSUPP .
SEE ALSO libpmem2(7), pmem2_config_set_vm_reservation(3) and http://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/libpmem2.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION libpmem2 provides low-level persistent memory (pmem) support for applications using direct access storage (DAX), which is storage that supports load/store access without paging blocks from a block storage device.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_async.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_async.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vdm()(DEPRECATED), pmem2_memcpy_async()(DEPRECATED), pmem2_memmove_async()(DEPRECATED), pmem2_memset_async()(DEPRECATED) - asynchronous data movement operations
NOTICE: Support for async functions is deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.0.0 release along with the miniasync dependency.
SYNOPSIS #define PMEM2_USE_MINIASYNC 1 #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_future; int pmem2_config_set_vdm(struct pmem2_config *cfg, struct vdm *vdm); struct pmem2_future pmem2_memcpy_async(struct pmem2_map *map, void *pmemdest, const void *src, size_t len, unsigned flags); struct pmem2_future pmem2_memmove_async(struct pmem2_map *map, void *pmemdest, const void *src, size_t len, unsigned flags) struct pmem2_future pmem2_memset_async(struct pmem2_map *map, void *pmemstr, int c, size_t n, unsigned flags) { DESCRIPTION To use those functions, you must have libminiasync installed.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( struct pmem2_badblock_context **bbctx, const struct pmem2_source *src); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration structure for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map_new() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for most parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *config, struct pmem2_vm_reservation *rsv, size_t rsv_offset); DESCRIPTION The pmem2_config_set_vm_reservation() function sets the virtual memory reservation and an offset to be used during a mapping. rsv should be already initialized. Please see pmem2_vm_reservation_new(3) for details. rsv_offset marks the offset in the reservation for the mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_deep_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsgU()/pmem2_errormsgW() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsgU(void); const wchar_t *pmem2_errormsgW(void); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsgU()/pmem2_errormsgW().</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_get_drain_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it. While it is not strictly true, draining can be thought of as waiting for previous flushes to complete.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_get_flush_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns. To get this guarantee, application should either use the persist operation (see pmem2_get_persist_fn(3)) or follow pmem2_flush_fn by a drain operation (see pmem2_get_drain_fn(3)).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_get_memmove_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_get_persist_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.
There are no alignment restrictions on the range described by ptr and size, but pmem2_persist_fn may expand the range as necessary to meet platform alignment requirements.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_delete.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_delete() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_delete(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map_delete() function deletes the mapping described by the struct pmem2_map object.
If pmem2_map_delete() succeeds in deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_from_existing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_from_existing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_from_existing() - creates a pmem2_map object from an existing mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_from_existing(struct pmem2_map **map, const struct pmem2_source *src, void *addr, size_t len, enum pmem2_granularity gran); DESCRIPTION The pmem2_map_from_existing() returns a new struct pmem2_map* for mapping provided by the user. This function allows usage of libpmem2(7) API without pmem2_map_new(3) for mapping file. Mapping is defined by addr and len. You have to specify underlying file as a src, and define granularity of this mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_map_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_new() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map_new(struct pmem2_map **map_ptr, const struct pmem2_config *config, const struct pmem2_source *source); DESCRIPTION The pmem2_map_new() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
Optionally, the mapping can be created at the offset of the virtual memory reservation set in the configuration config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perrorU()/pmem2_perrorW() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perrorU(const char *format, ...); void pmem2_perrorW(const wchar_t *format, ...); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmem2_perrorU()/pmem2_perrorW() function produces a message on standard error stream describing the last error encountered during library call.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map_new(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_get_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_get_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_fd.3 &amp;ndash; man page for pmem2_source_get_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_fd() - reads file descriptor of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_fd(const struct pmem2_source *src, int *fd); DESCRIPTION The pmem2_source_get_fd() function reads the file descriptor of struct pmem2_source* object describing the data source and returns it by fd parameter.
This function is Linux only, on Windows use pmem2_source_get_handle(3).
RETURN VALUE The pmem2_source_get_fd() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_get_handle.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_get_handle.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_handsle.3 &amp;ndash; man page for pmem2_source_get_handle
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_handle() - reads file handler of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_handle(const struct pmem2_source *src, HANDLE *h); DESCRIPTION The pmem2_source_get_handle() function reads the file handler of struct pmem2_source* object describing the data source and returns it by h parameter.
This function is Windows only, on Linux use pmem2_source_get_fd(3). If the source was created using pmem2_source_from_fd(3) then pmem2_source_get_handle() is also valid function to read handler, because file descriptor is converted to file handle during source creation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_numa_node.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_numa_node.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_numa_node() - returns data source numa node
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_numa_node(const struct pmem2_source *source, int *numa_node); DESCRIPTION The pmem2_source_numa_node() function retrieves the numa node of the given data source. The numa node can be used to, e.g., pin threads to near-memory cores. The numa node is stored in *numa_node. It is the same value that is shown as numa_node in ndctl list -v.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_pread_mcsafe.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_pread_mcsafe.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_pread_mcsafe(), pmem2_source_pwrite_mcsafe() - read source contents or write to the source in a safe manner
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_pread_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); int pmem2_source_pwrite_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); DESCRIPTION The pmem2_source_pread_mcsafe() function reads size bytes from the source src starting at offset offset into the buffer buf. The pmem2_source_pwrite_mcsafe() function writes size bytes from the buffer buf to the source src starting at the offset offset.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_vm_reservation_extend.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_vm_reservation_extend.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_extend(), pmem2_vm_reservation_shrink() - extends and shrinks existing virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_extend(struct pmem2_vm_reservation *rsv, size_t size); int pmem2_vm_reservation_shrink(struct pmem2_vm_reservation *rsv, size_t offset, size_t size); DESCRIPTION The pmem2_vm_reservation_extend() function extends an existing virtual memory reservation by the given size. For the function to succeed the size has to be aligned to an appropriate allocation granularity.
If the pmem2_vm_reservation_extend() succeeds in extending a reservation, it provides placeholder virtual memory range that starts from an address at the end of the old reservation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_vm_reservation_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_vm_reservation_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_address() - reads address of the virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_vm_reservation_get_address(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_address() function reads address of the created virtual memory reservation. The rsv parameter points to the structure describing the reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_address() function returns a pointer to the virtual memory reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_vm_reservation_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_vm_reservation_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_size() - reads virtual memory reservation size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_vm_reservation_get_size(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_size() function reads size of the created virtual memory reservation. The rsv parameter points to the structure describing virtual memory reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_size() function returns a size of the virtual reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_vm_reservation_map_find.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_vm_reservation_map_find.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_map_find(), pmem2_vm_reservation_map_find_prev(), pmem2_vm_reservation_map_find_next(), pmem2_vm_reservation_map_find_first() and pmem2_vm_reservation_map_find_last() - search for the mapping located at the desirable location
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_map; struct pmem2_vm_reservation; int pmem2_vm_reservation_map_find(struct pmem2_vm_reservation *rsv, size_t reserv_offset, size_t len, struct pmem2_map **map_ptr); int pmem2_vm_reservation_map_find_prev(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **prev_map); int pmem2_vm_reservation_map_find_next(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **next_map); int pmem2_vm_reservation_map_find_first(struct pmem2_vm_reservation *rsv, struct pmem2_map **first_map); int pmem2_vm_reservation_map_find_last(struct pmem2_vm_reservation *rsv, struct pmem2_map **last_map); DESCRIPTION Mappings are inserted to the virtual memory reservation in the order of their virtual address space location.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes an instance of virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv_ptr, void *addr, size_t size); int pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv_ptr); DESCRIPTION The pmem2_vm_reservation_new() function creates a new blank mapping in the virtual address space of the calling process. Reservation serves as a placeholder of a given size on which sources can be mapped.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/libpmem2.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2021, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION libpmem2 provides low-level persistent memory (pmem) support for applications using direct access storage (DAX), which is storage that supports load/store access without paging blocks from a block storage device. Some types of non-volatile memory DIMMs (NVDIMMs) provide this type of byte addressable access to storage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the a persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( struct pmem2_badblock_context **bbctx, const struct pmem2_source *src); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration structure for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map_new() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for most parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *config, struct pmem2_vm_reservation *rsv, size_t rsv_offset); DESCRIPTION The pmem2_config_set_vm_reservation() function sets the virtual memory reservation and an offset to be used during a mapping. rsv should be already initialized. Please see pmem2_vm_reservation_new(3) for details. rsv_offset marks the offset in the reservation for the mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_deep_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsgU()/pmem2_errormsgW() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsgU(void); const wchar_t *pmem2_errormsgW(void); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsgU()/pmem2_errormsgW().</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_get_drain_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_get_flush_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_get_memmove_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_get_persist_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_delete.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_delete() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_delete(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map_delete() function deletes the mapping described by the struct pmem2_map object.
If pmem2_map_delete() succeeds in deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_from_existing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_from_existing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_from_existing() - creates a pmem2_map object from an existing mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_from_existing(struct pmem2_map **map, const struct pmem2_source *src, void *addr, size_t len, enum pmem2_granularity gran); DESCRIPTION The pmem2_map_from_existing() returns a new struct pmem2_map* for mapping provided by the user. This function allows usage of libpmem2(7) API without pmem2_map_new(3) for mapping file. Mapping is defined by addr and len. You have to specify underlying file as a src, and define granularity of this mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_map_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_new() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map_new(struct pmem2_map **map_ptr, const struct pmem2_config *config, const struct pmem2_source *source); DESCRIPTION The pmem2_map_new() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
Optionally, the mapping can be created at the offset of the virtual memory reservation set in the configuration config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perrorU()/pmem2_perrorW() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perrorU(const char *format, ...); void pmem2_perrorW(const wchar_t *format, ...); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmem2_perrorU()/pmem2_perrorW() function produces a message on standard error stream describing the last error encountered during library call.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map_new(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_get_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_get_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_fd.3 &amp;ndash; man page for pmem2_source_get_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_fd() - reads file descriptor of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_fd(const struct pmem2_source *src, int *fd); DESCRIPTION The pmem2_source_get_fd() function reads the file descriptor of struct pmem2_source* object describing the data source and returns it by fd parameter.
This function is Linux only, on Windows use pmem2_source_get_handle(3).
RETURN VALUE The pmem2_source_get_fd() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_get_handle.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_get_handle.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_handsle.3 &amp;ndash; man page for pmem2_source_get_handle
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_handle() - reads file handler of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_handle(const struct pmem2_source *src, HANDLE *h); DESCRIPTION The pmem2_source_get_handle() function reads the file handler of struct pmem2_source* object describing the data source and returns it by h parameter.
This function is Windows only, on Linux use pmem2_source_get_fd(3). If the source was created using pmem2_source_from_fd(3) then pmem2_source_get_handle() is also valid function to read handler, because file descriptor is converted to file handle during source creation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_vm_reservation_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_vm_reservation_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_address() - reads address of the virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_vm_reservation_get_address(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_address() function reads address of the created virtual memory reservation. The rsv parameter points to the structure describing the reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_address() function returns a pointer to the virtual memory reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_vm_reservation_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_vm_reservation_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_size() - reads virtual memory reservation size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_vm_reservation_get_size(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_size() function reads size of the created virtual memory reservation. The rsv parameter points to the structure describing virtual memory reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_size() function returns a size of the virtual reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes an instance of virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; void pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv_ptr, void *addr, size_t size); void pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv_ptr); DESCRIPTION The pmem2_vm_reservation_new() function creates a new blank mapping in the virtual address space of the calling process. Reservation serves as a placeholder of a given size on which sources can be mapped.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/libpmem2.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2021, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION libpmem2 provides low-level persistent memory (pmem) support for applications using direct access storage (DAX), which is storage that supports load/store access without paging blocks from a block storage device. Some types of non-volatile memory DIMMs (NVDIMMs) provide this type of byte addressable access to storage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the a persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( struct pmem2_badblock_context **bbctx, const struct pmem2_source *src); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration structure for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map_new() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for most parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *config, struct pmem2_vm_reservation *rsv, size_t rsv_offset); DESCRIPTION The pmem2_config_set_vm_reservation() function sets the virtual memory reservation and an offset to be used during a mapping. rsv should be already initialized. Please see pmem2_vm_reservation_new(3) for details. rsv_offset marks the offset in the reservation for the mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_deep_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsgU()/pmem2_errormsgW() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsgU(void); const wchar_t *pmem2_errormsgW(void); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsgU()/pmem2_errormsgW().</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_get_drain_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_get_flush_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_get_memmove_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_get_persist_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_delete.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_delete() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_delete(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map_delete() function deletes the mapping described by the struct pmem2_map object.
If pmem2_map_delete() succeeds in deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_from_existing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_from_existing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_from_existing() - creates a pmem2_map object from an existing mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_from_existing(struct pmem2_map **map, const struct pmem2_source *src, void *addr, size_t len, enum pmem2_granularity gran); DESCRIPTION The pmem2_map_from_existing() returns a new struct pmem2_map* for mapping provided by the user. This function allows usage of libpmem2(7) API without pmem2_map_new(3) for mapping file. Mapping is defined by addr and len. You have to specify underlying file as a src, and define granularity of this mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_map_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_new() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map_new(struct pmem2_map **map_ptr, const struct pmem2_config *config, const struct pmem2_source *source); DESCRIPTION The pmem2_map_new() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
Optionally, the mapping can be created at the offset of the virtual memory reservation set in the configuration config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perrorU()/pmem2_perrorW() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perrorU(const char *format, ...); void pmem2_perrorW(const wchar_t *format, ...); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmem2_perrorU()/pmem2_perrorW() function produces a message on standard error stream describing the last error encountered during library call.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map_new(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_get_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_get_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_fd.3 &amp;ndash; man page for pmem2_source_get_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_fd() - reads file descriptor of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_fd(const struct pmem2_source *src, int *fd); DESCRIPTION The pmem2_source_get_fd() function reads the file descriptor of struct pmem2_source* object describing the data source and returns it by fd parameter.
This function is Linux only, on Windows use pmem2_source_get_handle(3).
RETURN VALUE The pmem2_source_get_fd() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_get_handle.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_get_handle.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_handsle.3 &amp;ndash; man page for pmem2_source_get_handle
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_handle() - reads file handler of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_handle(const struct pmem2_source *src, HANDLE *h); DESCRIPTION The pmem2_source_get_handle() function reads the file handler of struct pmem2_source* object describing the data source and returns it by h parameter.
This function is Windows only, on Linux use pmem2_source_get_fd(3). If the source was created using pmem2_source_from_fd(3) then pmem2_source_get_handle() is also valid function to read handler, because file descriptor is converted to file handle during source creation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_numa_node.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_numa_node.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_numa_node() - returns data source numa node
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_numa_node(const struct pmem2_source *source, int *numa_node); DESCRIPTION The pmem2_source_numa_node() function retrieves the numa node of the given data source. The numa node can be used to, e.g., pin threads to near-memory cores. The numa node is stored in *numa_node. It is the same value that is shown as numa_node in ndctl list -v.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_vm_reservation_extend.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_vm_reservation_extend.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_extend(), pmem2_vm_reservation_shrink() - extends and shrinks existing virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_extend(struct pmem2_vm_reservation *rsv, size_t size); int pmem2_vm_reservation_shrink(struct pmem2_vm_reservation *rsv, size_t offset, size_t size); DESCRIPTION The pmem2_vm_reservation_extend() function extends an existing virtual memory reservation by the given size. For the function to succeed the size has to be aligned to an appropriate allocation granularity.
If the pmem2_vm_reservation_extend() succeeds in extending a reservation, it provides placeholder virtual memory range that starts from an address at the end of the old reservation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_vm_reservation_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_vm_reservation_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_address() - reads address of the virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_vm_reservation_get_address(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_address() function reads address of the created virtual memory reservation. The rsv parameter points to the structure describing the reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_address() function returns a pointer to the virtual memory reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_vm_reservation_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_vm_reservation_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_size() - reads virtual memory reservation size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_vm_reservation_get_size(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_size() function reads size of the created virtual memory reservation. The rsv parameter points to the structure describing virtual memory reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_size() function returns a size of the virtual reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_vm_reservation_map_find.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_vm_reservation_map_find.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_map_find(), pmem2_vm_reservation_map_find_prev(), pmem2_vm_reservation_map_find_next(), pmem2_vm_reservation_map_find_first() and pmem2_vm_reservation_map_find_last() - search for the mapping located at the desirable location
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_map; struct pmem2_vm_reservation; int pmem2_vm_reservation_map_find(struct pmem2_vm_reservation *rsv, size_t reserv_offset, size_t len, struct pmem2_map **map_ptr); int pmem2_vm_reservation_map_find_prev(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **prev_map); int pmem2_vm_reservation_map_find_next(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **next_map); int pmem2_vm_reservation_map_find_first(struct pmem2_vm_reservation *rsv, struct pmem2_map **first_map); int pmem2_vm_reservation_map_find_last(struct pmem2_vm_reservation *rsv, struct pmem2_map **last_map); DESCRIPTION Mappings are inserted to the virtual memory reservation in the order of their virtual address space location.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes an instance of virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv_ptr, void *addr, size_t size); int pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv_ptr); DESCRIPTION The pmem2_vm_reservation_new() function creates a new blank mapping in the virtual address space of the calling process. Reservation serves as a placeholder of a given size on which sources can be mapped.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/libpmem2.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION libpmem2 provides low-level persistent memory (pmem) support for applications using direct access storage (DAX), which is storage that supports load/store access without paging blocks from a block storage device. Some types of non-volatile memory DIMMs (NVDIMMs) provide this type of byte addressable access to storage. A persistent memory aware file system is typically used to expose the direct access to applications.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_async.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_async.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2022, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vdm(), pmem2_memcpy_async(), pmem2_memmove_async(), pmem2_memset_async() - asynchronous data movement operations
SYNOPSIS #define PMEM2_USE_MINIASYNC 1 #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_future; int pmem2_config_set_vdm(struct pmem2_config *cfg, struct vdm *vdm); struct pmem2_future pmem2_memcpy_async(struct pmem2_map *map, void *pmemdest, const void *src, size_t len, unsigned flags); struct pmem2_future pmem2_memmove_async(struct pmem2_map *map, void *pmemdest, const void *src, size_t len, unsigned flags) struct pmem2_future pmem2_memset_async(struct pmem2_map *map, void *pmemstr, int c, size_t n, unsigned flags) { DESCRIPTION To use those functions, you must have libminiasync installed.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( struct pmem2_badblock_context **bbctx, const struct pmem2_source *src); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration structure for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map_new() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for most parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *config, struct pmem2_vm_reservation *rsv, size_t rsv_offset); DESCRIPTION The pmem2_config_set_vm_reservation() function sets the virtual memory reservation and an offset to be used during a mapping. rsv should be already initialized. Please see pmem2_vm_reservation_new(3) for details. rsv_offset marks the offset in the reservation for the mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_deep_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsgU()/pmem2_errormsgW() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsgU(void); const wchar_t *pmem2_errormsgW(void); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsgU()/pmem2_errormsgW().</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_get_drain_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_get_flush_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_get_memmove_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_get_persist_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_delete.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_delete() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_delete(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map_delete() function deletes the mapping described by the struct pmem2_map object.
If pmem2_map_delete() succeeds in deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_from_existing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_from_existing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_from_existing() - creates a pmem2_map object from an existing mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_from_existing(struct pmem2_map **map, const struct pmem2_source *src, void *addr, size_t len, enum pmem2_granularity gran); DESCRIPTION The pmem2_map_from_existing() returns a new struct pmem2_map* for mapping provided by the user. This function allows usage of libpmem2(7) API without pmem2_map_new(3) for mapping file. Mapping is defined by addr and len. You have to specify underlying file as a src, and define granularity of this mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_map_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_new() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map_new(struct pmem2_map **map_ptr, const struct pmem2_config *config, const struct pmem2_source *source); DESCRIPTION The pmem2_map_new() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
Optionally, the mapping can be created at the offset of the virtual memory reservation set in the configuration config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perrorU()/pmem2_perrorW() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perrorU(const char *format, ...); void pmem2_perrorW(const wchar_t *format, ...); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmem2_perrorU()/pmem2_perrorW() function produces a message on standard error stream describing the last error encountered during library call.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map_new(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_get_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_get_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_fd.3 &amp;ndash; man page for pmem2_source_get_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_fd() - reads file descriptor of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_fd(const struct pmem2_source *src, int *fd); DESCRIPTION The pmem2_source_get_fd() function reads the file descriptor of struct pmem2_source* object describing the data source and returns it by fd parameter.
This function is Linux only, on Windows use pmem2_source_get_handle(3).
RETURN VALUE The pmem2_source_get_fd() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_get_handle.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_get_handle.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_handsle.3 &amp;ndash; man page for pmem2_source_get_handle
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_handle() - reads file handler of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_handle(const struct pmem2_source *src, HANDLE *h); DESCRIPTION The pmem2_source_get_handle() function reads the file handler of struct pmem2_source* object describing the data source and returns it by h parameter.
This function is Windows only, on Linux use pmem2_source_get_fd(3). If the source was created using pmem2_source_from_fd(3) then pmem2_source_get_handle() is also valid function to read handler, because file descriptor is converted to file handle during source creation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_numa_node.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_numa_node.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_numa_node() - returns data source numa node
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_numa_node(const struct pmem2_source *source, int *numa_node); DESCRIPTION The pmem2_source_numa_node() function retrieves the numa node of the given data source. The numa node can be used to, e.g., pin threads to near-memory cores. The numa node is stored in *numa_node. It is the same value that is shown as numa_node in ndctl list -v.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_pread_mcsafe.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_pread_mcsafe.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_pread_mcsafe(), pmem2_source_pwrite_mcsafe() - read source contents or write to the source in a safe manner
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_pread_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); int pmem2_source_pwrite_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); DESCRIPTION The pmem2_source_pread_mcsafe() function reads size bytes from the source src starting at offset offset into the buffer buf. The pmem2_source_pwrite_mcsafe() function writes size bytes from the buffer buf to the source src starting at the offset offset.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_vm_reservation_extend.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_vm_reservation_extend.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_extend(), pmem2_vm_reservation_shrink() - extends and shrinks existing virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_extend(struct pmem2_vm_reservation *rsv, size_t size); int pmem2_vm_reservation_shrink(struct pmem2_vm_reservation *rsv, size_t offset, size_t size); DESCRIPTION The pmem2_vm_reservation_extend() function extends an existing virtual memory reservation by the given size. For the function to succeed the size has to be aligned to an appropriate allocation granularity.
If the pmem2_vm_reservation_extend() succeeds in extending a reservation, it provides placeholder virtual memory range that starts from an address at the end of the old reservation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_vm_reservation_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_vm_reservation_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_address() - reads address of the virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_vm_reservation_get_address(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_address() function reads address of the created virtual memory reservation. The rsv parameter points to the structure describing the reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_address() function returns a pointer to the virtual memory reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_vm_reservation_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_vm_reservation_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_size() - reads virtual memory reservation size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_vm_reservation_get_size(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_size() function reads size of the created virtual memory reservation. The rsv parameter points to the structure describing virtual memory reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_size() function returns a size of the virtual reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_vm_reservation_map_find.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_vm_reservation_map_find.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_map_find(), pmem2_vm_reservation_map_find_prev(), pmem2_vm_reservation_map_find_next(), pmem2_vm_reservation_map_find_first() and pmem2_vm_reservation_map_find_last() - search for the mapping located at the desirable location
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_map; struct pmem2_vm_reservation; int pmem2_vm_reservation_map_find(struct pmem2_vm_reservation *rsv, size_t reserv_offset, size_t len, struct pmem2_map **map_ptr); int pmem2_vm_reservation_map_find_prev(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **prev_map); int pmem2_vm_reservation_map_find_next(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **next_map); int pmem2_vm_reservation_map_find_first(struct pmem2_vm_reservation *rsv, struct pmem2_map **first_map); int pmem2_vm_reservation_map_find_last(struct pmem2_vm_reservation *rsv, struct pmem2_map **last_map); DESCRIPTION Mappings are inserted to the virtual memory reservation in the order of their virtual address space location.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes an instance of virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv_ptr, void *addr, size_t size); int pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv_ptr); DESCRIPTION The pmem2_vm_reservation_new() function creates a new blank mapping in the virtual address space of the calling process. Reservation serves as a placeholder of a given size on which sources can be mapped.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/libpmem2.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION libpmem2 provides low-level persistent memory (pmem) support for applications using direct access storage (DAX), which is storage that supports load/store access without paging blocks from a block storage device.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_async.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_async.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vdm()(DEPRECATED), pmem2_memcpy_async()(DEPRECATED), pmem2_memmove_async()(DEPRECATED), pmem2_memset_async()(DEPRECATED) - asynchronous data movement operations
NOTICE: Support for async functions is deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release along with the miniasync dependency.
SYNOPSIS #define PMEM2_USE_MINIASYNC 1 #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_future; int pmem2_config_set_vdm(struct pmem2_config *cfg, struct vdm *vdm); struct pmem2_future pmem2_memcpy_async(struct pmem2_map *map, void *pmemdest, const void *src, size_t len, unsigned flags); struct pmem2_future pmem2_memmove_async(struct pmem2_map *map, void *pmemdest, const void *src, size_t len, unsigned flags) struct pmem2_future pmem2_memset_async(struct pmem2_map *map, void *pmemstr, int c, size_t n, unsigned flags) { DESCRIPTION To use those functions, you must have libminiasync installed.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( struct pmem2_badblock_context **bbctx, const struct pmem2_source *src); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration structure for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map_new() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for most parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *config, struct pmem2_vm_reservation *rsv, size_t rsv_offset); DESCRIPTION The pmem2_config_set_vm_reservation() function sets the virtual memory reservation and an offset to be used during a mapping. rsv should be already initialized. Please see pmem2_vm_reservation_new(3) for details. rsv_offset marks the offset in the reservation for the mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_deep_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsgU()/pmem2_errormsgW() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsgU(void); const wchar_t *pmem2_errormsgW(void); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsgU()/pmem2_errormsgW().</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_get_drain_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it. While it is not strictly true, draining can be thought of as waiting for previous flushes to complete.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_get_flush_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns. To get this guarantee, application should either use the persist operation (see pmem2_get_persist_fn(3)) or follow pmem2_flush_fn by a drain operation (see pmem2_get_drain_fn(3)).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_get_memmove_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_get_persist_fn.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.
There are no alignment restrictions on the range described by ptr and size, but pmem2_persist_fn may expand the range as necessary to meet platform alignment requirements.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_delete.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_delete() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_delete(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map_delete() function deletes the mapping described by the struct pmem2_map object.
If pmem2_map_delete() succeeds in deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_from_existing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_from_existing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_from_existing() - creates a pmem2_map object from an existing mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_map_from_existing(struct pmem2_map **map, const struct pmem2_source *src, void *addr, size_t len, enum pmem2_granularity gran); DESCRIPTION The pmem2_map_from_existing() returns a new struct pmem2_map* for mapping provided by the user. This function allows usage of libpmem2(7) API without pmem2_map_new(3) for mapping file. Mapping is defined by addr and len. You have to specify underlying file as a src, and define granularity of this mapping.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map_new(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_map_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_map_new() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map_new(struct pmem2_map **map_ptr, const struct pmem2_config *config, const struct pmem2_source *source); DESCRIPTION The pmem2_map_new() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
Optionally, the mapping can be created at the offset of the virtual memory reservation set in the configuration config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perrorU()/pmem2_perrorW() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perrorU(const char *format, ...); void pmem2_perrorW(const wchar_t *format, ...); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmem2_perrorU()/pmem2_perrorW() function produces a message on standard error stream describing the last error encountered during library call.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map_new(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_get_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_get_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_fd.3 &amp;ndash; man page for pmem2_source_get_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_fd() - reads file descriptor of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_fd(const struct pmem2_source *src, int *fd); DESCRIPTION The pmem2_source_get_fd() function reads the file descriptor of struct pmem2_source* object describing the data source and returns it by fd parameter.
This function is Linux only, on Windows use pmem2_source_get_handle(3).
RETURN VALUE The pmem2_source_get_fd() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_get_handle.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_get_handle.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_get_handsle.3 &amp;ndash; man page for pmem2_source_get_handle
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_get_handle() - reads file handler of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_get_handle(const struct pmem2_source *src, HANDLE *h); DESCRIPTION The pmem2_source_get_handle() function reads the file handler of struct pmem2_source* object describing the data source and returns it by h parameter.
This function is Windows only, on Linux use pmem2_source_get_fd(3). If the source was created using pmem2_source_from_fd(3) then pmem2_source_get_handle() is also valid function to read handler, because file descriptor is converted to file handle during source creation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_numa_node.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_numa_node.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_numa_node() - returns data source numa node
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_numa_node(const struct pmem2_source *source, int *numa_node); DESCRIPTION The pmem2_source_numa_node() function retrieves the numa node of the given data source. The numa node can be used to, e.g., pin threads to near-memory cores. The numa node is stored in *numa_node. It is the same value that is shown as numa_node in ndctl list -v.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_pread_mcsafe.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_pread_mcsafe.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_pread_mcsafe(), pmem2_source_pwrite_mcsafe() - read source contents or write to the source in a safe manner
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_pread_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); int pmem2_source_pwrite_mcsafe(struct pmem2_source *src, void *buf, size_t size, size_t offset); DESCRIPTION The pmem2_source_pread_mcsafe() function reads size bytes from the source src starting at offset offset into the buffer buf. The pmem2_source_pwrite_mcsafe() function writes size bytes from the buffer buf to the source src starting at the offset offset.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_vm_reservation_extend.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_vm_reservation_extend.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_extend(), pmem2_vm_reservation_shrink() - extends and shrinks existing virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_extend(struct pmem2_vm_reservation *rsv, size_t size); int pmem2_vm_reservation_shrink(struct pmem2_vm_reservation *rsv, size_t offset, size_t size); DESCRIPTION The pmem2_vm_reservation_extend() function extends an existing virtual memory reservation by the given size. For the function to succeed the size has to be aligned to an appropriate allocation granularity.
If the pmem2_vm_reservation_extend() succeeds in extending a reservation, it provides placeholder virtual memory range that starts from an address at the end of the old reservation.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_vm_reservation_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_vm_reservation_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_address() - reads address of the virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_vm_reservation_get_address(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_address() function reads address of the created virtual memory reservation. The rsv parameter points to the structure describing the reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_address() function returns a pointer to the virtual memory reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_vm_reservation_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_vm_reservation_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_get_size() - reads virtual memory reservation size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_vm_reservation_get_size(struct pmem2_vm_reservation *rsv); DESCRIPTION The pmem2_vm_reservation_get_size() function reads size of the created virtual memory reservation. The rsv parameter points to the structure describing virtual memory reservation created using the pmem2_vm_reservation_new(3) function.
RETURN VALUE The pmem2_vm_reservation_get_size() function returns a size of the virtual reservation area.
SEE ALSO pmem2_vm_reservation_new(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_vm_reservation_map_find.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_vm_reservation_map_find.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_map_find(), pmem2_vm_reservation_map_find_prev(), pmem2_vm_reservation_map_find_next(), pmem2_vm_reservation_map_find_first() and pmem2_vm_reservation_map_find_last() - search for the mapping located at the desirable location
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_map; struct pmem2_vm_reservation; int pmem2_vm_reservation_map_find(struct pmem2_vm_reservation *rsv, size_t reserv_offset, size_t len, struct pmem2_map **map_ptr); int pmem2_vm_reservation_map_find_prev(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **prev_map); int pmem2_vm_reservation_map_find_next(struct pmem2_vm_reservation *rsv, struct pmem2_map *map, struct pmem2_map **next_map); int pmem2_vm_reservation_map_find_first(struct pmem2_vm_reservation *rsv, struct pmem2_map **first_map); int pmem2_vm_reservation_map_find_last(struct pmem2_vm_reservation *rsv, struct pmem2_map **last_map); DESCRIPTION Mappings are inserted to the virtual memory reservation in the order of their virtual address space location.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes an instance of virtual memory reservation
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; int pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv_ptr, void *addr, size_t size); int pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv_ptr); DESCRIPTION The pmem2_vm_reservation_new() function creates a new blank mapping in the virtual address space of the calling process. Reservation serves as a placeholder of a given size on which sources can be mapped.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem2/libpmem2.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem2/pmem2_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem2/pmem2_config.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem2/pmem2_errormsg.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem2/pmem2_mapping.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmem2/pmem2_mapping.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/libpmem2.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/libpmem2.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
GRANULARITY
CAVEATS
ENVIRONMENT
DEBUGGING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmem2 - persistent memory support library (EXPERIMENTAL)
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; cc ... -lpmem2 DESCRIPTION GRANULARITY The libpmem2 library introduces the concept of granularity through which you may easily distinguish between different types of reaching power-fail protected domain by data. Data can reach this domain in different ways depending on the platform capabilities.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/libpmem2_unsafe_shutdown.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/libpmem2_unsafe_shutdown.7/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
DESCRIPTION
UNSAFE SHUTDOWN DETECTION
SEE ALSO
NAME libpmem2_unsafe_shutdown - libpmem2 unsafe shutdown
DESCRIPTION In systems with the persistent memory support, a power-fail protected domain covers a set of resources from which the platform will flush data to the a persistent medium in case of a power-failure. Data stored on the persistent medium is preserved across power cycles.
The hardware guarantees the feature to flush all data stored in the power-fail protected domain to the persistent medium.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_badblock_clear.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_badblock_clear.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_clear() - clear the given bad block
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_clear( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_clear() function clears the given *bb bad block.
It means that the pmem2_badblock_clear() function unmaps bad blocks and maps new, healthy, blocks in place of the bad ones. The new blocks are zeroed. The content of the bad blocks is lost.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_badblock_context_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_badblock_context_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_context_new(), pmem2_badblock_context_delete() - allocate and free a context for pmem2_badblock_next() and pmem2_badblock_clear() operations
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; struct pmem2_badblock_context; int pmem2_badblock_context_new( const struct pmem2_source *src, struct pmem2_badblock_context **bbctx); void pmem2_badblock_context_delete( struct pmem2_badblock_context **bbctx); DESCRIPTION The pmem2_badblock_context_new() function instantiates a new (opaque) bad block context structure, pmem2_badblock_context, which is used to read and clear bad blocks (by pmem2_badblock_next() and pmem2_badblock_clear()). The function returns the bad block context through the pointer in *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_badblock_next.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_badblock_next.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_badblock_next() - read the next bad block for the given bad block context *bbctx.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_badblock; struct pmem2_badblock_context; int pmem2_badblock_next( struct pmem2_badblock_context *bbctx, struct pmem2_badblock *bb); DESCRIPTION The pmem2_badblock_next() function reads the next bad block for the given bad block context *bbctx.
It is not supported on Windows.
RETURN VALUE The pmem2_badblock_next() function returns 0 and stores the next bad block in *bb on success or it returns a negative error code when there are no more bad blocks for the given bad block context *bbctx.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_clear_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_clear_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_clear_address() - reset addr and request_type to the default values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; void pmem2_config_clear_address(struct pmem2_config *cfg); DESCRIPTION The pmem2_config_clear_address() function resets *addr and \request_type to the default values. The function is used to revert changes set by pmem2_config_set_address(3). If the *addr is default, the starting mapping address will be chosen by the operating system, for more information please see pmem2_map(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_new(), pmem2_config_delete() - allocate and free a configuration for a libpmem2 mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_new(struct pmem2_config **cfg); int pmem2_config_delete(struct pmem2_config **cfg); DESCRIPTION The pmem2_config_new() function instantiates a new (opaque) configuration structure, pmem2_config, which is used to define mapping parameters for a pmem2_map() function, and returns it through the pointer in *cfg.
New configuration is always initialized with default values for all possible parameters, which are specified alongside the corresponding setter function.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_address() - set requested address in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_address_request_type { PMEM2_ADDRESS_FIXED_REPLACE, PMEM2_ADDRESS_FIXED_NOREPLACE, }; int pmem2_config_set_address(struct pmem2_config *cfg, void *addr, enum pmem2_address_request_type request_type); DESCRIPTION The pmem2_config_set_address() function sets the starting address *addr which will be used for memory mapping. If the *addr is not specified in the config, the starting address will be chosen by the operating system.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_length() - set length in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_length(struct pmem2_config *config, size_t length); DESCRIPTION The pmem2_config_set_length() function configures the length which will be used for mapping. *config should be already initialized, please see pmem2_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_offset() - set offset in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; int pmem2_config_set_offset(struct pmem2_config *config, size_t offset); DESCRIPTION The pmem2_config_set_offset() function configures the offset which will be used to map the contents from the specified location of the source. *config should be already initialized, please see pmem2_config_new(3) for details. The \offset must be a multiple of the alignment required for the config.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_protection.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_protection.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_protection() - set a protection flags in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; #define PMEM2_PROT_EXEC (1U &amp;lt;&amp;lt; 29) #define PMEM2_PROT_READ (1U &amp;lt;&amp;lt; 30) #define PMEM2_PROT_WRITE (1U &amp;lt;&amp;lt; 31) #define PMEM2_PROT_NONE 0 int pmem2_config_set_protection(struct pmem2_config *cfg, unsigned prot); DESCRIPTION The pmem2_config_set_protection() function sets the protection flags which will be used for memory mapping. The default value in pmem2_config structure is PMEM2_PROT_READ | PMEM2_PROT_WRITE.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_required_store_granularity.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_config_set_required_store_granularity.3 &amp;ndash; man page for pmem2_config_set_required_store_granularity
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_required_store_granularity() - set a granularity in pmem2_config structure.
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; int pmem2_config_set_required_store_granularity(struct pmem2_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmem2_config_set_required_store_granularity() sets a maximum permitted granularity g requested by user in the pmem2_config structure.
Granularity must be one of the following values:
PMEM2_GRANULARITY_BYTE
PMEM2_GRANULARITY_CACHE_LINE
PMEM2_GRANULARITY_PAGE
A description of the granularity concept can be found in libpmem2(7) manpage.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_sharing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_sharing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_sharing() - set sharing in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; enum pmem2_sharing_type { PMEM2_SHARED, PMEM2_PRIVATE, }; int pmem2_config_set_sharing(struct pmem2_config *config, enum pmem2_sharing_type sharing); DESCRIPTION The pmem2_config_set_sharing() function configures the behavior and visibility of writes to the mapping&amp;rsquo;s pages. The possible values are listed below:
PMEM2_SHARED - Writes are made directly to the underlying memory, making them visible to other mappings of the same memory region.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_vm_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_config_set_vm_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_config_set_vm_reservation() - sets the pmem2_vm_reservation structure basing on the values in the pmem2_config structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_vm_reservation; int pmem2_config_set_vm_reservation(struct pmem2_config *cfg, struct pmem2_vm_reservation *rsv, size_t offset); DESCRIPTION The pmem2_config_set_vm_reservation() function is not supported yet.
RETURN VALUE pmem2_config_set_vm_reservation() returns PMEM2_E_NOSUPP .
SEE ALSO libpmem2(7), pmem2_vm_reservation_new(3) and http://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_deep_flush.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_deep_flush() - highly reliable persistent memory synchronization
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_deep_flush(struct pmem2_map *map, void *ptr, size_t size) DESCRIPTION The pmem2_deep_flush() function forces any changes in the range [ptr, ptr+len) from the map to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_errormsgU()/pmem2_errormsgW() - returns last error message
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; const char *pmem2_errormsgU(void); const wchar_t *pmem2_errormsgW(void); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION If an error is detected during the call to a libpmem2(7) function, the application may retrieve an error message describing the reason of the failure from pmem2_errormsgU()/pmem2_errormsgW().</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_get_drain_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_get_drain_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_drain_fn() - get a drain function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_drain_fn)(void); struct pmem2_map; pmem2_drain_fn pmem2_get_drain_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_drain_fn() function returns a pointer to a function responsible for efficiently draining flushes (see pmem2_get_flush_fn(3)) in the range owned by map. Draining, in this context, means making sure that the flushes before this operation won&amp;rsquo;t be reordered after it.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_get_flush_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_get_flush_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_flush_fn() - get a flush function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_flush_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_flush_fn pmem2_get_flush_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_flush_fn() function returns a pointer to a function responsible for efficiently flushing data in the range owned by the map.
Flushing data using pmem2_flush_fn does not guarantee that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_get_memmove_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_get_memmove_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() - get a function that provides optimized copying to persistent memory
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void *(*pmem2_memmove_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memcpy_fn)(void *pmemdest, const void *src, size_t len, unsigned flags); typedef void *(*pmem2_memset_fn)(void *pmemdest, int c, size_t len, unsigned flags); struct pmem2_map; pmem2_memmove_fn pmem2_get_memmove_fn(struct pmem2_map *map); pmem2_memset_fn pmem2_get_memset_fn(struct pmem2_map *map); pmem2_memcpy_fn pmem2_get_memcpy_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_memmove_fn(), pmem2_get_memset_fn(), pmem2_get_memcpy_fn() functions return a pointer to a function responsible for efficient storing and flushing of data for mapping map.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_get_persist_fn.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_get_persist_fn.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_get_persist_fn() - get a persist function
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; typedef void (*pmem2_persist_fn)(const void *ptr, size_t size); struct pmem2_map; pmem2_persist_fn pmem2_get_persist_fn(struct pmem2_map *map); DESCRIPTION The pmem2_get_persist_fn() function returns a pointer to a function responsible for efficiently persisting data in the range owned by the map.
Persisting data using pmem2_persist_fn guarantees that the data is stored durably by the time it returns.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map() - creates a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_config; struct pmem2_source; struct pmem2_map; int pmem2_map(const struct pmem2_config *config, const struct pmem2_source *source, struct pmem2_map **map_ptr); DESCRIPTION The pmem2_map() function creates a new mapping in the virtual address space of the calling process. This function requires a configuration config of the mapping and the data source source.
For a mapping to succeed, the config structure must have the granularity parameter set to the appropriate level.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_map_get_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_map_get_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_address() - reads mapping address
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void *pmem2_map_get_address(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_address() function reads address of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map(3) function.
RETURN VALUE The pmem2_map_get_address() function returns a pointer to the mapped area.
SEE ALSO pmem2_map(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_map_get_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_map_get_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_size() - reads mapping size
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; size_t pmem2_map_get_size(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_size() function reads size of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map(3) function.
RETURN VALUE The pmem2_map_get_size() function returns a size of the mapped area.
SEE ALSO pmem2_map(3), libpmem2(7) and https://pmem.io</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_map_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_map_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_map_get_store_granularity() - reads effective mapping granularity
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; enum pmem2_granularity { PMEM2_GRANULARITY_BYTE, PMEM2_GRANULARITY_CACHE_LINE, PMEM2_GRANULARITY_PAGE, }; enum pmem2_granularity pmem2_map_get_store_granularity(struct pmem2_map *map); DESCRIPTION The pmem2_map_get_store_granularity() function reads granularity of the created mapping. The map parameter points to the structure describing mapping created using the pmem2_map(3) function. Concept of the granularity is described in libpmem2(7).
RETURN VALUE The pmem2_map_get_store_granularity() function returns a granularity of the mapped area.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmem2_perrorU()/pmem2_perrorW() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; void pmem2_perrorU(const char *format, ...); void pmem2_perrorW(const wchar_t *format, ...); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmem2_perrorU()/pmem2_perrorW() function produces a message on standard error stream describing the last error encountered during library call.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_alignment(const struct pmem2_source *source, size_t *alignment); DESCRIPTION The pmem2_source_alignment() function retrieves the alignment of offset and length needed for pmem2_map(3) to succeed. The alignment is stored in *alignment.
RETURN VALUE The pmem2_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified, and one of the following errors is returned:</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_device_id.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_device_id.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_source_device_id() - returns the unique identifier of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_id(const struct pmem2_source *source, char *id, size_t *len); DESCRIPTION The pmem2_source_device_id() function retrieves a unique identifier of all NVDIMMs backing the data source. This function has two operating modes:
if *id is NULL the function calculates a buffer length required for storing the identifier of the *source device and puts this length in *len The more hardware devices back the data source, the longer the length is.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_device_usc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_device_usc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_source_device_usc() - returns the unsafe shutdown counter value of a device
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_device_usc(const struct pmem2_source *source, uint64_t *usc); DESCRIPTION The pmem2_source_device_usc() function retrieves the sum of the unsafe shutdown count(USC) values of all hardware devices backing the data source and stores it in *usc.
Please refer to libpmem2_unsafe_shutdown(7) for detailed description on how to properly consume this information.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_from_anon.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_from_anon.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_anon.3 &amp;ndash; man page for pmem2_source_from_anon
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_anon() - creates data source backed by anonymous memory pages
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_anon(struct pmem2_source **src, size_t size); DESCRIPTION The pmem2_source_from_anon() function instantiates a new struct pmem2_source object describing an anonymous data source. Mappings created using this function are not backed by any file and are zero-initialized.
The size argument for the function defines the length in bytes of the anonymous source, as returned by pmem2_source_size(3).</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_from_fd.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_from_fd.3/</guid><description>comment: &amp;lt;&amp;gt; (pmem2_source_from_fd.3 &amp;ndash; man page for pmem2_source_from_fd
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
CAVEATS
SEE ALSO
NAME pmem2_source_from_fd(), pmem2_source_from_handle(), pmem2_source_delete() - creates or deletes an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_source_from_fd(struct pmem2_source *src, int fd); int pmem2_source_from_handle(struct pmem2_source *src, HANDLE handle); /* Windows only */ int pmem2_source_delete(struct pmem2_source **src); DESCRIPTION On Linux the pmem2_source_from_fd() function validates the file descriptor and instantiates a new struct pmem2_source* object describing the data source.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_source_size.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_source_size() - returns the size of the data source
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_source; int pmem2_source_size(const struct pmem2_source *source, size_t *size); DESCRIPTION The pmem2_source_size() function retrieves the size of the file in bytes pointed by file descriptor or handle stored in the source and puts it in *size.
This function is a portable replacement for OS-specific APIs. On Linux, it hides the quirkiness of Device DAX size detection.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_unmap.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_unmap.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2019-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_unmap() - deletes a mapping
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; int pmem2_unmap(struct pmem2_map **map_ptr); DESCRIPTION The pmem2_unmap() function deletes the mapping described by the struct pmem2_map object.
If pmem2_unmap() succeeds, deleting the mapping, it releases the struct pmem2_map object describing it and writes a NULL value to map_ptr. If the function fails, the map_ptr variable and the map object itself are left unmodified and appropriate error value will be returned.</description></item><item><title>libpmem2 | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_vm_reservation_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmem2/pmem2_vm_reservation_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmem2_vm_reservation_new(), pmem2_vm_reservation_delete() - creates or deletes virtual memory reservation that is made basing on the pmem2_vm_reservation structure
SYNOPSIS #include &amp;lt;libpmem2.h&amp;gt; struct pmem2_vm_reservation; void pmem2_vm_reservation_new(struct pmem2_vm_reservation **rsv, size_t size, void *address); void pmem2_vm_reservation_delete(struct pmem2_vm_reservation **rsv); DESCRIPTION pmem2_vm_reservation_new() and pmem2_vm_reservation_delete() functions are not supported yet.
RETURN VALUE pmem2_vm_reservation_new() returns PMEM2_E_NOSUPP . pmem2_vm_reservation_delete() returns PMEM2_E_NOSUPP .
SEE ALSO libpmem2(7), pmem2_config_set_vm_reservation(3) and http://pmem.io</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/libpmemblk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmemblk/</guid><description>Discontinuation of the project The libpmemblk project will no longer be maintained by Intel.
Intel has ceased development and contributions including, but not limited to, maintenance, bug fixes, new releases, or updates, to this project. Intel no longer accepts patches to this project. If you have an ongoing need to use this project, are interested in independently developing it, or would like to maintain patches for the open source software community, please create your own fork of this project.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/libpmemblk.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/libpmemblk.3/</guid><description>NAME libpmemblk - persistent memory resident array of blocks
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem Most commonly used functions: PMEMblkpool *pmemblk_open(const char *path, size_t bsize); PMEMblkpool *pmemblk_create(const char *path, size_t bsize, size_t poolsize, mode_t mode); void pmemblk_close(PMEMblkpool *pbp); size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); Library API versioning: const char *pmemblk_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); int pmemblk_check(const char *path, size_t bsize); Error handling: &amp;quot;constchar*pmemblk_errormsg(void); DESCRIPTION libpmemblk provides an array of blocks in persistent memory (pmem) such that updates to a single block are atomic.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem Library API versioning: const char *pmemblk_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemblk_errormsg(void); Other library functions: A description of other libpmemblk functions can be found on the following manual pages:</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize(), pmemblk_nblock() - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_create(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_create(), pmemblk_open(), pmemblk_close(), pmemblk_check()
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_create(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_open(const char *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_check(const char *path, size_t bsize); DESCRIPTION The pmemblk_create() function creates a block memory pool with the given total poolsize, divided into as many elements of size bsize as will fit in the pool.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_get(), pmemblk_ctl_set(), pmemblk_ctl_exec()
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_get(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_set(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_exec(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemblk_ctl_get(), pmemblk_ctl_set() and pmemblk_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemblk(7) through the control (CTL) namespace.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read(), pmemblk_write() - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero(), pmemblk_set_error() - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem Library API versioning: const char *pmemblk_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemblk_errormsg(void); Other library functions: A description of other libpmemblk functions can be found on the following manual pages:</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize(), pmemblk_nblock() - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_create(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_create(), pmemblk_open(), pmemblk_close(), pmemblk_check()
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_create(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_open(const char *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_check(const char *path, size_t bsize); DESCRIPTION The pmemblk_create() function creates a block memory pool with the given total poolsize, divided into as many elements of size bsize as will fit in the pool.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_get(), pmemblk_ctl_set(), pmemblk_ctl_exec()
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_get(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_set(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_exec(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemblk_ctl_get(), pmemblk_ctl_set() and pmemblk_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemblk(7) through the control (CTL) namespace.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read(), pmemblk_write() - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero(), pmemblk_set_error() - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem Library API versioning: const char *pmemblk_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemblk_errormsg(void); Other library functions: A description of other libpmemblk functions can be found on the following manual pages:</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize(), pmemblk_nblock() - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_create(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_create(), pmemblk_open(), pmemblk_close(), pmemblk_check()
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_create(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_open(const char *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_check(const char *path, size_t bsize); DESCRIPTION The pmemblk_create() function creates a block memory pool with the given total poolsize, divided into as many elements of size bsize as will fit in the pool.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_get(), pmemblk_ctl_set(), pmemblk_ctl_exec()
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_get(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_set(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_exec(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemblk_ctl_get(), pmemblk_ctl_set() and pmemblk_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemblk(7) through the control (CTL) namespace.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read(), pmemblk_write() - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero(), pmemblk_set_error() - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks (DEPRECATED)
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem Library API versioning: const char *pmemblk_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemblk_errormsg(void); Other library functions: A description of other libpmemblk functions can be found on the following manual pages:</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize()(DEPRECATED), pmemblk_nblock()(DEPRECATED) - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_create(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_create()(DEPRECATED), pmemblk_open()(DEPRECATED), pmemblk_close()(DEPRECATED), pmemblk_check()(DEPRECATED)
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_create(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_open(const char *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_check(const char *path, size_t bsize); DESCRIPTION The pmemblk_create() function creates a block memory pool with the given total poolsize, divided into as many elements of size bsize as will fit in the pool.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_get()(DEPRECATED), pmemblk_ctl_set()(DEPRECATED), pmemblk_ctl_exec()(DEPRECATED)
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_get(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_set(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_exec(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemblk_ctl_get(), pmemblk_ctl_set() and pmemblk_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemblk(7) through the control (CTL) namespace.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read()(DEPRECATED), pmemblk_write()(DEPRECATED) - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero()(DEPRECATED), pmemblk_set_error()(DEPRECATED) - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/libpmemblk.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/libpmemblk.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/libpmemblk.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/libpmemblk.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemblk/libpmemblk.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemblk/pmemblk_bsize.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemblk/pmemblk_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemblk/pmemblk_read.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemblk/pmemblk_set_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/libpmemblk.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/pmemblk_bsize.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/pmemblk_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/pmemblk_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/pmemblk_read.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemblk/pmemblk_set_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/libpmemblk.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/pmemblk_bsize.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/pmemblk_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/pmemblk_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/pmemblk_read.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemblk/pmemblk_set_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/libpmemblk.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/pmemblk_bsize.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/pmemblk_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/pmemblk_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/pmemblk_read.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemblk/pmemblk_set_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/libpmemblk.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/pmemblk_bsize.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/pmemblk_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/pmemblk_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/pmemblk_read.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemblk/pmemblk_set_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem Library API versioning: const char *pmemblk_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemblk_errormsg(void); Other library functions: A description of other libpmemblk functions can be found on the following manual pages:</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize(), pmemblk_nblock() - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_create(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_create(), pmemblk_open(), pmemblk_close(), pmemblk_check()
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_create(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_open(const char *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_check(const char *path, size_t bsize); DESCRIPTION The pmemblk_create() function creates a block memory pool with the given total poolsize, divided into as many elements of size bsize as will fit in the pool.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_get(), pmemblk_ctl_set(), pmemblk_ctl_exec()
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_get(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_set(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_exec(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemblk_ctl_get(), pmemblk_ctl_set() and pmemblk_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemblk(7) through the control (CTL) namespace.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read(), pmemblk_write() - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero(), pmemblk_set_error() - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/libpmemblk.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/libpmemblk.3/</guid><description>NAME libpmemblk - persistent memory resident array of blocks
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem Most commonly used functions: PMEMblkpool *pmemblk_open(const char *path, size_t bsize); PMEMblkpool *pmemblk_create(const char *path, size_t bsize, size_t poolsize, mode_t mode); void pmemblk_close(PMEMblkpool *pbp); size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); Library API versioning: const char *pmemblk_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); int pmemblk_check(const char *path, size_t bsize); Error handling: &amp;quot;constchar*pmemblk_errormsg(void); DESCRIPTION libpmemblk provides an array of blocks in persistent memory (pmem) such that updates to a single block are atomic.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks (DEPRECATED)
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize()(DEPRECATED), pmemblk_nblock()(DEPRECATED) - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_createU()/pmemblk_createW(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_createU()/pmemblk_createW()(DEPRECATED), pmemblk_openU()/pmemblk_openW()(DEPRECATED), pmemblk_close()(DEPRECATED), pmemblk_checkU()/pmemblk_checkW()(DEPRECATED)
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_createU(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_createW(const wchar_t *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_openU(const char *path, size_t bsize); PMEMblkpool *pmemblk_openW(const wchar_t *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_checkU(const char *path, size_t bsize); int pmemblk_checkW(const wchar_t *path, size_t bsize); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_getU()/pmemblk_ctl_getW()(DEPRECATED), pmemblk_ctl_setU()/pmemblk_ctl_setW()(DEPRECATED), pmemblk_ctl_execU()/pmemblk_ctl_execW()(DEPRECATED)
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_getU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_getW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read()(DEPRECATED), pmemblk_write()(DEPRECATED) - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero()(DEPRECATED), pmemblk_set_error()(DEPRECATED) - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemblk_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemblk_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemblk_errormsgU(void); const wchar_t *pmemblk_errormsgW(void); Other library functions: A description of other libpmemblk functions can be found on the following manual pages:</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize(), pmemblk_nblock() - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_createU()/pmemblk_createW(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_createU()/pmemblk_createW(), pmemblk_openU()/pmemblk_openW(), pmemblk_close(), pmemblk_checkU()/pmemblk_checkW()
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_createU(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_createW(const wchar_t *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_openU(const char *path, size_t bsize); PMEMblkpool *pmemblk_openW(const wchar_t *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_checkU(const char *path, size_t bsize); int pmemblk_checkW(const wchar_t *path, size_t bsize); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_getU()/pmemblk_ctl_getW(), pmemblk_ctl_setU()/pmemblk_ctl_setW(), pmemblk_ctl_execU()/pmemblk_ctl_execW()
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_getU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_getW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read(), pmemblk_write() - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero(), pmemblk_set_error() - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemblk_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemblk_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemblk_errormsgU(void); const wchar_t *pmemblk_errormsgW(void); Other library functions: A description of other libpmemblk functions can be found on the following manual pages:</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize(), pmemblk_nblock() - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_createU()/pmemblk_createW(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_createU()/pmemblk_createW(), pmemblk_openU()/pmemblk_openW(), pmemblk_close(), pmemblk_checkU()/pmemblk_checkW()
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_createU(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_createW(const wchar_t *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_openU(const char *path, size_t bsize); PMEMblkpool *pmemblk_openW(const wchar_t *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_checkU(const char *path, size_t bsize); int pmemblk_checkW(const wchar_t *path, size_t bsize); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_getU()/pmemblk_ctl_getW(), pmemblk_ctl_setU()/pmemblk_ctl_setW(), pmemblk_ctl_execU()/pmemblk_ctl_execW()
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_getU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_getW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read(), pmemblk_write() - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero(), pmemblk_set_error() - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemblk_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemblk_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemblk_errormsgU(void); const wchar_t *pmemblk_errormsgW(void); Other library functions: A description of other libpmemblk functions can be found on the following manual pages:</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize(), pmemblk_nblock() - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_createU()/pmemblk_createW(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_createU()/pmemblk_createW(), pmemblk_openU()/pmemblk_openW(), pmemblk_close(), pmemblk_checkU()/pmemblk_checkW()
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_createU(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_createW(const wchar_t *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_openU(const char *path, size_t bsize); PMEMblkpool *pmemblk_openW(const wchar_t *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_checkU(const char *path, size_t bsize); int pmemblk_checkW(const wchar_t *path, size_t bsize); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_getU()/pmemblk_ctl_getW(), pmemblk_ctl_setU()/pmemblk_ctl_setW(), pmemblk_ctl_execU()/pmemblk_ctl_execW()
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_getU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_getW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read(), pmemblk_write() - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero(), pmemblk_set_error() - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks (DEPRECATED)
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize()(DEPRECATED), pmemblk_nblock()(DEPRECATED) - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_createU()/pmemblk_createW(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_createU()/pmemblk_createW()(DEPRECATED), pmemblk_openU()/pmemblk_openW()(DEPRECATED), pmemblk_close()(DEPRECATED), pmemblk_checkU()/pmemblk_checkW()(DEPRECATED)
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_createU(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_createW(const wchar_t *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_openU(const char *path, size_t bsize); PMEMblkpool *pmemblk_openW(const wchar_t *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_checkU(const char *path, size_t bsize); int pmemblk_checkW(const wchar_t *path, size_t bsize); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_getU()/pmemblk_ctl_getW()(DEPRECATED), pmemblk_ctl_setU()/pmemblk_ctl_setW()(DEPRECATED), pmemblk_ctl_execU()/pmemblk_ctl_execW()(DEPRECATED)
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_getU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_getW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read()(DEPRECATED), pmemblk_write()(DEPRECATED) - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero()(DEPRECATED), pmemblk_set_error()(DEPRECATED) - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.3/libpmemblk.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/libpmemblk.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemblk/libpmemblk.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemblk/pmemblk_bsize.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemblk/pmemblk_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemblk/pmemblk_read.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemblk/pmemblk_set_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/libpmemblk.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/pmemblk_bsize.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/pmemblk_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/pmemblk_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/pmemblk_read.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemblk/pmemblk_set_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/libpmemblk.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/pmemblk_bsize.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/pmemblk_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/pmemblk_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/pmemblk_read.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemblk/pmemblk_set_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/libpmemblk.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/pmemblk_bsize.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/pmemblk_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/pmemblk_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/pmemblk_read.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemblk/pmemblk_set_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/libpmemblk.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/pmemblk_bsize.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/pmemblk_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/pmemblk_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/pmemblk_read.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemblk/pmemblk_set_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/libpmemblk.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/libpmemblk.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemblk - persistent memory resident array of blocks
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; cc ... -lpmemblk -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemblk_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemblk_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemblk_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemblk_errormsgU(void); const wchar_t *pmemblk_errormsgW(void); Other library functions: A description of other libpmemblk functions can be found on the following manual pages:</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/pmemblk_bsize.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/pmemblk_bsize.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_bsize(), pmemblk_nblock() - check number of available blocks or usable space in block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; size_t pmemblk_bsize(PMEMblkpool *pbp); size_t pmemblk_nblock(PMEMblkpool *pbp); DESCRIPTION The pmemblk_bsize() function returns the block size of the specified block memory pool, that is, the value which was passed as bsize to pmemblk_createU()/pmemblk_createW(). pbp must be a block memory pool handle as returned by pmemblk_open(3) or pmemblk_create(3).</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/pmemblk_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/pmemblk_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_createU()/pmemblk_createW(), pmemblk_openU()/pmemblk_openW(), pmemblk_close(), pmemblk_checkU()/pmemblk_checkW()
create, open, close and validate block pool SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; PMEMblkpool *pmemblk_createU(const char *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_createW(const wchar_t *path, size_t bsize, size_t poolsize, mode_t mode); PMEMblkpool *pmemblk_openU(const char *path, size_t bsize); PMEMblkpool *pmemblk_openW(const wchar_t *path, size_t bsize); void pmemblk_close(PMEMblkpool *pbp); int pmemblk_checkU(const char *path, size_t bsize); int pmemblk_checkW(const wchar_t *path, size_t bsize); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/pmemblk_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/pmemblk_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemblk_ctl_getU()/pmemblk_ctl_getW(), pmemblk_ctl_setU()/pmemblk_ctl_setW(), pmemblk_ctl_execU()/pmemblk_ctl_execW()
Query and modify libpmemblk internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_ctl_getU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_getW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_setW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execU(PMEMblkpool *pbp, const char *name, void *arg); (EXPERIMENTAL) int pmemblk_ctl_execW(PMEMblkpool *pbp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/pmemblk_read.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/pmemblk_read.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_read(), pmemblk_write() - read or write a block from a block memory pool
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_read(PMEMblkpool *pbp, void *buf, long long blockno); int pmemblk_write(PMEMblkpool *pbp, const void *buf, long long blockno); DESCRIPTION The pmemblk_read() function reads the block with block number blockno from memory pool pbp into the buffer buf. Reading a block that has never been written by pmemblk_write() will return a block of zeroes.</description></item><item><title>libpmemblk | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/pmemblk_set_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemblk/pmemblk_set_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemblk_set_zero(), pmemblk_set_error() - block management functions
SYNOPSIS #include &amp;lt;libpmemblk.h&amp;gt; int pmemblk_set_zero(PMEMblkpool *pbp, long long blockno); int pmemblk_set_error(PMEMblkpool *pbp, long long blockno); DESCRIPTION The pmemblk_set_zero() function writes zeros to block number blockno in persistent memory resident array of blocks pbp. Using this function is faster than actually writing a block of zeros since libpmemblk(7) uses metadata to indicate the block should read back as zero.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/libpmemcto.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/libpmemcto.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_aligned_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_aligned_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_malloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_malloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_malloc_usable_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_malloc_usable_size.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_set_root_pointer.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_set_root_pointer.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_stats_print.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_stats_print.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_strdup.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_strdup.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_wcsdup.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemcto/pmemcto_wcsdup.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/libpmemcto.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/libpmemcto.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_aligned_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_aligned_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_malloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_malloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_malloc_usable_size.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_malloc_usable_size.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_set_root_pointer.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_set_root_pointer.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_stats_print.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_stats_print.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_strdup.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_strdup.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemcto | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_wcsdup.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemcto/pmemcto_wcsdup.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/libpmemlog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmemlog/</guid><description>Discontinuation of the project The libpmemlog project will no longer be maintained by Intel.
Intel has ceased development and contributions including, but not limited to, maintenance, bug fixes, new releases, or updates, to this project. Intel no longer accepts patches to this project. If you have an ongoing need to use this project, are interested in independently developing it, or would like to maintain patches for the open source software community, please create your own fork of this project.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/libpmemlog.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/libpmemlog.3/</guid><description>NAME libpmemlog - persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem Most commonly used functions: PMEMlogpool *pmemlog_open(const char *path); PMEMlogpool *pmemlog_create(const char *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); size_t pmemlog_nbyte(PMEMlogpool *plp); int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); Library API versioning: const char *pmemlog_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); int pmemlog_check(const char *path); Error handling: &amp;quot;constchar*pmemlog_errormsg(void); DESCRIPTION libpmemlog provides a log file in persistent memory (pmem) such that additions to the log are appended atomically.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem Library API versioning: const char *pmemlog_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: int pmemlog_check(const char *path); Other library functions: A description of other libpmemlog functions can be found on the following manual pages:</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append(), pmemlog_appendv() - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_create(), pmemlog_open(), pmemlog_close(), pmemlog_check()
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_open(const char *path); PMEMlogpool *pmemlog_create(const char *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_check(const char *path); DESCRIPTION The pmemlog_create() function creates a log memory pool with the given total poolsize. Since the transactional nature of a log memory pool requires some space overhead in the memory pool, the resulting available log size is less than poolsize, and is made available to the caller via the pmemlog_nbyte(3) function.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_get(), pmemlog_ctl_set(), pmemlog_ctl_exec()
Query and modify libpmemlog internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_get(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_set(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_exec(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemlog_ctl_get(), pmemlog_ctl_set() and pmemlog_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemlog(7) through the control (CTL) namespace.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte() - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell(), pmemlog_rewind(), pmemlog_walk() - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem Library API versioning: const char *pmemlog_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: int pmemlog_check(const char *path); Other library functions: A description of other libpmemlog functions can be found on the following manual pages:</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append(), pmemlog_appendv() - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_create(), pmemlog_open(), pmemlog_close(), pmemlog_check()
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_open(const char *path); PMEMlogpool *pmemlog_create(const char *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_check(const char *path); DESCRIPTION The pmemlog_create() function creates a log memory pool with the given total poolsize. Since the transactional nature of a log memory pool requires some space overhead in the memory pool, the resulting available log size is less than poolsize, and is made available to the caller via the pmemlog_nbyte(3) function.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_get(), pmemlog_ctl_set(), pmemlog_ctl_exec()
Query and modify libpmemlog internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_get(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_set(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_exec(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemlog_ctl_get(), pmemlog_ctl_set() and pmemlog_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemlog(7) through the control (CTL) namespace.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte() - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell(), pmemlog_rewind(), pmemlog_walk() - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem Library API versioning: const char *pmemlog_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: int pmemlog_check(const char *path); Other library functions: A description of other libpmemlog functions can be found on the following manual pages:</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append(), pmemlog_appendv() - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_create(), pmemlog_open(), pmemlog_close(), pmemlog_check()
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_open(const char *path); PMEMlogpool *pmemlog_create(const char *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_check(const char *path); DESCRIPTION The pmemlog_create() function creates a log memory pool with the given total poolsize. Since the transactional nature of a log memory pool requires some space overhead in the memory pool, the resulting available log size is less than poolsize, and is made available to the caller via the pmemlog_nbyte(3) function.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_get(), pmemlog_ctl_set(), pmemlog_ctl_exec()
Query and modify libpmemlog internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_get(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_set(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_exec(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemlog_ctl_get(), pmemlog_ctl_set() and pmemlog_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemlog(7) through the control (CTL) namespace.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte() - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell(), pmemlog_rewind(), pmemlog_walk() - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file (DEPRECATED)
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem Library API versioning: const char *pmemlog_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: int pmemlog_check(const char *path); Other library functions: A description of other libpmemlog functions can be found on the following manual pages:</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append()(DEPRECATED), pmemlog_appendv()(DEPRECATED) - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_create()(DEPRECATED), pmemlog_open()(DEPRECATED), pmemlog_close()(DEPRECATED), pmemlog_check()(DEPRECATED)
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_open(const char *path); PMEMlogpool *pmemlog_create(const char *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_check(const char *path); DESCRIPTION The pmemlog_create() function creates a log memory pool with the given total poolsize. Since the transactional nature of a log memory pool requires some space overhead in the memory pool, the resulting available log size is less than poolsize, and is made available to the caller via the pmemlog_nbyte(3) function.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_get()(DEPRECATED), pmemlog_ctl_set()(DEPRECATED), pmemlog_ctl_exec()(DEPRECATED)
Query and modify libpmemlog internal behavior (DEPRECATED) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_get(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_set(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_exec(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemlog_ctl_get(), pmemlog_ctl_set() and pmemlog_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemlog(7) through the control (CTL) namespace.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte()(DEPRECATED) - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell()(DEPRECATED), pmemlog_rewind()(DEPRECATED), pmemlog_walk()(DEPRECATED) - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/libpmemlog.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/libpmemlog.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/libpmemlog.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/libpmemlog.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemlog/libpmemlog.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemlog/pmemlog_append.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemlog/pmemlog_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemlog/pmemlog_nbyte.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemlog/pmemlog_tell.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/libpmemlog.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/pmemlog_append.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/pmemlog_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/pmemlog_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/pmemlog_nbyte.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemlog/pmemlog_tell.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/libpmemlog.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/pmemlog_append.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/pmemlog_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/pmemlog_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/pmemlog_nbyte.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemlog/pmemlog_tell.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/libpmemlog.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/pmemlog_append.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/pmemlog_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/pmemlog_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/pmemlog_nbyte.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemlog/pmemlog_tell.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/libpmemlog.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/pmemlog_append.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/pmemlog_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/pmemlog_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/pmemlog_nbyte.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemlog/pmemlog_tell.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem Library API versioning: const char *pmemlog_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: int pmemlog_check(const char *path); Other library functions: A description of other libpmemlog functions can be found on the following manual pages:</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append(), pmemlog_appendv() - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_create(), pmemlog_open(), pmemlog_close(), pmemlog_check()
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_open(const char *path); PMEMlogpool *pmemlog_create(const char *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_check(const char *path); DESCRIPTION The pmemlog_create() function creates a log memory pool with the given total poolsize. Since the transactional nature of a log memory pool requires some space overhead in the memory pool, the resulting available log size is less than poolsize, and is made available to the caller via the pmemlog_nbyte(3) function.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_get(), pmemlog_ctl_set(), pmemlog_ctl_exec()
Query and modify libpmemlog internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_get(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_set(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_exec(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemlog_ctl_get(), pmemlog_ctl_set() and pmemlog_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemlog(7) through the control (CTL) namespace.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte() - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell(), pmemlog_rewind(), pmemlog_walk() - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/libpmemlog.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/libpmemlog.3/</guid><description>NAME libpmemlog - persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem Most commonly used functions: PMEMlogpool *pmemlog_open(const char *path); PMEMlogpool *pmemlog_create(const char *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); size_t pmemlog_nbyte(PMEMlogpool *plp); int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); Library API versioning: const char *pmemlog_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); int pmemlog_check(const char *path); Error handling: &amp;quot;constchar*pmemlog_errormsg(void); DESCRIPTION libpmemlog provides a log file in persistent memory (pmem) such that additions to the log are appended atomically.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file (DEPRECATED)
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append()(DEPRECATED), pmemlog_appendv()(DEPRECATED) - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_createU()/pmemlog_createW()(DEPRECATED), pmemlog_openU()/pmemlog_openW()(DEPRECATED), pmemlog_close()(DEPRECATED), pmemlog_checkU()/pmemlog_checkW()(DEPRECATED)
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_openU(const char *path); PMEMlogpool *pmemlog_openW(const wchar_t *path); PMEMlogpool *pmemlog_createU(const char *path, size_t poolsize, mode_t mode); PMEMlogpool *pmemlog_createW(const wchar_t *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_checkU(const char *path); int pmemlog_checkW(const wchar_t *path); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_getU()/pmemlog_ctl_getW()(DEPRECATED), pmemlog_ctl_setU()/pmemlog_ctl_setW()(DEPRECATED), pmemlog_ctl_execU()/pmemlog_ctl_execW()(DEPRECATED)
Query and modify libpmemlog internal behavior (DEPRECATED) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_getU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_getW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte()(DEPRECATED) - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell()(DEPRECATED), pmemlog_rewind()(DEPRECATED), pmemlog_walk()(DEPRECATED) - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemlog_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemlog_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: int pmemlog_checkU(const char *path); int pmemlog_checkW(const wchar_t *path); Other library functions: A description of other libpmemlog functions can be found on the following manual pages:</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append(), pmemlog_appendv() - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_createU()/pmemlog_createW(), pmemlog_openU()/pmemlog_openW(), pmemlog_close(), pmemlog_checkU()/pmemlog_checkW()
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_openU(const char *path); PMEMlogpool *pmemlog_openW(const wchar_t *path); PMEMlogpool *pmemlog_createU(const char *path, size_t poolsize, mode_t mode); PMEMlogpool *pmemlog_createW(const wchar_t *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_checkU(const char *path); int pmemlog_checkW(const wchar_t *path); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_getU()/pmemlog_ctl_getW(), pmemlog_ctl_setU()/pmemlog_ctl_setW(), pmemlog_ctl_execU()/pmemlog_ctl_execW()
Query and modify libpmemlog internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_getU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_getW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte() - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell(), pmemlog_rewind(), pmemlog_walk() - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemlog_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemlog_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: int pmemlog_checkU(const char *path); int pmemlog_checkW(const wchar_t *path); Other library functions: A description of other libpmemlog functions can be found on the following manual pages:</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append(), pmemlog_appendv() - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_createU()/pmemlog_createW(), pmemlog_openU()/pmemlog_openW(), pmemlog_close(), pmemlog_checkU()/pmemlog_checkW()
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_openU(const char *path); PMEMlogpool *pmemlog_openW(const wchar_t *path); PMEMlogpool *pmemlog_createU(const char *path, size_t poolsize, mode_t mode); PMEMlogpool *pmemlog_createW(const wchar_t *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_checkU(const char *path); int pmemlog_checkW(const wchar_t *path); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_getU()/pmemlog_ctl_getW(), pmemlog_ctl_setU()/pmemlog_ctl_setW(), pmemlog_ctl_execU()/pmemlog_ctl_execW()
Query and modify libpmemlog internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_getU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_getW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte() - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell(), pmemlog_rewind(), pmemlog_walk() - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemlog_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemlog_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: int pmemlog_checkU(const char *path); int pmemlog_checkW(const wchar_t *path); Other library functions: A description of other libpmemlog functions can be found on the following manual pages:</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append(), pmemlog_appendv() - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_createU()/pmemlog_createW(), pmemlog_openU()/pmemlog_openW(), pmemlog_close(), pmemlog_checkU()/pmemlog_checkW()
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_openU(const char *path); PMEMlogpool *pmemlog_openW(const wchar_t *path); PMEMlogpool *pmemlog_createU(const char *path, size_t poolsize, mode_t mode); PMEMlogpool *pmemlog_createW(const wchar_t *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_checkU(const char *path); int pmemlog_checkW(const wchar_t *path); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_getU()/pmemlog_ctl_getW(), pmemlog_ctl_setU()/pmemlog_ctl_setW(), pmemlog_ctl_execU()/pmemlog_ctl_execW()
Query and modify libpmemlog internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_getU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_getW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte() - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell(), pmemlog_rewind(), pmemlog_walk() - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file (DEPRECATED)
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append()(DEPRECATED), pmemlog_appendv()(DEPRECATED) - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_createU()/pmemlog_createW()(DEPRECATED), pmemlog_openU()/pmemlog_openW()(DEPRECATED), pmemlog_close()(DEPRECATED), pmemlog_checkU()/pmemlog_checkW()(DEPRECATED)
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_openU(const char *path); PMEMlogpool *pmemlog_openW(const wchar_t *path); PMEMlogpool *pmemlog_createU(const char *path, size_t poolsize, mode_t mode); PMEMlogpool *pmemlog_createW(const wchar_t *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_checkU(const char *path); int pmemlog_checkW(const wchar_t *path); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_getU()/pmemlog_ctl_getW()(DEPRECATED), pmemlog_ctl_setU()/pmemlog_ctl_setW()(DEPRECATED), pmemlog_ctl_execU()/pmemlog_ctl_execW()(DEPRECATED)
Query and modify libpmemlog internal behavior (DEPRECATED) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_getU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_getW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte()(DEPRECATED) - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell()(DEPRECATED), pmemlog_rewind()(DEPRECATED), pmemlog_walk()(DEPRECATED) - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.3/libpmemlog.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/libpmemlog.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemlog/libpmemlog.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemlog/pmemlog_append.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemlog/pmemlog_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemlog/pmemlog_nbyte.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemlog/pmemlog_tell.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/libpmemlog.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/pmemlog_append.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/pmemlog_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/pmemlog_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/pmemlog_nbyte.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemlog/pmemlog_tell.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/libpmemlog.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/pmemlog_append.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/pmemlog_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/pmemlog_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/pmemlog_nbyte.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemlog/pmemlog_tell.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/libpmemlog.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/pmemlog_append.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/pmemlog_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/pmemlog_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/pmemlog_nbyte.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemlog/pmemlog_tell.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/libpmemlog.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/pmemlog_append.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/pmemlog_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/pmemlog_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/pmemlog_nbyte.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemlog/pmemlog_tell.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/libpmemlog.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/libpmemlog.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CAVEATS
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
BUGS
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemlog - persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; cc ... -lpmemlog -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemlog_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemlog_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemlog_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: int pmemlog_checkU(const char *path); int pmemlog_checkW(const wchar_t *path); Other library functions: A description of other libpmemlog functions can be found on the following manual pages:</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/pmemlog_append.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/pmemlog_append.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME pmemlog_append(), pmemlog_appendv() - append bytes to the persistent memory resident log file
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_append(PMEMlogpool *plp, const void *buf, size_t count); int pmemlog_appendv(PMEMlogpool *plp, const struct iovec *iov, int iovcnt); DESCRIPTION The pmemlog_append() function appends count bytes from buf to the current write offset in the log memory pool plp. Calling this function is analogous to appending to a file.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/pmemlog_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/pmemlog_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemlog_createU()/pmemlog_createW(), pmemlog_openU()/pmemlog_openW(), pmemlog_close(), pmemlog_checkU()/pmemlog_checkW()
create, open, close and validate persistent memory resident log file SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; PMEMlogpool *pmemlog_openU(const char *path); PMEMlogpool *pmemlog_openW(const wchar_t *path); PMEMlogpool *pmemlog_createU(const char *path, size_t poolsize, mode_t mode); PMEMlogpool *pmemlog_createW(const wchar_t *path, size_t poolsize, mode_t mode); void pmemlog_close(PMEMlogpool *plp); int pmemlog_checkU(const char *path); int pmemlog_checkW(const wchar_t *path); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/pmemlog_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/pmemlog_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemlog_ctl_getU()/pmemlog_ctl_getW(), pmemlog_ctl_setU()/pmemlog_ctl_setW(), pmemlog_ctl_execU()/pmemlog_ctl_execW()
Query and modify libpmemlog internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; int pmemlog_ctl_getU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_getW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_setW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execU(PMEMlogpool *plp, const char *name, void *arg); (EXPERIMENTAL) int pmemlog_ctl_execW(PMEMlogpool *plp, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/pmemlog_nbyte.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/pmemlog_nbyte.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_nbyte() - checks the amount of usable space in the log pool.
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; size_t pmemlog_nbyte(PMEMlogpool *plp); DESCRIPTION The pmemlog_nbyte() function checks the amount of usable space in the log plp. This function may be used on a log to determine how much usable space is available after libpmemlog(7) has added its metadata to the memory pool.
RETURN VALUE The pmemlog_nbyte() function returns the amount of usable space in the log plp.</description></item><item><title>libpmemlog | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/pmemlog_tell.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemlog/pmemlog_tell.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemlog_tell(), pmemlog_rewind(), pmemlog_walk() - checks current write point for the log or walks through the log
SYNOPSIS #include &amp;lt;libpmemlog.h&amp;gt; long long pmemlog_tell(PMEMlogpool *plp); void pmemlog_rewind(PMEMlogpool *plp); void pmemlog_walk(PMEMlogpool *plp, size_t chunksize, int (*process_chunk)(const void *buf, size_t len, void *arg), void *arg); DESCRIPTION The pmemlog_tell() function returns the current write point for the log, expressed as a byte offset into the usable log space in the memory pool.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/libpmemobj/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmemobj/</guid><description>The libpmemobj library libpmemobj turns a persistent memory file into a flexible object store, supporting transactions, memory management, locking, lists, and a number of other features.
NOTE: Support for Windows and FreeBSD are deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.0.0 release.
Man pages that contains a list of the Linux interfaces provided:
Man page for libpmemobj current master Man pages that contains a list of the Windows interfaces provided:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc -std=gnu99 ... -lpmemobj -lpmem Library API versioning: const char *pmemobj_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemobj_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemobj_errormsg(void); Other library functions: A description of other libpmemobj functions can be found on the following manual pages:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_get(), pmemobj_ctl_set(), pmemobj_ctl_exec()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_get(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_set(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_exec(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemobj_ctl_get(), pmemobj_ctl_set() and pmemobj_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemobj(7) through the control (CTL) namespace.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_open(), pmemobj_create(), pmemobj_close(), pmemobj_check(), pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_open(const char *path, const char *layout); PMEMobjpool *pmemobj_create(const char *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_check(const char *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); DESCRIPTION To use the pmem-resident transactional object store provided by libpmemobj(7), a memory pool must first be created with the pmemobj_create() function described below.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/libpmemobj.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/libpmemobj.3/</guid><description>NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc -std=gnu99 ... -lpmemobj -lpmem Most commonly used functions: PMEMobjpool *pmemobj_open(const char *path, const char *layout); PMEMobjpool *pmemobj_create(const char *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); Low-level memory manipulation: void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); Locking: void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *condp, PMEMmutex *restrict mutexp); Persistent object identifier: OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) Type-safety: TOID(TYPE) TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID oid, VALUE) TOID_IS_NULL(TOID oid) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID oid) DIRECT_RW(TOID oid) DIRECT_RO(TOID oid) D_RW(TOID oid) D_RO(TOID oid) Layout declaration: POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_TYPES_NUM(layout) Non-transactional atomic allocations: typedef int (*pmemobj_constr)(PMEMobjpool *pop, void *ptr, void *arg&amp;quot;); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); size_t pmemobj_alloc_usable_size(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_direct(PMEMoid oid); uint64_t pmemobj_type_num(PMEMoid oid); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) Root object management: PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); size_t pmemobj_root_size(PMEMobjpool *pop); POBJ_ROOT(PMEMobjpool *pop, TYPE) Object containers: PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_NEXT(TOID oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) Non-transactional persistent atomic circular doubly-linked list: int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); POBJ_LIST_ENTRY(TYPE) POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_DEST_HEAD POBJ_LIST_DEST_TAIL POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, void (*constructor)(PMEMobjpool *pop, void *ptr, void *arg), void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) Transactional object manipulation: &amp;quot;enumtx_stagepmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum tx_lock, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc -std=gnu99 ... -lpmemobj -lpmem Library API versioning: const char *pmemobj_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemobj_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemobj_errormsg(void); Other library functions: A description of other libpmemobj functions can be found on the following manual pages:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_get(), pmemobj_ctl_set(), pmemobj_ctl_exec()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_get(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_set(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_exec(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemobj_ctl_get(), pmemobj_ctl_set() and pmemobj_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemobj(7) through the control (CTL) namespace.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_open(), pmemobj_create(), pmemobj_close(), pmemobj_check() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_open(const char *path, const char *layout); PMEMobjpool *pmemobj_create(const char *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_check(const char *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); DESCRIPTION To use the pmem-resident transactional object store provided by libpmemobj(7), a memory pool must first be created with the pmemobj_create() function described below.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc -std=gnu99 ... -lpmemobj -lpmem Library API versioning: const char *pmemobj_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemobj_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemobj_errormsg(void); Other library functions: A description of other libpmemobj functions can be found on the following manual pages:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2021, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_get(), pmemobj_ctl_set(), pmemobj_ctl_exec()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_get(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_set(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_exec(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemobj_ctl_get(), pmemobj_ctl_set() and pmemobj_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemobj(7) through the control (CTL) namespace.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_open(), pmemobj_create(), pmemobj_close(), pmemobj_check() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_open(const char *path, const char *layout); PMEMobjpool *pmemobj_create(const char *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_check(const char *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); DESCRIPTION To use the pmem-resident transactional object store provided by libpmemobj(7), a memory pool must first be created with the pmemobj_create() function described below.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc -std=gnu99 ... -lpmemobj -lpmem Library API versioning: const char *pmemobj_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemobj_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemobj_errormsg(void); Other library functions: A description of other libpmemobj functions can be found on the following manual pages:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2021, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_get(), pmemobj_ctl_set(), pmemobj_ctl_exec()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_get(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_set(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_exec(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemobj_ctl_get(), pmemobj_ctl_set() and pmemobj_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemobj(7) through the control (CTL) namespace.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_open(), pmemobj_create(), pmemobj_close(), pmemobj_check() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_open(const char *path, const char *layout); PMEMobjpool *pmemobj_create(const char *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_check(const char *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); DESCRIPTION To use the pmem-resident transactional object store provided by libpmemobj(7), a memory pool must first be created with the pmemobj_create() function described below.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc -std=gnu99 ... -lpmemobj -lpmem Library API versioning: const char *pmemobj_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemobj_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemobj_errormsg(void); Other library functions: A description of other libpmemobj functions can be found on the following manual pages:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_get(), pmemobj_ctl_set(), pmemobj_ctl_exec()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_get(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_set(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_exec(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemobj_ctl_get(), pmemobj_ctl_set() and pmemobj_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemobj(7) through the control (CTL) namespace.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_open(), pmemobj_create(), pmemobj_close(), pmemobj_check() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_open(const char *path, const char *layout); PMEMobjpool *pmemobj_create(const char *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_check(const char *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); DESCRIPTION To use the pmem-resident transactional object store provided by libpmemobj(7), a memory pool must first be created with the pmemobj_create() function described below.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/libpmemobj.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/libpmemobj.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/libpmemobj.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/libpmemobj.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/libpmemobj.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/oid_is_null.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_action.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_first.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_list_insert.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_mutex_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_root.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_tx_add_range.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_tx_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pmemobj_tx_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pobj_layout_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/pobj_list_head.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmemobj/toid_declare.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/libpmemobj.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/oid_is_null.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_action.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_first.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_list_insert.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_mutex_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_root.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_tx_add_range.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_tx_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pmemobj_tx_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pobj_layout_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/pobj_list_head.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmemobj/toid_declare.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/libpmemobj.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/oid_is_null.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_action.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_first.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_list_insert.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_mutex_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_root.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_tx_add_range.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_tx_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pmemobj_tx_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pobj_layout_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/pobj_list_head.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmemobj/toid_declare.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/libpmemobj.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/oid_is_null.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_action.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_first.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_list_insert.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_mutex_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_root.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_tx_add_range.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_tx_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pmemobj_tx_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pobj_layout_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/pobj_list_head.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmemobj/toid_declare.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/libpmemobj.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/oid_is_null.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_action.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_first.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_list_insert.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_mutex_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_root.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_tx_add_range.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_tx_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pmemobj_tx_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pobj_layout_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/pobj_list_head.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmemobj/toid_declare.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc -std=gnu99 ... -lpmemobj -lpmem Library API versioning: const char *pmemobj_check_version( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemobj_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemobj_errormsg(void); Other library functions: A description of other libpmemobj functions can be found on the following manual pages:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_get(), pmemobj_ctl_set(), pmemobj_ctl_exec()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_get(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_set(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_exec(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) DESCRIPTION The pmemobj_ctl_get(), pmemobj_ctl_set() and pmemobj_ctl_exec() functions provide a uniform interface for querying and modifying the internal behavior of libpmemobj(7) through the control (CTL) namespace.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_open(), pmemobj_create(), pmemobj_close(), pmemobj_check() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_open(const char *path, const char *layout); PMEMobjpool *pmemobj_create(const char *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_check(const char *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); DESCRIPTION To use the pmem-resident transactional object store provided by libpmemobj(7), a memory pool must first be created with the pmemobj_create() function described below.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/libpmemobj.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/libpmemobj.3/</guid><description>NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc -std=gnu99 ... -lpmemobj -lpmem Most commonly used functions: PMEMobjpool *pmemobj_open(const char *path, const char *layout); PMEMobjpool *pmemobj_create(const char *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); Low-level memory manipulation: void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); Locking: void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *condp, PMEMmutex *restrict mutexp); Persistent object identifier: OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) Type-safety: TOID(TYPE) TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID oid, VALUE) TOID_IS_NULL(TOID oid) TOID_EQUALS(TOID lhs, TOID rhs) DIRECT_RW(TOID oid) DIRECT_RO(TOID oid) D_RW(TOID oid) D_RO(TOID oid) Layout declaration: POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_TYPES_NUM(layout) Non-transactional atomic allocations: typedef int (*pmemobj_constr)(PMEMobjpool *pop, void *ptr, void *arg&amp;quot;); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); size_t pmemobj_alloc_usable_size(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_direct(PMEMoid oid); uint64_t pmemobj_type_num(PMEMoid oid); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) Root object management: PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); size_t pmemobj_root_size(PMEMobjpool *pop); POBJ_ROOT(PMEMobjpool *pop, TYPE) Object containers: PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_NEXT(TOID oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) Non-transactional persistent atomic circular doubly-linked list: int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); POBJ_LIST_ENTRY(TYPE) POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_DEST_HEAD POBJ_LIST_DEST_TAIL POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, void (*constructor)(PMEMobjpool *pop, void *ptr, void *arg), void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) Transactional object manipulation: &amp;quot;enumtx_stagepmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum tx_lock, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc ... -lpmemobj -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_getU()/pmemobj_ctl_getW(), pmemobj_ctl_setU()/pmemobj_ctl_setW(), pmemobj_ctl_execU()/pmemobj_ctl_execW()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_getU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_getW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_openU()/pmemobj_openW(), pmemobj_createU()/pmemobj_createW(), pmemobj_close(), pmemobj_checkU()/pmemobj_checkW() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_openU(const char *path, const char *layout); PMEMobjpool *pmemobj_openW(const wchar_t *path, const char *layout); PMEMobjpool *pmemobj_createU(const char *path, const char *layout, size_t poolsize, mode_t mode); PMEMobjpool *pmemobj_createW(const wchar_t *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_checkU(const char *path, const char *layout); int pmemobj_checkW(const wchar_t *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc ... -lpmemobj -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemobj_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemobj_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemobj_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemobj_errormsgU(void); const wchar_t *pmemobj_errormsgW(void); Other library functions: A description of other libpmemobj functions can be found on the following manual pages:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_getU()/pmemobj_ctl_getW(), pmemobj_ctl_setU()/pmemobj_ctl_setW(), pmemobj_ctl_execU()/pmemobj_ctl_execW()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_getU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_getW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_openU()/pmemobj_openW(), pmemobj_createU()/pmemobj_createW(), pmemobj_close(), pmemobj_checkU()/pmemobj_checkW() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_openU(const char *path, const char *layout); PMEMobjpool *pmemobj_openW(const wchar_t *path, const char *layout); PMEMobjpool *pmemobj_createU(const char *path, const char *layout, size_t poolsize, mode_t mode); PMEMobjpool *pmemobj_createW(const wchar_t *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_checkU(const char *path, const char *layout); int pmemobj_checkW(const wchar_t *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc ... -lpmemobj -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemobj_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemobj_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemobj_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemobj_errormsgU(void); const wchar_t *pmemobj_errormsgW(void); Other library functions: A description of other libpmemobj functions can be found on the following manual pages:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2021, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_getU()/pmemobj_ctl_getW(), pmemobj_ctl_setU()/pmemobj_ctl_setW(), pmemobj_ctl_execU()/pmemobj_ctl_execW()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_getU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_getW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_openU()/pmemobj_openW(), pmemobj_createU()/pmemobj_createW(), pmemobj_close(), pmemobj_checkU()/pmemobj_checkW() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_openU(const char *path, const char *layout); PMEMobjpool *pmemobj_openW(const wchar_t *path, const char *layout); PMEMobjpool *pmemobj_createU(const char *path, const char *layout, size_t poolsize, mode_t mode); PMEMobjpool *pmemobj_createW(const wchar_t *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_checkU(const char *path, const char *layout); int pmemobj_checkW(const wchar_t *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc ... -lpmemobj -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemobj_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemobj_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemobj_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemobj_errormsgU(void); const wchar_t *pmemobj_errormsgW(void); Other library functions: A description of other libpmemobj functions can be found on the following manual pages:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2021, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_getU()/pmemobj_ctl_getW(), pmemobj_ctl_setU()/pmemobj_ctl_setW(), pmemobj_ctl_execU()/pmemobj_ctl_execW()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_getU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_getW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_openU()/pmemobj_openW(), pmemobj_createU()/pmemobj_createW(), pmemobj_close(), pmemobj_checkU()/pmemobj_checkW() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_openU(const char *path, const char *layout); PMEMobjpool *pmemobj_openW(const wchar_t *path, const char *layout); PMEMobjpool *pmemobj_createU(const char *path, const char *layout, size_t poolsize, mode_t mode); PMEMobjpool *pmemobj_createW(const wchar_t *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_checkU(const char *path, const char *layout); int pmemobj_checkW(const wchar_t *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc ... -lpmemobj -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_ctl_get.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_getU()/pmemobj_ctl_getW(), pmemobj_ctl_setU()/pmemobj_ctl_setW(), pmemobj_ctl_execU()/pmemobj_ctl_execW()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_getU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_getW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_openU()/pmemobj_openW(), pmemobj_createU()/pmemobj_createW(), pmemobj_close(), pmemobj_checkU()/pmemobj_checkW() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_openU(const char *path, const char *layout); PMEMobjpool *pmemobj_openW(const wchar_t *path, const char *layout); PMEMobjpool *pmemobj_createU(const char *path, const char *layout, size_t poolsize, mode_t mode); PMEMobjpool *pmemobj_createW(const wchar_t *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_checkU(const char *path, const char *layout); int pmemobj_checkW(const wchar_t *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.3/libpmemobj.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/libpmemobj.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/libpmemobj.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/oid_is_null.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_action.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_first.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_list_insert.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_mutex_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_root.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_tx_add_range.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_tx_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pmemobj_tx_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pobj_layout_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/pobj_list_head.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmemobj/toid_declare.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/libpmemobj.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/oid_is_null.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_action.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_first.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_list_insert.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_mutex_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_root.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_tx_add_range.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_tx_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pmemobj_tx_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pobj_layout_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/pobj_list_head.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmemobj/toid_declare.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/libpmemobj.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/oid_is_null.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_action.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_first.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_list_insert.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_mutex_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_root.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_tx_add_range.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_tx_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pmemobj_tx_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pobj_layout_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/pobj_list_head.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmemobj/toid_declare.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/libpmemobj.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/oid_is_null.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_action.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_first.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_list_insert.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_mutex_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_root.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_tx_add_range.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_tx_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pmemobj_tx_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pobj_layout_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/pobj_list_head.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmemobj/toid_declare.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/libpmemobj.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/oid_is_null.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_action.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_first.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_list_insert.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_mutex_zero.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_open.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_root.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_tx_add_range.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_tx_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pmemobj_tx_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pobj_layout_begin.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/pobj_list_head.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmemobj/toid_declare.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/libpmemobj.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/libpmemobj.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
MANAGING LIBRARY BEHAVIOR
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmemobj - persistent memory transactional object store
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; cc ... -lpmemobj -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmemobj_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmemobj_check_versionW( unsigned major_required, unsigned minor_required); Managing library behavior: void pmemobj_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s)); Error handling: const char *pmemobj_errormsgU(void); const wchar_t *pmemobj_errormsgW(void); Other library functions: A description of other libpmemobj functions can be found on the following manual pages:</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/oid_is_null.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/oid_is_null.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME OID_IS_NULL(), OID_EQUALS(), pmemobj_direct(), pmemobj_oid(), pmemobj_type_num(), pmemobj_pool_by_oid(), pmemobj_pool_by_ptr() - functions that allow mapping operations between object addresses, object handles, oids or type numbers
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; OID_IS_NULL(PMEMoid oid) OID_EQUALS(PMEMoid lhs, PMEMoid rhs) void *pmemobj_direct(PMEMoid oid); PMEMoid pmemobj_oid(const void *addr); uint64_t pmemobj_type_num(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_oid(PMEMoid oid); PMEMobjpool *pmemobj_pool_by_ptr(const void *addr); void *pmemobj_volatile(PMEMobjpool *pop, struct pmemvlt *vlt, size_t size, void *ptr, int (*constr)(void *ptr, void *arg), void *arg); (EXPERIMENTAL) DESCRIPTION Each object stored in a persistent memory pool is represented by an object handle of type PMEMoid.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_action.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_action.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_reserve(), pmemobj_xreserve(), pmemobj_defer_free(), pmemobj_set_value(), pmemobj_publish(), pmemobj_tx_publish(), pmemobj_tx_xpublish(), pmemobj_cancel(), POBJ_RESERVE_NEW(), POBJ_RESERVE_ALLOC(), POBJ_XRESERVE_NEW(),POBJ_XRESERVE_ALLOC()
Delayed atomicity actions (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_reserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num); (EXPERIMENTAL) PMEMoid pmemobj_xreserve(PMEMobjpool *pop, struct pobj_action *act, size_t size, uint64_t type_num, uint64_t flags); (EXPERIMENTAL) void pmemobj_defer_free(PMEMobjpool *pop, PMEMoid oid, struct pobj_action *act); void pmemobj_set_value(PMEMobjpool *pop, struct pobj_action *act, uint64_t *ptr, uint64_t value); (EXPERIMENTAL) int pmemobj_publish(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_publish(struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) int pmemobj_tx_xpublish(struct pobj_action *actv, size_t actvcnt, uint64_t flags); (EXPERIMENTAL) void pmemobj_cancel(PMEMobjpool *pop, struct pobj_action *actv, size_t actvcnt); (EXPERIMENTAL) POBJ_RESERVE_NEW(pop, t, act) (EXPERIMENTAL) POBJ_RESERVE_ALLOC(pop, t, size, act) (EXPERIMENTAL) POBJ_XRESERVE_NEW(pop, t, act, flags) (EXPERIMENTAL) POBJ_XRESERVE_ALLOC(pop, t, size, act, flags) (EXPERIMENTAL) DESCRIPTION All of the functions described so far have an immediate effect on the persistent state of the pool, and as such, the cost of maintaining fail-safety is paid outright and, most importantly, in the calling thread.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_alloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_alloc(), pmemobj_xalloc(), pmemobj_zalloc(), pmemobj_realloc(), pmemobj_zrealloc(), pmemobj_strdup(), pmemobj_wcsdup(), pmemobj_alloc_usable_size(), pmemobj_defrag(), POBJ_NEW(), POBJ_ALLOC(), POBJ_ZNEW(), POBJ_ZALLOC(), POBJ_REALLOC(), POBJ_ZREALLOC(), POBJ_FREE()
non-transactional atomic allocations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; typedef int (*pmemobj_constr)(**PMEMobjpool *pop, void *ptr, void *arg); int pmemobj_alloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, pmemobj_constr constructor, void *arg); int pmemobj_xalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num, uint64_t flags, pmemobj_constr constructor, void *arg); (EXPERIMENTAL) int pmemobj_zalloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); void pmemobj_free(PMEMoid *oidp); int pmemobj_realloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_zrealloc(PMEMobjpool *pop, PMEMoid *oidp, size_t size, uint64_t type_num); int pmemobj_strdup(PMEMobjpool *pop, PMEMoid *oidp, const char *s, uint64_t type_num); int pmemobj_wcsdup(PMEMobjpool *pop, PMEMoid *oidp, const wchar_t *s, uint64_t type_num); size_t pmemobj_alloc_usable_size(PMEMoid oid); int pmemobj_defrag(PMEMobjpool *pop, PMEMoid **oidv, size_t oidcnt, struct pobj_defrag_result *result); POBJ_NEW(PMEMobjpool *pop, TOID *oidp, TYPE, pmemobj_constr constructor, void *arg) POBJ_ALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size, pmemobj_constr constructor, void *arg) POBJ_ZNEW(PMEMobjpool *pop, TOID *oidp, TYPE) POBJ_ZALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_REALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_ZREALLOC(PMEMobjpool *pop, TOID *oidp, TYPE, size_t size) POBJ_FREE(TOID *oidp) DESCRIPTION Functions described in this document provide the mechanism to allocate, resize and free objects from the persistent memory pool in a thread-safe and fail-safe manner.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_ctl_get.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_ctl_get.3/</guid><description>comment: &amp;lt;&amp;gt; (SPDX-License-Identifier: BSD-3-Clause comment: &amp;lt;&amp;gt; (Copyright 2017-2020, Intel Corporation)
NAME
SYNOPSIS
DESCRIPTION
CTL NAMESPACE
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME pmemobj_ctl_getU()/pmemobj_ctl_getW(), pmemobj_ctl_setU()/pmemobj_ctl_setW(), pmemobj_ctl_execU()/pmemobj_ctl_execW()
Query and modify libpmemobj internal behavior (EXPERIMENTAL) SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_ctl_getU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_getW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_setW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execU(PMEMobjpool *pop, const char *name, void *arg); (EXPERIMENTAL) int pmemobj_ctl_execW(PMEMobjpool *pop, const wchar_t *name, void *arg); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_first.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_first.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemobj_first(), pmemobj_next(), POBJ_FIRST(), POBJ_FIRST_TYPE_NUM(), POBJ_NEXT(), POBJ_NEXT_TYPE_NUM(), POBJ_FOREACH(), POBJ_FOREACH_SAFE(), POBJ_FOREACH_TYPE(), POBJ_FOREACH_SAFE_TYPE()
pmemobj container operations SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_first(PMEMobjpool *pop); PMEMoid pmemobj_next(PMEMoid oid); POBJ_FIRST(PMEMobjpool *pop, TYPE) POBJ_FIRST_TYPE_NUM(PMEMobjpool *pop, uint64_t type_num) POBJ_NEXT(TOID oid) POBJ_NEXT_TYPE_NUM(PMEMoid oid) POBJ_FOREACH(PMEMobjpool *pop, PMEMoid varoid) POBJ_FOREACH_SAFE(PMEMobjpool *pop, PMEMoid varoid, PMEMoid nvaroid) POBJ_FOREACH_TYPE(PMEMobjpool *pop, TOID var) POBJ_FOREACH_SAFE_TYPE(PMEMobjpool *pop, TOID var, TOID nvar) DESCRIPTION The libpmemobj(7) container operations provide a mechanism that allows iteration through the internal object collection, either looking for a specific object, or performing a specific operation on each object of a given type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_list_insert.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_list_insert.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_list_insert(), pmemobj_list_insert_new(), pmemobj_list_move(), pmemobj_list_remove()
non-transactional persistent atomic lists functions SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_list_insert(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, PMEMoid oid); PMEMoid pmemobj_list_insert_new(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid dest, int before, size_t size, uint64_t type_num, pmemobj_constr constructor, void arg); int pmemobj_list_move(PMEMobjpool *pop, size_t pe_old_offset, void *head_old, size_t pe_new_offset, void *head_new, PMEMoid dest, int before, PMEMoid oid); int pmemobj_list_remove(PMEMobjpool *pop, size_t pe_offset, void *head, PMEMoid oid, int free); DESCRIPTION In addition to the container operations on internal object collections described in pmemobj_first(3), libpmemobj(7) provides a mechanism for organizing persistent objects in user-defined, persistent, atomic, circular, doubly-linked lists.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_memcpy_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_memcpy_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLES
SEE ALSO
NAME pmemobj_persist(), pmemobj_xpersist(), pmemobj_flush(), pmemobj_xflush(), pmemobj_drain(), pmemobj_memcpy(), pmemobj_memmove(), pmemobj_memset(), pmemobj_memcpy_persist(), pmemobj_memset_persist() - low-level memory manipulation functions
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_persist(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_flush(PMEMobjpool *pop, const void *addr, size_t len); void pmemobj_drain(PMEMobjpool *pop); int pmemobj_xpersist(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); int pmemobj_xflush(PMEMobjpool *pop, const void *addr, size_t len, unsigned flags); void *pmemobj_memcpy(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memmove(PMEMobjpool *pop, void *dest, const void *src, size_t len, unsigned flags); void *pmemobj_memset(PMEMobjpool *pop, void *dest, int c, size_t len, unsigned flags); void *pmemobj_memcpy_persist(PMEMobjpool *pop, void *dest, const void *src, size_t len); void *pmemobj_memset_persist(PMEMobjpool *pop, void *dest, int c, size_t len); DESCRIPTION The libpmemobj-specific low-level memory manipulation functions described here leverage the knowledge of the additional configuration options available for libpmemobj(7) pools, such as replication.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_mutex_zero.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_mutex_zero.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_mutex_zero(), pmemobj_mutex_lock(), pmemobj_mutex_timedlock(), pmemobj_mutex_trylock(), pmemobj_mutex_unlock(),
pmemobj_rwlock_zero(), pmemobj_rwlock_rdlock(), pmemobj_rwlock_wrlock(), pmemobj_rwlock_timedrdlock(), pmemobj_rwlock_timedwrlock(), pmemobj_rwlock_tryrdlock(), pmemobj_rwlock_trywrlock(), pmemobj_rwlock_unlock(),
pmemobj_cond_zero(), pmemobj_cond_broadcast(), pmemobj_cond_signal(), pmemobj_cond_timedwait(), pmemobj_cond_wait()
pmemobj synchronization primitives SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; void pmemobj_mutex_zero(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_lock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_timedlock(PMEMobjpool *pop, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_mutex_trylock(PMEMobjpool *pop, PMEMmutex *mutexp); int pmemobj_mutex_unlock(PMEMobjpool *pop, PMEMmutex *mutexp); void pmemobj_rwlock_zero(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_rdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_wrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_timedrdlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_timedwrlock(PMEMobjpool *pop, PMEMrwlock *restrict rwlockp, const struct timespec *restrict abs_timeout); int pmemobj_rwlock_tryrdlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_trywrlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); int pmemobj_rwlock_unlock(PMEMobjpool *pop, PMEMrwlock *rwlockp); void pmemobj_cond_zero(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_broadcast(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_signal(PMEMobjpool *pop, PMEMcond *condp); int pmemobj_cond_timedwait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp, const struct timespec *restrict abs_timeout); int pmemobj_cond_wait(PMEMobjpool *pop, PMEMcond *restrict condp, PMEMmutex *restrict mutexp); DESCRIPTION libpmemobj(7) provides several types of synchronization primitives designed to be used with persistent memory.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_open.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_open.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_openU()/pmemobj_openW(), pmemobj_createU()/pmemobj_createW(), pmemobj_close(), pmemobj_checkU()/pmemobj_checkW() pmemobj_set_user_data(), pmemobj_get_user_data()
create, open, close and validate persistent memory transactional object store SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMobjpool *pmemobj_openU(const char *path, const char *layout); PMEMobjpool *pmemobj_openW(const wchar_t *path, const char *layout); PMEMobjpool *pmemobj_createU(const char *path, const char *layout, size_t poolsize, mode_t mode); PMEMobjpool *pmemobj_createW(const wchar_t *path, const char *layout, size_t poolsize, mode_t mode); void pmemobj_close(PMEMobjpool *pop); int pmemobj_checkU(const char *path, const char *layout); int pmemobj_checkW(const wchar_t *path, const char *layout); void pmemobj_set_user_data(PMEMobjpool *pop, void *data); void *pmemobj_get_user_data(PMEMobjpool *pop); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_root.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_root.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_root(), pmemobj_root_construct() POBJ_ROOT(), pmemobj_root_size() - root object management
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_root(PMEMobjpool *pop, size_t size); PMEMoid pmemobj_root_construct(PMEMobjpool *pop, size_t size, pmemobj_constr constructor, void *arg); POBJ_ROOT(PMEMobjpool *pop, TYPE) size_t pmemobj_root_size(PMEMobjpool *pop); DESCRIPTION The root object of a persistent memory pool is an entry point for all other persistent objects allocated using the libpmemobj API. In other words, every object stored in the persistent memory pool has the root object at the end of its reference path.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_tx_add_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_tx_add_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_add_range(), pmemobj_tx_add_range_direct(), pmemobj_tx_xadd_range(), pmemobj_tx_xadd_range_direct()
TX_ADD(), TX_ADD_FIELD(), TX_ADD_DIRECT(), TX_ADD_FIELD_DIRECT(),
TX_XADD(), TX_XADD_FIELD(), TX_XADD_DIRECT(), TX_XADD_FIELD_DIRECT(),
TX_SET(), TX_SET_DIRECT(), TX_MEMCPY(), TX_MEMSET()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; int pmemobj_tx_add_range(PMEMoid oid, uint64_t off, size_t size); int pmemobj_tx_add_range_direct(const void *ptr, size_t size); int pmemobj_tx_xadd_range(PMEMoid oid, uint64_t off, size_t size, uint64_t flags); int pmemobj_tx_xadd_range_direct(const void *ptr, size_t size, uint64_t flags); TX_ADD(TOID o) TX_ADD_FIELD(TOID o, FIELD) TX_ADD_DIRECT(TYPE *p) TX_ADD_FIELD_DIRECT(TYPE *p, FIELD) TX_XADD(TOID o, uint64_t flags) TX_XADD_FIELD(TOID o, FIELD, uint64_t flags) TX_XADD_DIRECT(TYPE *p, uint64_t flags) TX_XADD_FIELD_DIRECT(TYPE *p, FIELD, uint64_t flags) TX_SET(TOID o, FIELD, VALUE) TX_SET_DIRECT(TYPE *p, FIELD, VALUE) TX_MEMCPY(void *dest, const void *src, size_t num) TX_MEMSET(void *dest, int c, size_t num) DESCRIPTION pmemobj_tx_add_range() takes a &amp;ldquo;snapshot&amp;rdquo; of the memory block of given size, located at given offset off in the object specified by oid, and saves it to the undo log.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_tx_alloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_tx_alloc.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemobj_tx_alloc(), pmemobj_tx_zalloc(), pmemobj_tx_xalloc(), pmemobj_tx_realloc(), pmemobj_tx_zrealloc(), pmemobj_tx_strdup(), pmemobj_tx_xstrdup(), pmemobj_tx_wcsdup(), pmemobj_tx_xwcsdup(), pmemobj_tx_free(), pmemobj_tx_xfree()
TX_NEW(), TX_ALLOC(), TX_ZNEW(), TX_ZALLOC(), TX_XALLOC(), TX_REALLOC(), TX_ZREALLOC(), TX_STRDUP(), TX_XSTRDUP(), TX_WCSDUP(), TX_XWCSDUP(), TX_FREE(), TX_XFREE()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; PMEMoid pmemobj_tx_alloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zalloc(size_t size, uint64_t type_num); PMEMoid pmemobj_tx_xalloc(size_t size, uint64_t type_num, uint64_t flags); PMEMoid pmemobj_tx_realloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_zrealloc(PMEMoid oid, size_t size, uint64_t type_num); PMEMoid pmemobj_tx_strdup(const char *s, uint64_t type_num); PMEMoid pmemobj_tx_wcsdup(const wchar_t *s, uint64_t type_num); int pmemobj_tx_free(PMEMoid oid); int pmemobj_tx_xfree(PMEMoid oid, uint64_t flags); TX_NEW(TYPE) TX_ALLOC(TYPE, size_t size) TX_ZNEW(TYPE) TX_ZALLOC(TYPE, size_t size) TX_XALLOC(TYPE, size_t size, uint64_t flags) TX_REALLOC(TOID o, size_t size) TX_ZREALLOC(TOID o, size_t size) TX_STRDUP(const char *s, uint64_t type_num) TX_WCSDUP(const wchar_t *s, uint64_t type_num) TX_FREE(TOID o) TX_XFREE(TOID o, uint64_t flags) DESCRIPTION The pmemobj_tx_alloc() function transactionally allocates a new object of given size and type_num.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_tx_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pmemobj_tx_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME pmemobj_tx_stage(),
pmemobj_tx_begin(), pmemobj_tx_lock(), pmemobj_tx_xlock(), pmemobj_tx_abort(), pmemobj_tx_commit(), pmemobj_tx_end(), pmemobj_tx_errno(), pmemobj_tx_process(),
TX_BEGIN_PARAM(), TX_BEGIN_CB(), TX_BEGIN(), TX_ONABORT, TX_ONCOMMIT, TX_FINALLY, TX_END,
pmemobj_tx_log_append_buffer(), pmemobj_tx_xlog_append_buffer(), pmemobj_tx_log_auto_alloc(), pmemobj_tx_log_snapshots_max_size(), pmemobj_tx_log_intents_max_size(),
pmemobj_tx_set_user_data(), pmemobj_tx_get_user_data(),
pmemobj_tx_set_failure_behavior(), pmemobj_tx_get_failure_behavior()
transactional object manipulation SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; enum pobj_tx_stage pmemobj_tx_stage(void); int pmemobj_tx_begin(PMEMobjpool *pop, jmp_buf *env, enum pobj_tx_param, ...); int pmemobj_tx_lock(enum tx_lock lock_type, void *lockp); int pmemobj_tx_xlock(enum tx_lock lock_type, void *lockp, uint64_t flags); void pmemobj_tx_abort(int errnum); void pmemobj_tx_commit(void); int pmemobj_tx_end(void); int pmemobj_tx_errno(void); void pmemobj_tx_process(void); TX_BEGIN_PARAM(PMEMobjpool *pop, .</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pobj_layout_begin.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pobj_layout_begin.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME POBJ_LAYOUT_BEGIN(), POBJ_LAYOUT_TOID(), POBJ_LAYOUT_ROOT(), POBJ_LAYOUT_NAME(), POBJ_LAYOUT_END(), POBJ_LAYOUT_TYPES_NUM()
persistent memory transactional object store layout SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LAYOUT_BEGIN(layout) POBJ_LAYOUT_TOID(layout, TYPE) POBJ_LAYOUT_ROOT(layout, ROOT_TYPE) POBJ_LAYOUT_NAME(layout) POBJ_LAYOUT_END(layout) POBJ_LAYOUT_TYPES_NUM(layout) DESCRIPTION libpmemobj(7) defines a set of macros for convenient declaration of a pool&amp;rsquo;s layout. The layout declaration consists of declarations of a number of used types. The declared types will be assigned consecutive type numbers. Declared types may be used in conjunction with type safety macros (see TOID_DECLARE(3)).</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pobj_list_head.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/pobj_list_head.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME POBJ_LIST_HEAD(), POBJ_LIST_ENTRY(), POBJ_LIST_FIRST(), POBJ_LIST_LAST(), POBJ_LIST_EMPTY(), POBJ_LIST_NEXT(), POBJ_LIST_PREV(),
POBJ_LIST_FOREACH(), POBJ_LIST_FOREACH_REVERSE(),
POBJ_LIST_INSERT_HEAD(), POBJ_LIST_INSERT_TAIL(), POBJ_LIST_INSERT_AFTER(), POBJ_LIST_INSERT_BEFORE(), POBJ_LIST_INSERT_NEW_HEAD(), POBJ_LIST_INSERT_NEW_TAIL(), POBJ_LIST_INSERT_NEW_AFTER(), POBJ_LIST_INSERT_NEW_BEFORE(),
POBJ_LIST_REMOVE(), POBJ_LIST_REMOVE_FREE(),
POBJ_LIST_MOVE_ELEMENT_HEAD(), POBJ_LIST_MOVE_ELEMENT_TAIL(), POBJ_LIST_MOVE_ELEMENT_AFTER(), POBJ_LIST_MOVE_ELEMENT_BEFORE()
type-safe non-transactional persistent atomic lists SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; POBJ_LIST_HEAD(HEADNAME, TYPE) POBJ_LIST_ENTRY(TYPE) POBJ_LIST_FIRST(POBJ_LIST_HEAD *head) POBJ_LIST_LAST(POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_EMPTY(POBJ_LIST_HEAD *head) POBJ_LIST_NEXT(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_PREV(TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_FOREACH_REVERSE(TOID var, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID listelm, POBJ_LIST_ENTRY FIELD, size_t size, pmemobj_constr constructor, void *arg) POBJ_LIST_REMOVE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_REMOVE_FREE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, TOID elm, POBJ_LIST_ENTRY FIELD) POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool *pop, POBJ_LIST_HEAD *head, POBJ_LIST_HEAD *head_new, TOID listelm, TOID elm, POBJ_LIST_ENTRY FIELD, POBJ_LIST_ENTRY field_new) DESCRIPTION The following macros define and operate on a type-safe persistent atomic circular doubly linked list data structure that consist of a set of persistent objects of a well-known type.</description></item><item><title>libpmemobj | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/toid_declare.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmemobj/toid_declare.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME TOID_DECLARE(), TOID_DECLARE_ROOT(), TOID(), TOID_TYPE_NUM(), TOID_TYPE_NUM_OF(), TOID_VALID(), OID_INSTANCEOF(), TOID_ASSIGN(), TOID_IS_NULL(), TOID_EQUALS(), TOID_TYPEOF(), TOID_OFFSETOF(), DIRECT_RW(), D_RW(), DIRECT_RO(), D_RO() - libpmemobj type safety mechanism
SYNOPSIS #include &amp;lt;libpmemobj.h&amp;gt; TOID_DECLARE(TYPE, uint64_t type_num) TOID_DECLARE_ROOT(ROOT_TYPE) TOID(TYPE) TOID_TYPE_NUM(TYPE) TOID_TYPE_NUM_OF(TOID oid) TOID_VALID(TOID oid) OID_INSTANCEOF(PMEMoid oid, TYPE) TOID_ASSIGN(TOID o, VALUE) TOID_IS_NULL(TOID o) TOID_EQUALS(TOID lhs, TOID rhs) TOID_TYPEOF(TOID o) TOID_OFFSETOF(TOID o, FILED) DIRECT_RW(TOID oid) D_RW(TOID oid) DIRECT_RO(TOID oid) D_RO(TOID oid) DESCRIPTION Operating on untyped object handles, as well as on direct untyped object pointers (void*), may be confusing and error-prone.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/libpmempool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmempool/</guid><description>The libpmempool library libpmempool provides a set of utilities for management, diagnostics and repair of persistent memory pools. By pool in this context we mean pmemobj pool, pmemblk pool, pmemlog pool or BTT layout, independent of the underlying storage. The libpmempool is for applications that need high reliability or built-in troubleshooting. It may be useful for testing and debugging purposes also.
NOTE: Support for Windows and FreeBSD are deprecated since PMDK 1.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc -std=gnu99 ... -lpmempool -lpmem Library API versioning: const char *pmempool_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmempool_errormsg(void); Other library functions: A description of other libpmempool functions can be found on the following manual pages:
health check functions: pmempool_check_init(3)
pool set synchronization and transformation: pmempool_sync(3)</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_init(), pmempool_check(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_init(struct pmempool_check_args *args, size_t args_size); struct pmempool_check_status *pmempool_check(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); DESCRIPTION To perform the checks provided by libpmempool, a check context must first be initialized using the pmempool_check_init() function described in this section. Once initialized, the check context is represented by an opaque handle of type PMEMpoolcheck*, which is passed to all of the other functions available in libpmempool</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_query(), pmempool_feature_enable(), pmempool_feature_disable() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_query(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enable(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disable(const char *path, enum pmempool_feature feature, unsigned flags); DESCRIPTION The feature argument accepts following values:
PMEMPOOL_FEAT_SINGLEHDR - only the first part in each replica contains the pool part internal metadata.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rm() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rm(const char *path, int flags); DESCRIPTION The pmempool_rm() function removes the pool pointed to by path. The path can point to a regular file, device dax or pool set file. If path is a pool set file, pmempool_rm() will remove all part files from replicas using unlink(2) before removing the pool set file itself.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_sync(), pmempool_transform() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_sync(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transform(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) DESCRIPTION The pmempool_sync() function synchronizes data between replicas within a pool set.
pmempool_sync() accepts two arguments:
poolset_file - a path to a pool set file,
flags - a combination of flags (ORed) which modify how synchronization is performed.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc -std=gnu99 ... -lpmempool -lpmem Library API versioning: const char *pmempool_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmempool_errormsg(void); Other library functions: A description of other libpmempool functions can be found on the following manual pages:
health check functions: pmempool_check_init(3)
pool set synchronization and transformation: pmempool_sync(3)</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_init(), pmempool_check(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_init(struct pmempool_check_args *args, size_t args_size); struct pmempool_check_status *pmempool_check(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); DESCRIPTION To perform the checks provided by libpmempool, a check context must first be initialized using the pmempool_check_init() function described in this section. Once initialized, the check context is represented by an opaque handle of type PMEMpoolcheck*, which is passed to all of the other functions available in libpmempool</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_query(), pmempool_feature_enable(), pmempool_feature_disable() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_query(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enable(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disable(const char *path, enum pmempool_feature feature, unsigned flags); DESCRIPTION The feature argument accepts following values:
PMEMPOOL_FEAT_SINGLEHDR - only the first part in each replica contains the pool part internal metadata.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rm() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rm(const char *path, int flags); DESCRIPTION The pmempool_rm() function removes the pool pointed to by path. The path can point to a regular file, device dax or pool set file. If path is a pool set file, pmempool_rm() will remove all part files from local replicas using unlink(2), and all remote replicas using rpmem_remove(3) (see librpmem(7)), before removing the pool set file itself.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_sync(), pmempool_transform() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_sync(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transform(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) DESCRIPTION The pmempool_sync() function synchronizes data between replicas within a pool set.
pmempool_sync() accepts two arguments:
poolset_file - a path to a pool set file,
flags - a combination of flags (ORed) which modify how synchronization is performed.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc -std=gnu99 ... -lpmempool -lpmem Library API versioning: const char *pmempool_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmempool_errormsg(void); Other library functions: A description of other libpmempool functions can be found on the following manual pages:
health check functions: pmempool_check_init(3)
pool set synchronization and transformation: pmempool_sync(3)</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_init(), pmempool_check(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_init(struct pmempool_check_args *args, size_t args_size); struct pmempool_check_status *pmempool_check(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); DESCRIPTION To perform the checks provided by libpmempool, a check context must first be initialized using the pmempool_check_init() function described in this section. Once initialized, the check context is represented by an opaque handle of type PMEMpoolcheck*, which is passed to all of the other functions available in libpmempool</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_query(), pmempool_feature_enable(), pmempool_feature_disable() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_query(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enable(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disable(const char *path, enum pmempool_feature feature, unsigned flags); DESCRIPTION The feature argument accepts following values:
PMEMPOOL_FEAT_SINGLEHDR - only the first part in each replica contains the pool part internal metadata.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rm() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rm(const char *path, int flags); DESCRIPTION The pmempool_rm() function removes the pool pointed to by path. The path can point to a regular file, device dax or pool set file. If path is a pool set file, pmempool_rm() will remove all part files from local replicas using unlink(2), and all remote replicas using rpmem_remove(3) (see librpmem(7)), before removing the pool set file itself.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_sync(), pmempool_transform() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_sync(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transform(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) DESCRIPTION The pmempool_sync() function synchronizes data between replicas within a pool set.
pmempool_sync() accepts two arguments:
poolset_file - a path to a pool set file,
flags - a combination of flags (ORed) which modify how synchronization is performed.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc -std=gnu99 ... -lpmempool -lpmem Library API versioning: const char *pmempool_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmempool_errormsg(void); Other library functions: A description of other libpmempool functions can be found on the following manual pages:
health check functions: pmempool_check_init(3)
pool set synchronization and transformation: pmempool_sync(3)</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_init(), pmempool_check(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_init(struct pmempool_check_args *args, size_t args_size); struct pmempool_check_status *pmempool_check(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); DESCRIPTION To perform the checks provided by libpmempool, a check context must first be initialized using the pmempool_check_init() function described in this section. Once initialized, the check context is represented by an opaque handle of type PMEMpoolcheck*, which is passed to all of the other functions available in libpmempool</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_query(), pmempool_feature_enable(), pmempool_feature_disable() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_query(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enable(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disable(const char *path, enum pmempool_feature feature, unsigned flags); DESCRIPTION The feature argument accepts following values:
PMEMPOOL_FEAT_SINGLEHDR - only the first part in each replica contains the pool part internal metadata.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rm() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rm(const char *path, int flags); DESCRIPTION The pmempool_rm() function removes the pool pointed to by path. The path can point to a regular file, device dax or pool set file. If path is a pool set file, pmempool_rm() will remove all part files from local replicas using unlink(2), and all remote replicas using rpmem_remove(3) (see librpmem(7)), before removing the pool set file itself.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_sync(), pmempool_transform() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_sync(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transform(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) DESCRIPTION The pmempool_sync() function synchronizes data between replicas within a pool set.
pmempool_sync() accepts two arguments:
poolset_file - a path to a pool set file,
flags - a combination of flags (ORed) which modify how synchronization is performed.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc -std=gnu99 ... -lpmempool -lpmem Library API versioning: const char *pmempool_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmempool_errormsg(void); Other library functions: A description of other libpmempool functions can be found on the following manual pages:</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_init(), pmempool_check(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_init(struct pmempool_check_args *args, size_t args_size); struct pmempool_check_status *pmempool_check(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); DESCRIPTION To perform the checks provided by libpmempool, a check context must first be initialized using the pmempool_check_init() function described in this section. Once initialized, the check context is represented by an opaque handle of type PMEMpoolcheck*, which is passed to all of the other functions available in libpmempool</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_query(), pmempool_feature_enable(), pmempool_feature_disable() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_query(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enable(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disable(const char *path, enum pmempool_feature feature, unsigned flags); DESCRIPTION The feature argument accepts following values:
PMEMPOOL_FEAT_SINGLEHDR - only the first part in each replica contains the pool part internal metadata.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rm() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rm(const char *path, int flags); DESCRIPTION The pmempool_rm() function removes the pool pointed to by path. The path can point to a regular file, device dax or pool set file. If path is a pool set file, pmempool_rm() will remove all part files from replicas using unlink(2) before removing the pool set file itself.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_sync(), pmempool_transform() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_sync(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transform(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) DESCRIPTION The pmempool_sync() function synchronizes data between replicas within a pool set.
pmempool_sync() accepts two arguments:
poolset_file - a path to a pool set file,
flags - a combination of flags (ORed) which modify how synchronization is performed.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/libpmempool.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/libpmempool.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/libpmempool.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/libpmempool.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmempool/libpmempool.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmempool/pmempool_check_init.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmempool/pmempool_rm.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libpmempool/pmempool_sync.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmempool/libpmempool.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmempool/pmempool_check_init.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmempool/pmempool_feature_query.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmempool/pmempool_rm.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libpmempool/pmempool_sync.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmempool/libpmempool.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmempool/pmempool_check_init.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmempool/pmempool_feature_query.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmempool/pmempool_rm.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libpmempool/pmempool_sync.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmempool/libpmempool.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmempool/pmempool_check_init.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmempool/pmempool_feature_query.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmempool/pmempool_rm.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libpmempool/pmempool_sync.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmempool/libpmempool.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmempool/pmempool_check_init.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmempool/pmempool_feature_query.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmempool/pmempool_rm.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/libpmempool/pmempool_sync.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc -std=gnu99 ... -lpmempool -lpmem Library API versioning: const char *pmempool_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *pmempool_errormsg(void); Other library functions: A description of other libpmempool functions can be found on the following manual pages:
health check functions: pmempool_check_init(3)
pool set synchronization and transformation: pmempool_sync(3)</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_init(), pmempool_check(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_init(struct pmempool_check_args *args, size_t args_size); struct pmempool_check_status *pmempool_check(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); DESCRIPTION To perform the checks provided by libpmempool, a check context must first be initialized using the pmempool_check_init() function described in this section. Once initialized, the check context is represented by an opaque handle of type PMEMpoolcheck*, which is passed to all of the other functions available in libpmempool</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_query(), pmempool_feature_enable(), pmempool_feature_disable() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_query(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enable(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disable(const char *path, enum pmempool_feature feature, unsigned flags); DESCRIPTION The feature argument accepts following values:
PMEMPOOL_FEAT_SINGLEHDR - only the first part in each replica contains the pool part internal metadata.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rm() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rm(const char *path, int flags); DESCRIPTION The pmempool_rm() function removes the pool pointed to by path. The path can point to a regular file, device dax or pool set file. If path is a pool set file, pmempool_rm() will remove all part files from local replicas using unlink(2), and all remote replicas using rpmem_remove(3) (see librpmem(7)), before removing the pool set file itself.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_sync(), pmempool_transform() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_sync(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transform(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) DESCRIPTION The pmempool_sync() function synchronizes data between replicas within a pool set.
pmempool_sync() accepts two arguments:
poolset_file - a path to a pool set file,
flags - a combination of flags (ORed) which modify how synchronization is performed.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc ... -lpmempool -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_initU()/pmempool_check_initW(), pmempool_checkU()/pmempool_checkW(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_initU(struct pmempool_check_argsU *args, size_t args_size); PMEMpoolcheck *pmempool_check_initW(struct pmempool_check_argsW *args, size_t args_size); struct pmempool_check_statusU *pmempool_checkU(PMEMpoolcheck *ppc); struct pmempool_check_statusW *pmempool_checkW(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_queryU()/pmempool_feature_queryW(), pmempool_feature_enableU()/pmempool_feature_enableW(), pmempool_feature_disableU()/pmempool_feature_disableW() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_queryU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_queryW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rmU()/pmempool_rmW() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rmU(const char *path, int flags); int pmempool_rmW(const wchar_t *path, int flags); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmempool_rmU()/pmempool_rmW() function removes the pool pointed to by path.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_syncU()/pmempool_syncW(), pmempool_transformU()/pmempool_transformW() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_syncU(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_syncW(const wchar_t *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transformU(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) int pmempool_transformW(const wchar_t *poolset_file_src, const wchar_t *poolset_file_dst, unsigned flags); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc ... -lpmempool -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmempool_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmempool_check_versionW( unsigned major_required, unsigned minor_required); Error handling: const char *pmempool_errormsgU(void); const wchar_t *pmempool_errormsgW(void); Other library functions: A description of other libpmempool functions can be found on the following manual pages:</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_initU()/pmempool_check_initW(), pmempool_checkU()/pmempool_checkW(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_initU(struct pmempool_check_argsU *args, size_t args_size); PMEMpoolcheck *pmempool_check_initW(struct pmempool_check_argsW *args, size_t args_size); struct pmempool_check_statusU *pmempool_checkU(PMEMpoolcheck *ppc); struct pmempool_check_statusW *pmempool_checkW(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_queryU()/pmempool_feature_queryW(), pmempool_feature_enableU()/pmempool_feature_enableW(), pmempool_feature_disableU()/pmempool_feature_disableW() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_queryU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_queryW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rmU()/pmempool_rmW() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rmU(const char *path, int flags); int pmempool_rmW(const wchar_t *path, int flags); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmempool_rmU()/pmempool_rmW() function removes the pool pointed to by path.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_syncU()/pmempool_syncW(), pmempool_transformU()/pmempool_transformW() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_syncU(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_syncW(const wchar_t *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transformU(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) int pmempool_transformW(const wchar_t *poolset_file_src, const wchar_t *poolset_file_dst, unsigned flags); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc ... -lpmempool -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmempool_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmempool_check_versionW( unsigned major_required, unsigned minor_required); Error handling: const char *pmempool_errormsgU(void); const wchar_t *pmempool_errormsgW(void); Other library functions: A description of other libpmempool functions can be found on the following manual pages:</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_initU()/pmempool_check_initW(), pmempool_checkU()/pmempool_checkW(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_initU(struct pmempool_check_argsU *args, size_t args_size); PMEMpoolcheck *pmempool_check_initW(struct pmempool_check_argsW *args, size_t args_size); struct pmempool_check_statusU *pmempool_checkU(PMEMpoolcheck *ppc); struct pmempool_check_statusW *pmempool_checkW(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_queryU()/pmempool_feature_queryW(), pmempool_feature_enableU()/pmempool_feature_enableW(), pmempool_feature_disableU()/pmempool_feature_disableW() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_queryU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_queryW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rmU()/pmempool_rmW() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rmU(const char *path, int flags); int pmempool_rmW(const wchar_t *path, int flags); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmempool_rmU()/pmempool_rmW() function removes the pool pointed to by path.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_syncU()/pmempool_syncW(), pmempool_transformU()/pmempool_transformW() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_syncU(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_syncW(const wchar_t *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transformU(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) int pmempool_transformW(const wchar_t *poolset_file_src, const wchar_t *poolset_file_dst, unsigned flags); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc ... -lpmempool -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmempool_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmempool_check_versionW( unsigned major_required, unsigned minor_required); Error handling: const char *pmempool_errormsgU(void); const wchar_t *pmempool_errormsgW(void); Other library functions: A description of other libpmempool functions can be found on the following manual pages:</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_initU()/pmempool_check_initW(), pmempool_checkU()/pmempool_checkW(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_initU(struct pmempool_check_argsU *args, size_t args_size); PMEMpoolcheck *pmempool_check_initW(struct pmempool_check_argsW *args, size_t args_size); struct pmempool_check_statusU *pmempool_checkU(PMEMpoolcheck *ppc); struct pmempool_check_statusW *pmempool_checkW(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_queryU()/pmempool_feature_queryW(), pmempool_feature_enableU()/pmempool_feature_enableW(), pmempool_feature_disableU()/pmempool_feature_disableW() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_queryU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_queryW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rmU()/pmempool_rmW() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rmU(const char *path, int flags); int pmempool_rmW(const wchar_t *path, int flags); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmempool_rmU()/pmempool_rmW() function removes the pool pointed to by path.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_syncU()/pmempool_syncW(), pmempool_transformU()/pmempool_transformW() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_syncU(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_syncW(const wchar_t *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transformU(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) int pmempool_transformW(const wchar_t *poolset_file_src, const wchar_t *poolset_file_dst, unsigned flags); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc ... -lpmempool -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_initU()/pmempool_check_initW(), pmempool_checkU()/pmempool_checkW(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_initU(struct pmempool_check_argsU *args, size_t args_size); PMEMpoolcheck *pmempool_check_initW(struct pmempool_check_argsW *args, size_t args_size); struct pmempool_check_statusU *pmempool_checkU(PMEMpoolcheck *ppc); struct pmempool_check_statusW *pmempool_checkW(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_queryU()/pmempool_feature_queryW(), pmempool_feature_enableU()/pmempool_feature_enableW(), pmempool_feature_disableU()/pmempool_feature_disableW() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_queryU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_queryW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rmU()/pmempool_rmW() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rmU(const char *path, int flags); int pmempool_rmW(const wchar_t *path, int flags); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmempool_rmU()/pmempool_rmW() function removes the pool pointed to by path.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_syncU()/pmempool_syncW(), pmempool_transformU()/pmempool_transformW() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_syncU(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_syncW(const wchar_t *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transformU(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) int pmempool_transformW(const wchar_t *poolset_file_src, const wchar_t *poolset_file_dst, unsigned flags); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.3/libpmempool.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/libpmempool.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmempool/libpmempool.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmempool/pmempool_check_init.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmempool/pmempool_rm.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libpmempool/pmempool_sync.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmempool/libpmempool.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmempool/pmempool_check_init.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmempool/pmempool_feature_query.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmempool/pmempool_rm.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libpmempool/pmempool_sync.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmempool/libpmempool.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmempool/pmempool_check_init.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmempool/pmempool_feature_query.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmempool/pmempool_rm.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libpmempool/pmempool_sync.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmempool/libpmempool.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmempool/pmempool_check_init.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmempool/pmempool_feature_query.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmempool/pmempool_rm.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libpmempool/pmempool_sync.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmempool/libpmempool.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmempool/pmempool_check_init.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmempool/pmempool_feature_query.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmempool/pmempool_rm.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/libpmempool/pmempool_sync.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmempool/libpmempool.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmempool/libpmempool.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
LIBRARY API VERSIONING
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME libpmempool - persistent memory pool management library
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; cc ... -lpmempool -lpmem NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
Library API versioning: const char *pmempool_check_versionU( unsigned major_required, unsigned minor_required); const wchar_t *pmempool_check_versionW( unsigned major_required, unsigned minor_required); Error handling: const char *pmempool_errormsgU(void); const wchar_t *pmempool_errormsgW(void); Other library functions: A description of other libpmempool functions can be found on the following manual pages:</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmempool/pmempool_check_init.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmempool/pmempool_check_init.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EXAMPLE
NOTES
SEE ALSO
NAME pmempool_check_initU()/pmempool_check_initW(), pmempool_checkU()/pmempool_checkW(), pmempool_check_end() - checks pmempool health
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; PMEMpoolcheck *pmempool_check_initU(struct pmempool_check_argsU *args, size_t args_size); PMEMpoolcheck *pmempool_check_initW(struct pmempool_check_argsW *args, size_t args_size); struct pmempool_check_statusU *pmempool_checkU(PMEMpoolcheck *ppc); struct pmempool_check_statusW *pmempool_checkW(PMEMpoolcheck *ppc); enum pmempool_check_result pmempool_check_end(PMEMpoolcheck *ppc); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmempool/pmempool_feature_query.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmempool/pmempool_feature_query.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
RETURN VALUE
SEE ALSO
NAME pmempool_feature_queryU()/pmempool_feature_queryW(), pmempool_feature_enableU()/pmempool_feature_enableW(), pmempool_feature_disableU()/pmempool_feature_disableW() - toggle or query pool set features
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_feature_queryU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_queryW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_enableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableU(const char *path, enum pmempool_feature feature, unsigned flags); int pmempool_feature_disableW(const wchar_t *path, enum pmempool_feature feature, unsigned flags); NOTE: The PMDK API supports UNICODE.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmempool/pmempool_rm.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmempool/pmempool_rm.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmempool_rmU()/pmempool_rmW() - remove persistent memory pool
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_rmU(const char *path, int flags); int pmempool_rmW(const wchar_t *path, int flags); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmempool_rmU()/pmempool_rmW() function removes the pool pointed to by path.</description></item><item><title>libpmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/libpmempool/pmempool_sync.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/libpmempool/pmempool_sync.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
NOTES
SEE ALSO
NAME pmempool_syncU()/pmempool_syncW(), pmempool_transformU()/pmempool_transformW() - pool set synchronization and transformation
SYNOPSIS #include &amp;lt;libpmempool.h&amp;gt; int pmempool_syncU(const char *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_syncW(const wchar_t *poolset_file, unsigned flags); (EXPERIMENTAL) int pmempool_transformU(const char *poolset_file_src, const char *poolset_file_dst, unsigned flags); (EXPERIMENTAL) int pmempool_transformW(const wchar_t *poolset_file_src, const wchar_t *poolset_file_dst, unsigned flags); (EXPERIMENTAL) NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/libpmemset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/libpmemset/</guid><description>Discontinuation of the project The libpmemset project will no longer be maintained by Intel.
Intel has ceased development and contributions including, but not limited to, maintenance, bug fixes, new releases, or updates, to this project. Intel no longer accepts patches to this project. If you have an ongoing need to use this project, are interested in independently developing it, or would like to maintain patches for the open source software community, please create your own fork of this project.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/libpmemset.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/libpmemset.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
DEBUGGING
SEE ALSO
NAME libpmemset - provides core functionality any persistent application should reasonably have (EXPERIMENTAL)
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; cc ... -lpmemset -lpmem2 DESCRIPTION libpmemset is still in progress.
DEBUGGING PMEMSET_LOG_LEVEL Value assigned to the PMEMSET_LOG_LEVEL controls the level of log details presented in the debug version of the library, as follows:
0 - This is the default level of logging, when PMEMSET_LOG_LEVEL is not set. No log messages are presented at this level.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_config_new(), pmemset_config_delete() - allocate and free a configuration structure for a pmemset object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_config; int pmemset_config_new(struct pmemset_config **cfg); int pmemset_config_delete(struct pmemset_config **cfg); DESCRIPTION The pmemset_config_new() function instantiates a new (opaque) configuration structure, pmemset_config, which is used to define set parameters for a pmemset_new(3) function, and returns it through the pointer in *cfg.
The pmemset_config_delete() function frees *cfg returned by pmemset_config_new() and sets *cfg to NULL.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_config_set_event_callback.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_config_set_event_callback.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EVENTS
SEE ALSO
NAME pmemset_config_set_event_callback() - set an event callback
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; #define PMEMSET_EVENT_CONTEXT_SIZE (64) struct pmemset_event_context { enum pmemset_event type; union { char _data[PMEMSET_EVENT_CONTEXT_SIZE]; struct pmemset_event_copy copy; struct pmemset_event_move move; struct pmemset_event_set set; struct pmemset_event_flush flush; struct pmemset_event_drain drain; struct pmemset_event_persist persist; struct pmemset_event_bad_block bad_block; struct pmemset_event_part_remove part_remove; struct pmemset_event_part_add part_add; } data; }; typedef int pmemset_event_callback(struct pmemset *set, struct pmemset_event_context *ctx, void *arg); void pmemset_config_set_event_callback(struct pmemset_config *cfg, pmemset_event_callback *callback, void *arg); DESCRIPTION The pmemset_config_set_event_callback() sets an user provided callback in cfg.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_config_set_required_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_config_set_required_store_granularity() - set granularity required for pmemset structure.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_config_set_required_store_granularity(struct pmemset_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmemset_config_set_required_store_granularity() sets maximum permitted granularity value g requested for entire pmemset object.
Each part has to have the same effective granularity of mapped parts - detected and initialized during pmemset_part_map(3). It means that the user cannot use parts with a different effective granularity within one pmemset.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_config_set_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_config_set_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_config_set_reservation() - sets a reservation for entire pmemset to use
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_config; void pmemset_config_set_reservation(struct pmemset_config *config, struct pmem2_vm_reservation *rsv); DESCRIPTION The pmemset_config_set_reservation() function sets a virtual memory reservation for entire pmemset object.
Setting the reservation in pmemset configuration limits the future part mappings to the virtual address space spanned by the provided reservation. Every part mapping is made to the provided reservation, instead of the virtual address space of the process calling pmemset_part_map(3).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_deep_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_deep_flush() - performs deep flush on the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_deep_flush(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_deep_flush() function forces any changes in the range [ptr, ptr+size) from the set to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_descriptor_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_descriptor_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_descriptor_part_map() - reads the address and size of part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_part_map; struct pmemset_part_descriptor pmemset_descriptor_part_map(struct pmemset_part_map *pmap); DESCRIPTION The pmemset_descriptor_part_map() function reads address and size of the part mapping via pmap parameter pointing to the structure describing part mapping. It can be obtained using the pmemset_first_part_map(3) or the pmemset_next_part_map(3) function.
RETURN VALUE The pmemset_descriptor_part_map() returns a pmemset_part_descriptor struct containing descriptive information abot the part mapping.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_drain.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_drain.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_drain() - drain flushes
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_drain(struct pmemset *set); DESCRIPTION The pmemset_drain() function efficiently draining flushes in the range owned by set. Each program that flushes discontiguous ranges using pmemset_flush(3) should follow up them by calling pmemset_drain() to wait for drain hw buffers. Calling pmemset_drain() also guarantees proper ordering of the flushed stores.
NOTE: For more detailed information about granularity and underlying drain operation please see GRANULARITY section in the libpmem2(7) man page.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_errormsg() - returns last error message
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; const char *pmemset_errormsg(void); DESCRIPTION If an error is detected during the call to a libpmemset(7) function, the application may retrieve an error message describing the reason of the failure from pmemset_errormsg(). The error message buffer is thread-local; errors encountered in one thread do not affect its value in other threads. The buffer is never cleared by any library function; its content is significant only when the return value of the immediately preceding call to a libpmemset(7) function indicated an error.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_first_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_first_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_first_part_map() - reads first mapping from a set pmemset_next_part_map() - reads next mapping from a set
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; void pmemset_first_part_map(struct pmemset *set, struct pmemset_part_map **pmap); void pmemset_next_part_map(struct pmemset *set, struct pmemset_part_map *cur, struct pmemset_part_map **next) DESCRIPTION The pmemset_first_part_map() function reads first mapping from the set. The pmemset_next_part_map() function reads from the set a mapping that succeeds the mapping provided in the cur variable.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_flush() - flushes data from the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_flush(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_flush() function efficiently flushes data from set in the range [ptr, ptr + size]. The pmemset_flush() function automatically decides what is the most appropriate mechanism for flushing stores directly to underlying storage. Based on granularity value of the set and available platform, pmemset_flush() will use system API calls such as msync(), fsync() on Linux, or FlushFileBuffers(), FlushViewOfFile() on Windows to flush data.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_get_store_granularity() - reads effective mappings granularity for pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_get_store_granularity(struct pmemset *set, enum pmem2_granularity *g); DESCRIPTION The pmemset_get_store_granularity() function reads effective granularity of the set object and puts it in the *g;
The set object has to contain at least one mapped part using pmemset_part_map(3) function, otherwise reading granularity value is pointless and function pmemset_get_store_granularity(3) will fail.
Concept of the granularity is described in libpmem2(7).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_memmove.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_memmove.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_memmove(), pmemset_memcpy(), pmemset_pmemset() - performs memmove/memcpy/memset on memory from the pmemset.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; void *pmemset_memmove(struct pmemset *set, void *pmemdest, const void *src, size_t len, unsigned flags); void *pmemset_memcpy(struct pmemset *set, void *pmemdest, const void *src, size_t len, unsigned flags); void *pmemset_memset(struct pmemset *set, void *pmemdest, int c, size_t len, unsigned flags); DESCRIPTION The pmemset_memmove(), pmemset_memcpy() and pmemset_memset() functions provide the same memory copying functionalities as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM2_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_new(), pmemset_delete() - allocate and free a structure for a pmemset object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_config; int pmemset_new(struct pmemset **set, struct pmemset_config *cfg); int pmemset_delete(struct pmemset **set); DESCRIPTION The pmemset_new() function creates a new set by allocating and initializing set structure, pmemset, and returns it through the pointer in *set. Configuration data, passed by the *cfg, is copied into the set structure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_part_map() - creates a part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_extras; struct pmemset_part; struct pmemset_part_descriptor; struct pmemset_source; int pmemset_part_map(struct pmemset_part **part_ptr, struct pmemset_extras *extra, struct pmemset_part_descriptor *desc); DESCRIPTION The pmemset_part_map() function creates new part mapping in the virtual address space of the calling process and adds structure describing this mapping to the pmemset. It requires an address of a pointer to initialized part provided in the part_ptr parameter.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_part_map_by_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_part_map_by_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_part_map_by_address() - returns part map object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; int pmemset_part_map_by_address(struct pmemset *set, struct pmemset_part_map **pmap, void *addr); DESCRIPTION The pmemset_part_map_by_address() - returns part_map object from the set. The part_map has to contain address addr.
RETURN VALUE The pmemset_part_map_by_address() function returns 0 on success or a negative error code on failure.
ERRORS The pmemset_part_new() can fail with the following errors:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_part_map_drop.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_part_map_drop.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_part_map_drop() - drops the reference to the part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_part_map; void pmemset_part_map_drop(struct pmemset_part_map **pmap); DESCRIPTION The pmemset_part_map_drop() function drops the address reference to the part mapping. Address of a pointer to the part mapping object is passed to the function via the pmap pointer. Pointer to the part mapping object can be retrieved using either pmemset_first_part_map(3), pmemset_next_part_map(3) or pmemset_part_map_by_address(3) functions.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_part_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_part_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_part_new(), pmemset_part_delete() - create and delete structure for a part object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part; struct pmemset_source; int pmemset_part_new(struct pmemset_part **part, struct pmemset *set, struct pmemset_source *src, size_t offset, size_t length); int pmemset_part_delete(struct pmemset_part **part); DESCRIPTION The pmemset_part_new() creates new part based on the set specified in the *set pointer. This function requires a data source source.
For the operation to succeed the src structure must be created from a valid data source.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemset_perror() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; void pmemset_perror(const char *format, ...); DESCRIPTION The pmemset_perror() function produces a message on standard error stream describing the last error encountered during library call.
pmemset_perror() takes a variable number of arguments. First, the argument string format is printed - similarly to the printf(3), followed by a colon and a blank. Then an error message retrieved from the pmemset_errormsg(), and a new-line.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_persist() - persist data from the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_persist(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_persist() function efficiently persists data from set in the range [ptr, ptr + size]. It works on either persistent memory or a memory mapped file on traditional storage. The pmemset_persist() function is combination of pmemset_flush(3) and pmemset_drain(3) functions and can be used interchangeably:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_remove_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_remove_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_remove_part_map() - removes part mapping from the pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; int pmemset_remove_part_map(struct pmemset *set, struct pmemset_part_map **pmap_ptr); DESCRIPTION The pmemset_remove_part_map() function removes provided part mapping from the pmemset. Mapping to be removed can be retrieved using either pmemset_first_part_map(3), pmemset_next_part_map(3) or pmemset_part_map_by_address(3) functions. Provided part mapping can&amp;rsquo;t be referenced more than once for this function to succeed. Reference to the previously retrieved part mapping can be dropped using pmemset_part_map_drop(3) function.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_remove_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_remove_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_remove_range() - removes mapped parts overlapping with the provided range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; int pmemset_remove_range(struct pmemset *set, void *addr, size_t len); DESCRIPTION pmemset_remove_range() - removes and unmaps existing parts that were mapped to the set, overlapping with virtual memory range described by the addr and len variables. The part mappings residing at the provided range can&amp;rsquo;t be referenced by any of the threads for this function to succeed.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_set_contiguous_part_coalescing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_set_contiguous_part_coalescing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_set_contiguous_part_coalescing() - set part coalescing feature in the pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; enum pmemset_coalescing; struct pmemset; int pmemset_set_contiguous_part_coalescing(struct pmemset *set, enum pmemset_coalescing value); DESCRIPTION The pmemset_set_contiguous_part_coalescing() sets part coalescing feature flag in pmemset to the provided value. The possible values are PMEMSET_COALESCING_NONE, PMEMSET_COALESCING_OPPORTUNISTIC and PMEMSET_COALESCING_FULL.
When part coalescing is enabled, the pmemset_part_map(3) function will try to coalesce each new mapped part with the previously mapped part, that means it will try to map the part directly after the previous mapping.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_source_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_source_delete.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_source_delete() - delete an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_source; int pmemset_source_delete(struct pmemset_source **src); DESCRIPTION The pmemset_source_delete() function frees the data source obtained using either pmemset_source_from_file(3) or pmemset_source_from_pmem2(3) function. The user-provided variable pointed by *src is set to NULL. If *src is NULL, no operation is performed.
RETURN VALUE The pmemset_source_delete() function always returns 0.
SEE ALSO pmemset_source_from_file(3), pmemset_source_from_pmem2(3), libpmemset(7) and http://pmem.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_source_from_file.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_source_from_file.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_file()
creates an instance of persistent memory data source SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_file(struct pmemset_source **src, const char *file); int pmemset_xsource_from_file(struct pmemset_source **src, const char *file, unsigned flags); int pmemset_source_delete(struct pmemset_source **src); DESCRIPTION pmemset_source_from_file() function instantiates a new struct pmemset_source* object describing the data source and sets a path to the file in it. pmemset_xsource_from_file() is equivalent to pmemset_source_from_file(), but with additional flags argument that is a bitmask of the following values:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_source_from_pmem2.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_source_from_pmem2.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_pmem2() - creates an instance of persistent set data source
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_pmem2(struct pmemset_source **src, struct pmem2_source *pmem2_src); DESCRIPTION The pmemset_source_from_pmem2() function instantiates a new struct pmemset_source object describing set of data. The pmemset_source is created using pmem2_source from libpmem2(7) library. For more details see pmem2_source(3) man page.
RETURN VALUE The pmemset_source_from_pmem2() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_source_from_temporary.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/libpmemset/pmemset_source_from_temporary.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_temporary()
creates an instance of persistent memory data source SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_temporary(struct pmemset_source **src, const char const char *dir); DESCRIPTION pmemset_source_from_temporary() function instantiates a new struct pmemset_source* object describing the data source and creates a unnamed temporary file in the provided directory dir. The temporary file is always created with mode 0600, and the dir must specify an existing directory name.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/libpmemset.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/libpmemset.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
DEBUGGING
SEE ALSO
NAME libpmemset - provides core functionality any persistent application should reasonably have (EXPERIMENTAL)
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; cc ... -lpmemset -lpmem2 DESCRIPTION libpmemset is still in progress.
DEBUGGING PMEMSET_LOG_LEVEL Value assigned to the PMEMSET_LOG_LEVEL controls the level of log details presented in the debug version of the library, as follows:
0 - This is the default level of logging, when PMEMSET_LOG_LEVEL is not set. No log messages are presented at this level.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_config_new(), pmemset_config_delete() - allocate and free a configuration structure for a pmemset object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_config; int pmemset_config_new(struct pmemset_config **cfg); int pmemset_config_delete(struct pmemset_config **cfg); DESCRIPTION The pmemset_config_new() function instantiates a new (opaque) configuration structure, pmemset_config, which is used to define set parameters for a pmemset_new(3) function, and returns it through the pointer in *cfg.
The pmemset_config_delete() function frees *cfg returned by pmemset_config_new() and sets *cfg to NULL.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_config_set_acceptable_states.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_config_set_acceptable_states.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_config_set_acceptable_states() - set acceptable part states in shutdown data state structure
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_config; int pmemset_config_set_acceptable_states(struct pmemset_config *cfg, uint64_t states); DESCRIPTION The pmemset_config_set_acceptable_states() function sets acceptable part states in config cfg structure, states variable is a bitmask of part states.
Provided states bitmask is compared with the determined part state during the mapping of a new part using pmemset_map(3) function.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_config_set_event_callback.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_config_set_event_callback.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EVENTS
SEE ALSO
NAME pmemset_config_set_event_callback() - set an event callback
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; #define PMEMSET_EVENT_CONTEXT_SIZE (64) struct pmemset_event_context { enum pmemset_event type; union { char _data[PMEMSET_EVENT_CONTEXT_SIZE]; struct pmemset_event_copy copy; struct pmemset_event_move move; struct pmemset_event_set set; struct pmemset_event_flush flush; struct pmemset_event_persist persist; struct pmemset_event_remove_range remove_range; struct pmemset_event_part_remove part_remove; struct pmemset_event_part_add part_add; struct pmemset_event_sds_update sds_update; struct pmemset_event_badblock badblock; struct pmemset_event_badblocks_cleared badblocks_cleared; } data; }; typedef int pmemset_event_callback(struct pmemset *set, struct pmemset_event_context *ctx, void *arg); void pmemset_config_set_event_callback(struct pmemset_config *cfg, pmemset_event_callback *callback, void *arg); DESCRIPTION The pmemset_config_set_event_callback() sets an user provided callback in cfg.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_config_set_required_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_config_set_required_store_granularity() - set granularity required for pmemset structure.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_config_set_required_store_granularity(struct pmemset_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmemset_config_set_required_store_granularity() sets maximum permitted granularity value g requested for entire pmemset object.
Each part has to have the same effective granularity of mapped parts - detected and initialized during pmemset_map(3). It means that the user cannot use parts with a different effective granularity within one pmemset.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_config_set_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_config_set_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_config_set_reservation() - sets a reservation for entire pmemset to use
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_config; void pmemset_config_set_reservation(struct pmemset_config *config, struct pmem2_vm_reservation *rsv); DESCRIPTION The pmemset_config_set_reservation() function sets a virtual memory reservation for entire pmemset object.
Setting the reservation in pmemset configuration limits the future part mappings to the virtual address space spanned by the provided reservation. Every part mapping is made to the provided reservation, instead of the virtual address space of the process calling pmemset_map(3).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_deep_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_deep_flush() - performs deep flush on the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_deep_flush(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_deep_flush() function forces any changes in the range [ptr, ptr+size) from the set to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_descriptor_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_descriptor_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_descriptor_part_map() - reads the address and size of part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_part_map; struct pmemset_part_descriptor pmemset_descriptor_part_map(struct pmemset_part_map *pmap); DESCRIPTION The pmemset_descriptor_part_map() function reads address and size of the part mapping via pmap parameter pointing to the structure describing part mapping. It can be obtained using the pmemset_first_part_map(3) or the pmemset_next_part_map(3) function.
RETURN VALUE The pmemset_descriptor_part_map() returns a pmemset_part_descriptor struct containing descriptive information abot the part mapping.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_drain.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_drain.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_drain() - drain flushes
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_drain(struct pmemset *set); DESCRIPTION The pmemset_drain() function efficiently draining flushes in the range owned by set. Each program that flushes discontiguous ranges using pmemset_flush(3) should follow up them by calling pmemset_drain() to wait for drain hw buffers. Calling pmemset_drain() also guarantees proper ordering of the flushed stores.
NOTE: For more detailed information about granularity and underlying drain operation please see GRANULARITY section in the libpmem2(7) man page.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_errormsg() - returns last error message
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; const char *pmemset_errormsg(void); DESCRIPTION If an error is detected during the call to a libpmemset(7) function, the application may retrieve an error message describing the reason of the failure from pmemset_errormsg(). The error message buffer is thread-local; errors encountered in one thread do not affect its value in other threads. The buffer is never cleared by any library function; its content is significant only when the return value of the immediately preceding call to a libpmemset(7) function indicated an error.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_first_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_first_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_first_part_map() - reads first mapping from a set pmemset_next_part_map() - reads next mapping from a set
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; void pmemset_first_part_map(struct pmemset *set, struct pmemset_part_map **pmap); void pmemset_next_part_map(struct pmemset *set, struct pmemset_part_map *cur, struct pmemset_part_map **next) DESCRIPTION The pmemset_first_part_map() function reads first mapping from the set. The pmemset_next_part_map() function reads from the set a mapping that succeeds the mapping provided in the cur variable.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_flush() - flushes data from the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_flush(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_flush() function efficiently flushes data from set in the range [ptr, ptr + size]. The pmemset_flush() function automatically decides what is the most appropriate mechanism for flushing stores directly to underlying storage. Based on granularity value of the set and available platform, pmemset_flush() will use system API calls such as msync(), fsync() on Linux, or FlushFileBuffers(), FlushViewOfFile() on Windows to flush data.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_get_store_granularity() - reads effective mappings granularity for pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_get_store_granularity(struct pmemset *set, enum pmem2_granularity *g); DESCRIPTION The pmemset_get_store_granularity() function reads effective granularity of the set object and puts it in the *g;
The set object has to contain at least one mapped part using pmemset_map(3) function, otherwise reading granularity value is pointless and function pmemset_get_store_granularity(3) will fail.
Concept of the granularity is described in libpmem2(7).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_map() - creates a part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_map_config; struct pmemset_part_descriptor; struct pmemset_source; int pmemset_map(struct pmemset *set, struct pmemset_source *src, struct pmemset_map_config *map_cfg, struct pmemset_part_descriptor *desc); DESCRIPTION The pmemset_map() function creates new mapping in the virtual address space of the calling process and adds structure describing this mapping to the pmemset. It requires an address of a pointer to initialized set, created using pmemset_new(3) function and optionally a map configuration provided in the map_cfg parameter.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_map_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_map_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_map_config_new(), pmemset_map_config_delete() - allocate and free a configuration structure for a map object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_map_config; int pmemset_map_config_new(struct pmemset_map_config **map_cfg); int pmemset_map_config_delete(struct pmemset_map_config **map_cfg); DESCRIPTION The pmemset_map_config_new() function instantiates a new (opaque) configuration structure, pmemset_map_config, which can be used to create new map using pmemset_map(3) function, and returns it through the pointer in *map_cfg.
The pmemset_map_config_new() creates a new map config which instantiates a new struct pmemset_map_config* object describing the future mapping.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_map_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_map_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_map_config_set_length() - set length of mapping in the map config.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; void pmemset_config_set_length(struct pmemset_map_config *map_cfg, size_t length); DESCRIPTION The pmemset_config_set_length() function configures the length which will be used for mapping. *map_cfg should be already initialized, please see pmemset_map_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_map_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_map_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_map_config_set_offset() - set offset of mapping in the map config.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_config_set_offset(struct pmemset_map_config *map_cfg, size_t offset); DESCRIPTION The pmemset_map_config_set_offset() sets offset offset for future mapping in the map_cfg structure.
New mapping is created using pmemset_map(3) function and the offset specified in the offset value.
RETURN VALUE The pmemset_config_set_offset() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_memmove.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_memmove.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_memmove(), pmemset_memcpy(), pmemset_pmemset() - performs memmove/memcpy/memset on memory from the pmemset.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; void *pmemset_memmove(struct pmemset *set, void *pmemdest, const void *src, size_t len, unsigned flags); void *pmemset_memcpy(struct pmemset *set, void *pmemdest, const void *src, size_t len, unsigned flags); void *pmemset_memset(struct pmemset *set, void *pmemdest, int c, size_t len, unsigned flags); DESCRIPTION The pmemset_memmove(), pmemset_memcpy() and pmemset_memset() functions provide the same memory copying functionalities as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM2_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_new(), pmemset_delete() - allocate and free a structure for a pmemset object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_config; int pmemset_new(struct pmemset **set, struct pmemset_config *cfg); int pmemset_delete(struct pmemset **set); DESCRIPTION The pmemset_new() function creates a new set by allocating and initializing set structure, pmemset, and returns it through the pointer in *set. Configuration data, passed by the *cfg, is copied into the set structure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_part_map_by_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_part_map_by_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_part_map_by_address() - returns part map object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; int pmemset_part_map_by_address(struct pmemset *set, struct pmemset_part_map **pmap, void *addr); DESCRIPTION The pmemset_part_map_by_address() - returns part_map object from the set. The part_map has to contain address addr.
RETURN VALUE The pmemset_part_map_by_address() function returns 0 on success or a negative error code on failure.
ERRORS The pmemset_part_map_by_address() can fail with the following errors:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_part_map_drop.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_part_map_drop.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_part_map_drop() - drops the reference to the part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_part_map; void pmemset_part_map_drop(struct pmemset_part_map **pmap); DESCRIPTION The pmemset_part_map_drop() function drops the address reference to the part mapping. Address of a pointer to the part mapping object is passed to the function via the pmap pointer. Pointer to the part mapping object can be retrieved using either pmemset_first_part_map(3), pmemset_next_part_map(3) or pmemset_part_map_by_address(3) functions.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemset_perror() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; void pmemset_perror(const char *format, ...); DESCRIPTION The pmemset_perror() function produces a message on standard error stream describing the last error encountered during library call.
pmemset_perror() takes a variable number of arguments. First, the argument string format is printed - similarly to the printf(3), followed by a colon and a blank. Then an error message retrieved from the pmemset_errormsg(), and a new-line.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_persist() - persist data from the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_persist(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_persist() function efficiently persists data from set in the range [ptr, ptr + size]. It works on either persistent memory or a memory mapped file on traditional storage. The pmemset_persist() function is combination of pmemset_flush(3) and pmemset_drain(3) functions and can be used interchangeably:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_remove_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_remove_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_remove_part_map() - removes part mapping from the pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; int pmemset_remove_part_map(struct pmemset *set, struct pmemset_part_map **pmap_ptr); DESCRIPTION The pmemset_remove_part_map() function removes provided part mapping from the pmemset. Mapping to be removed can be retrieved using either pmemset_first_part_map(3), pmemset_next_part_map(3) or pmemset_part_map_by_address(3) functions. Provided part mapping can&amp;rsquo;t be referenced more than once for this function to succeed. Reference to the previously retrieved part mapping can be dropped using pmemset_part_map_drop(3) function.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_remove_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_remove_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_remove_range() - removes mapped parts overlapping with the provided range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; int pmemset_remove_range(struct pmemset *set, void *addr, size_t len); DESCRIPTION pmemset_remove_range() - removes and unmaps existing parts that were mapped to the set, overlapping with virtual memory range described by the addr and len variables. The part mappings residing at the provided range can&amp;rsquo;t be referenced by any of the threads for this function to succeed.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_set_contiguous_part_coalescing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_set_contiguous_part_coalescing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_set_contiguous_part_coalescing() - set part coalescing feature in the pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; enum pmemset_coalescing; struct pmemset; int pmemset_set_contiguous_part_coalescing(struct pmemset *set, enum pmemset_coalescing value); DESCRIPTION The pmemset_set_contiguous_part_coalescing() sets part coalescing feature flag in pmemset to the provided value. The possible values are PMEMSET_COALESCING_NONE, PMEMSET_COALESCING_OPPORTUNISTIC and PMEMSET_COALESCING_FULL.
When part coalescing is enabled, the pmemset_map(3) function will try to coalesce each new mapped part with the previously mapped part, that means it will try to map the part directly after the previous mapping.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_source; int pmemset_source_alignment(struct pmemset_source *src, size_t *alignment); DESCRIPTION The pmemset_source_alignment() function retrieves the alignment of offset and length needed for pmemset_map(3) to succeed. The alignment is stored in *alignment argument.
RETURN VALUE The pmemset_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_delete.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_source_delete() - delete an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_source; int pmemset_source_delete(struct pmemset_source **src); DESCRIPTION The pmemset_source_delete() function frees the data source obtained using either pmemset_source_from_file(3) or pmemset_source_from_pmem2(3) function. The user-provided variable pointed by *src is set to NULL. If *src is NULL, no operation is performed.
RETURN VALUE The pmemset_source_delete() function always returns 0.
SEE ALSO pmemset_source_from_file(3), pmemset_source_from_pmem2(3), libpmemset(7) and http://pmem.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_from_file.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_from_file.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_file()
creates an instance of persistent memory data source SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_file(struct pmemset_source **src, const char *file); int pmemset_xsource_from_file(struct pmemset_source **src, const char *file, uint64_t flags); int pmemset_source_delete(struct pmemset_source **src); DESCRIPTION pmemset_source_from_file() function instantiates a new struct pmemset_source* object describing the data source and sets a path to the file in it. pmemset_xsource_from_file() is equivalent to pmemset_source_from_file(), but with additional flags argument that is a bitmask of the following values:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_from_pmem2.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_from_pmem2.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_pmem2() - creates an instance of persistent set data source
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_pmem2(struct pmemset_source **src, struct pmem2_source *pmem2_src); DESCRIPTION The pmemset_source_from_pmem2() function instantiates a new struct pmemset_source object describing set of data. The pmemset_source is created using pmem2_source from libpmem2(7) library. For more details see pmem2_source(3) man page.
RETURN VALUE The pmemset_source_from_pmem2() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_from_temporary.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_from_temporary.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_temporary()
creates an instance of persistent memory data source SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_temporary(struct pmemset_source **src, const char const char *dir); DESCRIPTION pmemset_source_from_temporary() function instantiates a new struct pmemset_source* object describing the data source and creates a unnamed temporary file in the provided directory dir. The temporary file is always created with mode 0600, and the dir must specify an existing directory name.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_pread_mcsafe.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_pread_mcsafe.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_pread_mcsafe(), pmemset_source_pwrite_mcsafe() - read source contents or write to the source in a safe manner
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_source; int pmemset_source_pread_mcsafe(struct pmemset_source *src, void *buf, size_t size, size_t offset); int pmemset_source_pwrite_mcsafe(struct pmemset_source *src, void *buf, size_t size, size_t offset); DESCRIPTION The pmemset_source_pread_mcsafe() function reads size bytes from the source src starting at offset offset into the buffer buf. The pmemset_source_pwrite_mcsafe() function writes size bytes from the buffer buf to the source src starting at the offset offset.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_set_sds.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/libpmemset/pmemset_source_set_sds.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_set_sds() - store SDS parameter in the source structure
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; #define PMEMSET_SDS_DEVICE_ID_LEN ((size_t)512ULL) PMEMSET_SDS_INITIALIZE() struct pmemset_sds { char id[PMEMSET_SDS_DEVICE_ID_LEN + 1]; uint64_t usc; int refcount; }; enum pmemset_part_state { PMEMSET_PART_STATE_INDETERMINATE = (1 &amp;lt;&amp;lt; 0), PMEMSET_PART_STATE_OK = (1 &amp;lt;&amp;lt; 1), PMEMSET_PART_STATE_OK_BUT_INTERRUPTED = (1 &amp;lt;&amp;lt; 2), PMEMSET_PART_STATE_CORRUPTED = (1 &amp;lt;&amp;lt; 3), }; struct pmemset_source; int pmemset_source_set_sds(struct pmemset_source *src, struct pmemset_sds *sds, enum pmemset_part_state *state_ptr); DESCRIPTION The pmemset_source_set_sds() stores SDS parameter sds in the source src structure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/libpmemset.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/libpmemset.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
DEBUGGING
SEE ALSO
NAME libpmemset - provides core functionality any persistent application should reasonably have (EXPERIMENTAL)
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; cc ... -lpmemset -lpmem2 DESCRIPTION libpmemset is still in progress.
DEBUGGING PMEMSET_LOG_LEVEL Value assigned to the PMEMSET_LOG_LEVEL controls the level of log details presented in the debug version of the library, as follows:
0 - This is the default level of logging, when PMEMSET_LOG_LEVEL is not set. No log messages are presented at this level.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_config_new(), pmemset_config_delete() - allocate and free a configuration structure for a pmemset object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_config; int pmemset_config_new(struct pmemset_config **cfg); int pmemset_config_delete(struct pmemset_config **cfg); DESCRIPTION The pmemset_config_new() function instantiates a new (opaque) configuration structure, pmemset_config, which is used to define set parameters for a pmemset_new(3) function, and returns it through the pointer in *cfg.
The pmemset_config_delete() function frees *cfg returned by pmemset_config_new() and sets *cfg to NULL.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_config_set_event_callback.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_config_set_event_callback.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EVENTS
SEE ALSO
NAME pmemset_config_set_event_callback() - set an event callback
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; #define PMEMSET_EVENT_CONTEXT_SIZE (64) struct pmemset_event_context { enum pmemset_event type; union { char _data[PMEMSET_EVENT_CONTEXT_SIZE]; struct pmemset_event_copy copy; struct pmemset_event_move move; struct pmemset_event_set set; struct pmemset_event_flush flush; struct pmemset_event_drain drain; struct pmemset_event_persist persist; struct pmemset_event_bad_block bad_block; struct pmemset_event_part_remove part_remove; struct pmemset_event_part_add part_add; } data; }; typedef int pmemset_event_callback(struct pmemset *set, struct pmemset_event_context *ctx, void *arg); void pmemset_config_set_event_callback(struct pmemset_config *cfg, pmemset_event_callback *callback, void *arg); DESCRIPTION The pmemset_config_set_event_callback() sets an user provided callback in cfg.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_config_set_required_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_config_set_required_store_granularity() - set granularity required for pmemset structure.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_config_set_required_store_granularity(struct pmemset_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmemset_config_set_required_store_granularity() sets maximum permitted granularity value g requested for entire pmemset object.
Each part has to have the same effective granularity of mapped parts - detected and initialized during pmemset_part_map(3). It means that the user cannot use parts with a different effective granularity within one pmemset.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_config_set_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_config_set_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_config_set_reservation() - sets a reservation for entire pmemset to use
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_config; void pmemset_config_set_reservation(struct pmemset_config *config, struct pmem2_vm_reservation *rsv); DESCRIPTION The pmemset_config_set_reservation() function sets a virtual memory reservation for entire pmemset object.
Setting the reservation in pmemset configuration limits the future part mappings to the virtual address space spanned by the provided reservation. Every part mapping is made to the provided reservation, instead of the virtual address space of the process calling pmemset_part_map(3).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_deep_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_deep_flush() - performs deep flush on the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_deep_flush(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_deep_flush() function forces any changes in the range [ptr, ptr+size) from the set to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_descriptor_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_descriptor_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_descriptor_part_map() - reads the address and size of part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_part_map; struct pmemset_part_descriptor pmemset_descriptor_part_map(struct pmemset_part_map *pmap); DESCRIPTION The pmemset_descriptor_part_map() function reads address and size of the part mapping via pmap parameter pointing to the structure describing part mapping. It can be obtained using the pmemset_first_part_map(3) or the pmemset_next_part_map(3) function.
RETURN VALUE The pmemset_descriptor_part_map() returns a pmemset_part_descriptor struct containing descriptive information abot the part mapping.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_drain.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_drain.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_drain() - drain flushes
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_drain(struct pmemset *set); DESCRIPTION The pmemset_drain() function efficiently draining flushes in the range owned by set. Each program that flushes discontiguous ranges using pmemset_flush(3) should follow up them by calling pmemset_drain() to wait for drain hw buffers. Calling pmemset_drain() also guarantees proper ordering of the flushed stores.
NOTE: For more detailed information about granularity and underlying drain operation please see GRANULARITY section in the libpmem2(7) man page.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_errormsgU()/pmemset_errormsgW() - returns last error message
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; const char *pmemset_errormsgU(void); const wchar_t *pmemset_errormsgW(void); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION If an error is detected during the call to a libpmemset(7) function, the application may retrieve an error message describing the reason of the failure from pmemset_errormsgU()/pmemset_errormsgW().</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_first_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_first_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_first_part_map() - reads first mapping from a set pmemset_next_part_map() - reads next mapping from a set
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; void pmemset_first_part_map(struct pmemset *set, struct pmemset_part_map **pmap); void pmemset_next_part_map(struct pmemset *set, struct pmemset_part_map *cur, struct pmemset_part_map **next) DESCRIPTION The pmemset_first_part_map() function reads first mapping from the set. The pmemset_next_part_map() function reads from the set a mapping that succeeds the mapping provided in the cur variable.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_flush() - flushes data from the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_flush(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_flush() function efficiently flushes data from set in the range [ptr, ptr + size]. The pmemset_flush() function automatically decides what is the most appropriate mechanism for flushing stores directly to underlying storage. Based on granularity value of the set and available platform, pmemset_flush() will use system API calls such as msync(), fsync() on Linux, or FlushFileBuffers(), FlushViewOfFile() on Windows to flush data.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_get_store_granularity() - reads effective mappings granularity for pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_get_store_granularity(struct pmemset *set, enum pmem2_granularity *g); DESCRIPTION The pmemset_get_store_granularity() function reads effective granularity of the set object and puts it in the *g;
The set object has to contain at least one mapped part using pmemset_part_map(3) function, otherwise reading granularity value is pointless and function pmemset_get_store_granularity(3) will fail.
Concept of the granularity is described in libpmem2(7).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_memmove.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_memmove.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_memmove(), pmemset_memcpy(), pmemset_pmemset() - performs memmove/memcpy/memset on memory from the pmemset.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; void *pmemset_memmove(struct pmemset *set, void *pmemdest, const void *src, size_t len, unsigned flags); void *pmemset_memcpy(struct pmemset *set, void *pmemdest, const void *src, size_t len, unsigned flags); void *pmemset_memset(struct pmemset *set, void *pmemdest, int c, size_t len, unsigned flags); DESCRIPTION The pmemset_memmove(), pmemset_memcpy() and pmemset_memset() functions provide the same memory copying functionalities as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM2_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_new(), pmemset_delete() - allocate and free a structure for a pmemset object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_config; int pmemset_new(struct pmemset **set, struct pmemset_config *cfg); int pmemset_delete(struct pmemset **set); DESCRIPTION The pmemset_new() function creates a new set by allocating and initializing set structure, pmemset, and returns it through the pointer in *set. Configuration data, passed by the *cfg, is copied into the set structure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_part_map() - creates a part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_extras; struct pmemset_part; struct pmemset_part_descriptor; struct pmemset_source; int pmemset_part_map(struct pmemset_part **part_ptr, struct pmemset_extras *extra, struct pmemset_part_descriptor *desc); DESCRIPTION The pmemset_part_map() function creates new part mapping in the virtual address space of the calling process and adds structure describing this mapping to the pmemset. It requires an address of a pointer to initialized part provided in the part_ptr parameter.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_part_map_by_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_part_map_by_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_part_map_by_address() - returns part map object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; int pmemset_part_map_by_address(struct pmemset *set, struct pmemset_part_map **pmap, void *addr); DESCRIPTION The pmemset_part_map_by_address() - returns part_map object from the set. The part_map has to contain address addr.
RETURN VALUE The pmemset_part_map_by_address() function returns 0 on success or a negative error code on failure.
ERRORS The pmemset_part_new() can fail with the following errors:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_part_map_drop.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_part_map_drop.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_part_map_drop() - drops the reference to the part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_part_map; void pmemset_part_map_drop(struct pmemset_part_map **pmap); DESCRIPTION The pmemset_part_map_drop() function drops the address reference to the part mapping. Address of a pointer to the part mapping object is passed to the function via the pmap pointer. Pointer to the part mapping object can be retrieved using either pmemset_first_part_map(3), pmemset_next_part_map(3) or pmemset_part_map_by_address(3) functions.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_part_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_part_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_part_new(), pmemset_part_delete() - create and delete structure for a part object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part; struct pmemset_source; int pmemset_part_new(struct pmemset_part **part, struct pmemset *set, struct pmemset_source *src, size_t offset, size_t length); int pmemset_part_delete(struct pmemset_part **part); DESCRIPTION The pmemset_part_new() creates new part based on the set specified in the *set pointer. This function requires a data source source.
For the operation to succeed the src structure must be created from a valid data source.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemset_perrorU()/pmemset_perrorW() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; void pmemset_perrorU(const char *format, ...); void pmemset_perrorW(const wchar_t *format, ...); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmemset_perrorU()/pmemset_perrorW() function produces a message on standard error stream describing the last error encountered during library call.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_persist() - persist data from the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_persist(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_persist() function efficiently persists data from set in the range [ptr, ptr + size]. It works on either persistent memory or a memory mapped file on traditional storage. The pmemset_persist() function is combination of pmemset_flush(3) and pmemset_drain(3) functions and can be used interchangeably:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_remove_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_remove_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_remove_part_map() - removes part mapping from the pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; int pmemset_remove_part_map(struct pmemset *set, struct pmemset_part_map **pmap_ptr); DESCRIPTION The pmemset_remove_part_map() function removes provided part mapping from the pmemset. Mapping to be removed can be retrieved using either pmemset_first_part_map(3), pmemset_next_part_map(3) or pmemset_part_map_by_address(3) functions. Provided part mapping can&amp;rsquo;t be referenced more than once for this function to succeed. Reference to the previously retrieved part mapping can be dropped using pmemset_part_map_drop(3) function.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_remove_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_remove_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_remove_range() - removes mapped parts overlapping with the provided range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; int pmemset_remove_range(struct pmemset *set, void *addr, size_t len); DESCRIPTION pmemset_remove_range() - removes and unmaps existing parts that were mapped to the set, overlapping with virtual memory range described by the addr and len variables. The part mappings residing at the provided range can&amp;rsquo;t be referenced by any of the threads for this function to succeed.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_set_contiguous_part_coalescing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_set_contiguous_part_coalescing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_set_contiguous_part_coalescing() - set part coalescing feature in the pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; enum pmemset_coalescing; struct pmemset; int pmemset_set_contiguous_part_coalescing(struct pmemset *set, enum pmemset_coalescing value); DESCRIPTION The pmemset_set_contiguous_part_coalescing() sets part coalescing feature flag in pmemset to the provided value. The possible values are PMEMSET_COALESCING_NONE, PMEMSET_COALESCING_OPPORTUNISTIC and PMEMSET_COALESCING_FULL.
When part coalescing is enabled, the pmemset_part_map(3) function will try to coalesce each new mapped part with the previously mapped part, that means it will try to map the part directly after the previous mapping.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_source_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_source_delete.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_source_delete() - delete an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_source; int pmemset_source_delete(struct pmemset_source **src); DESCRIPTION The pmemset_source_delete() function frees the data source obtained using either pmemset_source_from_file(3) or pmemset_source_from_pmem2(3) function. The user-provided variable pointed by *src is set to NULL. If *src is NULL, no operation is performed.
RETURN VALUE The pmemset_source_delete() function always returns 0.
SEE ALSO pmemset_source_from_file(3), pmemset_source_from_pmem2(3), libpmemset(7) and http://pmem.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_source_from_file.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_source_from_file.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_fileU()/pmemset_source_from_fileW()
creates an instance of persistent memory data source SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_fileU(struct pmemset_source **src, const char *file); int pmemset_source_from_fileW(struct pmemset_source **src, const wchar_t *file); int pmemset_xsource_from_fileU(struct pmemset_source **src, const char *file, unsigned flags); int pmemset_xsource_from_fileW(struct pmemset_source **src, const wchar_t *file, unsigned flags); int pmemset_source_delete(struct pmemset_source **src); DESCRIPTION pmemset_source_from_fileU()/pmemset_source_from_fileW() function instantiates a new struct pmemset_source* object describing the data source and sets a path to the file in it.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_source_from_pmem2.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_source_from_pmem2.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_pmem2() - creates an instance of persistent set data source
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_pmem2(struct pmemset_source **src, struct pmem2_source *pmem2_src); DESCRIPTION The pmemset_source_from_pmem2() function instantiates a new struct pmemset_source object describing set of data. The pmemset_source is created using pmem2_source from libpmem2(7) library. For more details see pmem2_source(3) man page.
RETURN VALUE The pmemset_source_from_pmem2() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_source_from_temporary.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/libpmemset/pmemset_source_from_temporary.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_temporaryU()/pmemset_source_from_temporaryW()
creates an instance of persistent memory data source SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_temporaryU(struct pmemset_source **src, const char const char *dir); int pmemset_source_from_temporaryW(struct pmemset_source **src, const wchar_t const char *dir); DESCRIPTION pmemset_source_from_temporaryU()/pmemset_source_from_temporaryW() function instantiates a new struct pmemset_source* object describing the data source and creates a unnamed temporary file in the provided directory dir. The temporary file is always created with mode 0600, and the dir must specify an existing directory name.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/libpmemset.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/libpmemset.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
DEBUGGING
SEE ALSO
NAME libpmemset - provides core functionality any persistent application should reasonably have (EXPERIMENTAL)
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; cc ... -lpmemset -lpmem2 DESCRIPTION libpmemset is still in progress.
DEBUGGING PMEMSET_LOG_LEVEL Value assigned to the PMEMSET_LOG_LEVEL controls the level of log details presented in the debug version of the library, as follows:
0 - This is the default level of logging, when PMEMSET_LOG_LEVEL is not set. No log messages are presented at this level.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_config_new(), pmemset_config_delete() - allocate and free a configuration structure for a pmemset object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_config; int pmemset_config_new(struct pmemset_config **cfg); int pmemset_config_delete(struct pmemset_config **cfg); DESCRIPTION The pmemset_config_new() function instantiates a new (opaque) configuration structure, pmemset_config, which is used to define set parameters for a pmemset_new(3) function, and returns it through the pointer in *cfg.
The pmemset_config_delete() function frees *cfg returned by pmemset_config_new() and sets *cfg to NULL.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_config_set_acceptable_states.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_config_set_acceptable_states.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_config_set_acceptable_states() - set acceptable part states in shutdown data state structure
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_config; int pmemset_config_set_acceptable_states(struct pmemset_config *cfg, uint64_t states); DESCRIPTION The pmemset_config_set_acceptable_states() function sets acceptable part states in config cfg structure, states variable is a bitmask of part states.
Provided states bitmask is compared with the determined part state during the mapping of a new part using pmemset_map(3) function.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_config_set_event_callback.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_config_set_event_callback.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
EVENTS
SEE ALSO
NAME pmemset_config_set_event_callback() - set an event callback
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; #define PMEMSET_EVENT_CONTEXT_SIZE (64) struct pmemset_event_context { enum pmemset_event type; union { char _data[PMEMSET_EVENT_CONTEXT_SIZE]; struct pmemset_event_copy copy; struct pmemset_event_move move; struct pmemset_event_set set; struct pmemset_event_flush flush; struct pmemset_event_persist persist; struct pmemset_event_remove_range remove_range; struct pmemset_event_part_remove part_remove; struct pmemset_event_part_add part_add; struct pmemset_event_sds_update sds_update; struct pmemset_event_badblock badblock; struct pmemset_event_badblocks_cleared badblocks_cleared; } data; }; typedef int pmemset_event_callback(struct pmemset *set, struct pmemset_event_context *ctx, void *arg); void pmemset_config_set_event_callback(struct pmemset_config *cfg, pmemset_event_callback *callback, void *arg); DESCRIPTION The pmemset_config_set_event_callback() sets an user provided callback in cfg.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_config_set_required_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_config_set_required_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_config_set_required_store_granularity() - set granularity required for pmemset structure.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_config_set_required_store_granularity(struct pmemset_config *cfg, enum pmem2_granularity g); DESCRIPTION The pmemset_config_set_required_store_granularity() sets maximum permitted granularity value g requested for entire pmemset object.
Each part has to have the same effective granularity of mapped parts - detected and initialized during pmemset_map(3). It means that the user cannot use parts with a different effective granularity within one pmemset.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_config_set_reservation.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_config_set_reservation.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_config_set_reservation() - sets a reservation for entire pmemset to use
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_config; void pmemset_config_set_reservation(struct pmemset_config *config, struct pmem2_vm_reservation *rsv); DESCRIPTION The pmemset_config_set_reservation() function sets a virtual memory reservation for entire pmemset object.
Setting the reservation in pmemset configuration limits the future part mappings to the virtual address space spanned by the provided reservation. Every part mapping is made to the provided reservation, instead of the virtual address space of the process calling pmemset_map(3).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_deep_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_deep_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_deep_flush() - performs deep flush on the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_deep_flush(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_deep_flush() function forces any changes in the range [ptr, ptr+size) from the set to be stored durably in the most reliable persistence domain available to software. In particular, on supported platforms, this enables the code not to rely on automatic cache or WPQ (write pending queue) flush on power failure (ADR/eADR).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_descriptor_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_descriptor_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_descriptor_part_map() - reads the address and size of part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_part_map; struct pmemset_part_descriptor pmemset_descriptor_part_map(struct pmemset_part_map *pmap); DESCRIPTION The pmemset_descriptor_part_map() function reads address and size of the part mapping via pmap parameter pointing to the structure describing part mapping. It can be obtained using the pmemset_first_part_map(3) or the pmemset_next_part_map(3) function.
RETURN VALUE The pmemset_descriptor_part_map() returns a pmemset_part_descriptor struct containing descriptive information abot the part mapping.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_drain.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_drain.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_drain() - drain flushes
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_drain(struct pmemset *set); DESCRIPTION The pmemset_drain() function efficiently draining flushes in the range owned by set. Each program that flushes discontiguous ranges using pmemset_flush(3) should follow up them by calling pmemset_drain() to wait for drain hw buffers. Calling pmemset_drain() also guarantees proper ordering of the flushed stores.
NOTE: For more detailed information about granularity and underlying drain operation please see GRANULARITY section in the libpmem2(7) man page.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_errormsg.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_errormsg.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_errormsgU()/pmemset_errormsgW() - returns last error message
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; const char *pmemset_errormsgU(void); const wchar_t *pmemset_errormsgW(void); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION If an error is detected during the call to a libpmemset(7) function, the application may retrieve an error message describing the reason of the failure from pmemset_errormsgU()/pmemset_errormsgW().</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_first_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_first_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_first_part_map() - reads first mapping from a set pmemset_next_part_map() - reads next mapping from a set
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; void pmemset_first_part_map(struct pmemset *set, struct pmemset_part_map **pmap); void pmemset_next_part_map(struct pmemset *set, struct pmemset_part_map *cur, struct pmemset_part_map **next) DESCRIPTION The pmemset_first_part_map() function reads first mapping from the set. The pmemset_next_part_map() function reads from the set a mapping that succeeds the mapping provided in the cur variable.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_flush.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_flush.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_flush() - flushes data from the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_flush(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_flush() function efficiently flushes data from set in the range [ptr, ptr + size]. The pmemset_flush() function automatically decides what is the most appropriate mechanism for flushing stores directly to underlying storage. Based on granularity value of the set and available platform, pmemset_flush() will use system API calls such as msync(), fsync() on Linux, or FlushFileBuffers(), FlushViewOfFile() on Windows to flush data.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_get_store_granularity.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_get_store_granularity.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_get_store_granularity() - reads effective mappings granularity for pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_get_store_granularity(struct pmemset *set, enum pmem2_granularity *g); DESCRIPTION The pmemset_get_store_granularity() function reads effective granularity of the set object and puts it in the *g;
The set object has to contain at least one mapped part using pmemset_map(3) function, otherwise reading granularity value is pointless and function pmemset_get_store_granularity(3) will fail.
Concept of the granularity is described in libpmem2(7).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_map() - creates a part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_map_config; struct pmemset_part_descriptor; struct pmemset_source; int pmemset_map(struct pmemset *set, struct pmemset_source *src, struct pmemset_map_config *map_cfg, struct pmemset_part_descriptor *desc); DESCRIPTION The pmemset_map() function creates new mapping in the virtual address space of the calling process and adds structure describing this mapping to the pmemset. It requires an address of a pointer to initialized set, created using pmemset_new(3) function and optionally a map configuration provided in the map_cfg parameter.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_map_config_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_map_config_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_map_config_new(), pmemset_map_config_delete() - allocate and free a configuration structure for a map object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_map_config; int pmemset_map_config_new(struct pmemset_map_config **map_cfg); int pmemset_map_config_delete(struct pmemset_map_config **map_cfg); DESCRIPTION The pmemset_map_config_new() function instantiates a new (opaque) configuration structure, pmemset_map_config, which can be used to create new map using pmemset_map(3) function, and returns it through the pointer in *map_cfg.
The pmemset_map_config_new() creates a new map config which instantiates a new struct pmemset_map_config* object describing the future mapping.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_map_config_set_length.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_map_config_set_length.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_map_config_set_length() - set length of mapping in the map config.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; void pmemset_config_set_length(struct pmemset_map_config *map_cfg, size_t length); DESCRIPTION The pmemset_config_set_length() function configures the length which will be used for mapping. *map_cfg should be already initialized, please see pmemset_map_config_new(3) for details. The \length must be a multiple of the alignment required for the data source which will be used for mapping alongside the config.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_map_config_set_offset.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_map_config_set_offset.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_map_config_set_offset() - set offset of mapping in the map config.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_config_set_offset(struct pmemset_map_config *map_cfg, size_t offset); DESCRIPTION The pmemset_map_config_set_offset() sets offset offset for future mapping in the map_cfg structure.
New mapping is created using pmemset_map(3) function and the offset specified in the offset value.
RETURN VALUE The pmemset_config_set_offset() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_memmove.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_memmove.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_memmove(), pmemset_memcpy(), pmemset_pmemset() - performs memmove/memcpy/memset on memory from the pmemset.
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; void *pmemset_memmove(struct pmemset *set, void *pmemdest, const void *src, size_t len, unsigned flags); void *pmemset_memcpy(struct pmemset *set, void *pmemdest, const void *src, size_t len, unsigned flags); void *pmemset_memset(struct pmemset *set, void *pmemdest, int c, size_t len, unsigned flags); DESCRIPTION The pmemset_memmove(), pmemset_memcpy() and pmemset_memset() functions provide the same memory copying functionalities as their namesakes memmove(3), memcpy(3) and memset(3), and ensure that the result has been flushed to persistence before returning (unless PMEM2_F_MEM_NOFLUSH flag was used).</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_new.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_new.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_new(), pmemset_delete() - allocate and free a structure for a pmemset object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_config; int pmemset_new(struct pmemset **set, struct pmemset_config *cfg); int pmemset_delete(struct pmemset **set); DESCRIPTION The pmemset_new() function creates a new set by allocating and initializing set structure, pmemset, and returns it through the pointer in *set. Configuration data, passed by the *cfg, is copied into the set structure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_part_map_by_address.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_part_map_by_address.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_part_map_by_address() - returns part map object
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; int pmemset_part_map_by_address(struct pmemset *set, struct pmemset_part_map **pmap, void *addr); DESCRIPTION The pmemset_part_map_by_address() - returns part_map object from the set. The part_map has to contain address addr.
RETURN VALUE The pmemset_part_map_by_address() function returns 0 on success or a negative error code on failure.
ERRORS The pmemset_part_map_by_address() can fail with the following errors:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_part_map_drop.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_part_map_drop.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_part_map_drop() - drops the reference to the part mapping
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_part_map; void pmemset_part_map_drop(struct pmemset_part_map **pmap); DESCRIPTION The pmemset_part_map_drop() function drops the address reference to the part mapping. Address of a pointer to the part mapping object is passed to the function via the pmap pointer. Pointer to the part mapping object can be retrieved using either pmemset_first_part_map(3), pmemset_next_part_map(3) or pmemset_part_map_by_address(3) functions.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_perror.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_perror.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmemset_perrorU()/pmemset_perrorW() - prints a descriptive error message to stderr
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; void pmemset_perrorU(const char *format, ...); void pmemset_perrorW(const wchar_t *format, ...); NOTE: The PMDK API supports UNICODE. If the PMDK_UTF8_API macro is defined, basic API functions are expanded to the UTF-8 API with postfix U. Otherwise they are expanded to the UNICODE API with postfix W.
DESCRIPTION The pmemset_perrorU()/pmemset_perrorW() function produces a message on standard error stream describing the last error encountered during library call.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_persist() - persist data from the range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_persist(struct pmemset *set, const void *ptr, size_t size); DESCRIPTION The pmemset_persist() function efficiently persists data from set in the range [ptr, ptr + size]. It works on either persistent memory or a memory mapped file on traditional storage. The pmemset_persist() function is combination of pmemset_flush(3) and pmemset_drain(3) functions and can be used interchangeably:</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_remove_part_map.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_remove_part_map.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_remove_part_map() - removes part mapping from the pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; struct pmemset_part_map; int pmemset_remove_part_map(struct pmemset *set, struct pmemset_part_map **pmap_ptr); DESCRIPTION The pmemset_remove_part_map() function removes provided part mapping from the pmemset. Mapping to be removed can be retrieved using either pmemset_first_part_map(3), pmemset_next_part_map(3) or pmemset_part_map_by_address(3) functions. Provided part mapping can&amp;rsquo;t be referenced more than once for this function to succeed. Reference to the previously retrieved part mapping can be dropped using pmemset_part_map_drop(3) function.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_remove_range.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_remove_range.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_remove_range() - removes mapped parts overlapping with the provided range
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset; int pmemset_remove_range(struct pmemset *set, void *addr, size_t len); DESCRIPTION pmemset_remove_range() - removes and unmaps existing parts that were mapped to the set, overlapping with virtual memory range described by the addr and len variables. The part mappings residing at the provided range can&amp;rsquo;t be referenced by any of the threads for this function to succeed.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_set_contiguous_part_coalescing.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_set_contiguous_part_coalescing.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_set_contiguous_part_coalescing() - set part coalescing feature in the pmemset
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; enum pmemset_coalescing; struct pmemset; int pmemset_set_contiguous_part_coalescing(struct pmemset *set, enum pmemset_coalescing value); DESCRIPTION The pmemset_set_contiguous_part_coalescing() sets part coalescing feature flag in pmemset to the provided value. The possible values are PMEMSET_COALESCING_NONE, PMEMSET_COALESCING_OPPORTUNISTIC and PMEMSET_COALESCING_FULL.
When part coalescing is enabled, the pmemset_map(3) function will try to coalesce each new mapped part with the previously mapped part, that means it will try to map the part directly after the previous mapping.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_alignment.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_alignment.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_alignment() - returns data source alignment
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_source; int pmemset_source_alignment(struct pmemset_source *src, size_t *alignment); DESCRIPTION The pmemset_source_alignment() function retrieves the alignment of offset and length needed for pmemset_map(3) to succeed. The alignment is stored in *alignment argument.
RETURN VALUE The pmemset_source_alignment() function returns 0 on success. If the function fails, the *alignment variable is left unmodified and a negative error code is returned.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_delete.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_delete.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
SEE ALSO
NAME pmemset_source_delete() - delete an instance of persistent memory data source
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_source; int pmemset_source_delete(struct pmemset_source **src); DESCRIPTION The pmemset_source_delete() function frees the data source obtained using either pmemset_source_from_file(3) or pmemset_source_from_pmem2(3) function. The user-provided variable pointed by *src is set to NULL. If *src is NULL, no operation is performed.
RETURN VALUE The pmemset_source_delete() function always returns 0.
SEE ALSO pmemset_source_from_file(3), pmemset_source_from_pmem2(3), libpmemset(7) and http://pmem.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_from_file.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_from_file.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_fileU()/pmemset_source_from_fileW()
creates an instance of persistent memory data source SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_fileU(struct pmemset_source **src, const char *file); int pmemset_source_from_fileW(struct pmemset_source **src, const wchar_t *file); int pmemset_xsource_from_fileU(struct pmemset_source **src, const char *file, uint64_t flags); int pmemset_xsource_from_fileW(struct pmemset_source **src, const wchar_t *file, uint64_t flags); int pmemset_source_delete(struct pmemset_source **src); DESCRIPTION pmemset_source_from_fileU()/pmemset_source_from_fileW() function instantiates a new struct pmemset_source* object describing the data source and sets a path to the file in it.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_from_pmem2.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_from_pmem2.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_pmem2() - creates an instance of persistent set data source
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_pmem2(struct pmemset_source **src, struct pmem2_source *pmem2_src); DESCRIPTION The pmemset_source_from_pmem2() function instantiates a new struct pmemset_source object describing set of data. The pmemset_source is created using pmem2_source from libpmem2(7) library. For more details see pmem2_source(3) man page.
RETURN VALUE The pmemset_source_from_pmem2() function returns 0 on success or a negative error code on failure.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_from_temporary.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_from_temporary.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_from_temporaryU()/pmemset_source_from_temporaryW()
creates an instance of persistent memory data source SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; int pmemset_source_from_temporaryU(struct pmemset_source **src, const char const char *dir); int pmemset_source_from_temporaryW(struct pmemset_source **src, const wchar_t const char *dir); DESCRIPTION pmemset_source_from_temporaryU()/pmemset_source_from_temporaryW() function instantiates a new struct pmemset_source* object describing the data source and creates a unnamed temporary file in the provided directory dir. The temporary file is always created with mode 0600, and the dir must specify an existing directory name.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_pread_mcsafe.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_pread_mcsafe.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_pread_mcsafe(), pmemset_source_pwrite_mcsafe() - read source contents or write to the source in a safe manner
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; struct pmemset_source; int pmemset_source_pread_mcsafe(struct pmemset_source *src, void *buf, size_t size, size_t offset); int pmemset_source_pwrite_mcsafe(struct pmemset_source *src, void *buf, size_t size, size_t offset); DESCRIPTION The pmemset_source_pread_mcsafe() function reads size bytes from the source src starting at offset offset into the buffer buf. The pmemset_source_pwrite_mcsafe() function writes size bytes from the buffer buf to the source src starting at the offset offset.</description></item><item><title>libpmemset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_set_sds.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/libpmemset/pmemset_source_set_sds.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
ERRORS
SEE ALSO
NAME pmemset_source_set_sds() - store SDS parameter in the source structure
SYNOPSIS #include &amp;lt;libpmemset.h&amp;gt; #define PMEMSET_SDS_DEVICE_ID_LEN ((size_t)512ULL) PMEMSET_SDS_INITIALIZE() struct pmemset_sds { char id[PMEMSET_SDS_DEVICE_ID_LEN + 1]; uint64_t usc; int refcount; }; enum pmemset_part_state { PMEMSET_PART_STATE_INDETERMINATE = (1 &amp;lt;&amp;lt; 0), PMEMSET_PART_STATE_OK = (1 &amp;lt;&amp;lt; 1), PMEMSET_PART_STATE_OK_BUT_INTERRUPTED = (1 &amp;lt;&amp;lt; 2), PMEMSET_PART_STATE_CORRUPTED = (1 &amp;lt;&amp;lt; 3), }; struct pmemset_source; int pmemset_source_set_sds(struct pmemset_source *src, struct pmemset_sds *sds, enum pmemset_part_state *state_ptr); DESCRIPTION The pmemset_source_set_sds() stores SDS parameter sds in the source src structure.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/librpmem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/librpmem/</guid><description>Discontinuation of the project The librpmem library will no longer be maintained by Intel.
Intel has ceased development and contributions including, but not limited to, maintenance, bug fixes, new releases, or updates, to this project. Intel no longer accepts patches to this project. If you have an ongoing need to use this project, are interested in independently developing it, or would like to maintain patches for the open source software community, please create your own fork of this project.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/librpmem/librpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/librpmem/librpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
TARGET NODE ADDRESS FORMAT
REMOTE POOL ATTRIBUTES
SSH
FORK
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME librpmem - remote persistent memory support library (EXPERIMENTAL)
SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; cc ... -lrpmem Library API versioning: const char *rpmem_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *rpmem_errormsg(void); Other library functions: A description of other librpmem functions can be found on the following manual pages:</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/librpmem/rpmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/librpmem/rpmem_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME rpmem_create(), rpmem_open(), rpmem_set_attr(), rpmem_close(), rpmem_remove()
most commonly used functions for remote access to persistent memory SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; RPMEMpool *rpmem_create(const char *target, const char *pool_set_name, void *pool_addr, size_t pool_size, unsigned *nlanes, const struct rpmem_pool_attr *create_attr); RPMEMpool *rpmem_open(const char *target, const char *pool_set_name, void *pool_addr, size_t pool_size, unsigned *nlanes, struct rpmem_pool_attr *open_attr); int rpmem_set_attr(RPMEMpool *rpp, const struct rpmem_pool_attr *attr); int rpmem_close(RPMEMpool *rpp); int rpmem_remove(const char *target, const char *pool_set_name, int flags); DESCRIPTION The rpmem_create() function creates a remote pool on a given target node, using pool set file pool_set_name to map the remote pool.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/librpmem/rpmem_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/librpmem/rpmem_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME rpmem_persist(), rpmem_deep_persist(), rpmem_flush(), rpmem_drain(), rpmem_read()
functions to copy and read remote pools SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; int rpmem_persist(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane, unsigned flags); int rpmem_deep_persist(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane); int rpmem_flush(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane, unsigned flags); int rpmem_drain(RPMEMpool *rpp, unsigned lane, unsigned flags); int rpmem_read(RPMEMpool *rpp, void *buff, size_t offset, size_t length, unsigned lane); DESCRIPTION The rpmem_persist() function copies data of given length at given offset from the associated local memory pool and makes sure the data is persistent on the remote node before the function returns.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/librpmem/librpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/librpmem/librpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
TARGET NODE ADDRESS FORMAT
REMOTE POOL ATTRIBUTES
SSH
FORK
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME librpmem - remote persistent memory support library (EXPERIMENTAL)
SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; cc ... -lrpmem Library API versioning: const char *rpmem_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *rpmem_errormsg(void); Other library functions: A description of other librpmem functions can be found on the following manual pages:</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/librpmem/rpmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/librpmem/rpmem_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME rpmem_create(), rpmem_open(), rpmem_set_attr(), rpmem_close(), rpmem_remove()
most commonly used functions for remote access to persistent memory SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; RPMEMpool *rpmem_create(const char *target, const char *pool_set_name, void *pool_addr, size_t pool_size, unsigned *nlanes, const struct rpmem_pool_attr *create_attr); RPMEMpool *rpmem_open(const char *target, const char *pool_set_name, void *pool_addr, size_t pool_size, unsigned *nlanes, struct rpmem_pool_attr *open_attr); int rpmem_set_attr(RPMEMpool *rpp, const struct rpmem_pool_attr *attr); int rpmem_close(RPMEMpool *rpp); int rpmem_remove(const char *target, const char *pool_set_name, int flags); DESCRIPTION The rpmem_create() function creates a remote pool on a given target node, using pool set file pool_set_name to map the remote pool.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/librpmem/rpmem_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/librpmem/rpmem_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME rpmem_persist(), rpmem_deep_persist(), rpmem_flush(), rpmem_drain(), rpmem_read()
functions to copy and read remote pools SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; int rpmem_persist(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane, unsigned flags); int rpmem_deep_persist(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane); int rpmem_flush(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane, unsigned flags); int rpmem_drain(RPMEMpool *rpp, unsigned lane, unsigned flags); int rpmem_read(RPMEMpool *rpp, void *buff, size_t offset, size_t length, unsigned lane); DESCRIPTION The rpmem_persist() function copies data of given length at given offset from the associated local memory pool and makes sure the data is persistent on the remote node before the function returns.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/librpmem/librpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/librpmem/librpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
TARGET NODE ADDRESS FORMAT
REMOTE POOL ATTRIBUTES
SSH
FORK
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME librpmem - remote persistent memory support library (DEPRECATED)
SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; cc ... -lrpmem Library API versioning: const char *rpmem_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *rpmem_errormsg(void); Other library functions: A description of other librpmem functions can be found on the following manual pages:</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/librpmem/rpmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/librpmem/rpmem_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME rpmem_create()(DEPRECATED), rpmem_open()(DEPRECATED), rpmem_set_attr()(DEPRECATED), rpmem_close()(DEPRECATED), rpmem_remove()(DEPRECATED),
most commonly used functions for remote access to persistent memory SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; RPMEMpool *rpmem_create(const char *target, const char *pool_set_name, void *pool_addr, size_t pool_size, unsigned *nlanes, const struct rpmem_pool_attr *create_attr); RPMEMpool *rpmem_open(const char *target, const char *pool_set_name, void *pool_addr, size_t pool_size, unsigned *nlanes, struct rpmem_pool_attr *open_attr); int rpmem_set_attr(RPMEMpool *rpp, const struct rpmem_pool_attr *attr); int rpmem_close(RPMEMpool *rpp); int rpmem_remove(const char *target, const char *pool_set_name, int flags); DESCRIPTION The rpmem_create() function creates a remote pool on a given target node, using pool set file pool_set_name to map the remote pool.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/librpmem/rpmem_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/librpmem/rpmem_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME rpmem_persist()(DEPRECATED), rpmem_deep_persist()(DEPRECATED), rpmem_flush()(DEPRECATED), rpmem_drain()(DEPRECATED), rpmem_read()(DEPRECATED) - functions to copy and read remote pools
SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; int rpmem_persist(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane, unsigned flags); int rpmem_deep_persist(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane); int rpmem_flush(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane, unsigned flags); int rpmem_drain(RPMEMpool *rpp, unsigned lane, unsigned flags); int rpmem_read(RPMEMpool *rpp, void *buff, size_t offset, size_t length, unsigned lane); DESCRIPTION The rpmem_persist() function copies data of given length at given offset from the associated local memory pool and makes sure the data is persistent on the remote node before the function returns.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/librpmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/librpmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/librpmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/librpmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/librpmem/librpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/librpmem/librpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/librpmem/rpmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/librpmem/rpmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/librpmem/rpmem_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/librpmem/rpmem_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/librpmem/librpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/librpmem/librpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/librpmem/rpmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/librpmem/rpmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/librpmem/rpmem_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/librpmem/rpmem_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/librpmem/librpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/librpmem/librpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/librpmem/rpmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/librpmem/rpmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/librpmem/rpmem_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/librpmem/rpmem_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/librpmem/librpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/librpmem/librpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/librpmem/rpmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/librpmem/rpmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/librpmem/rpmem_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/librpmem/rpmem_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/librpmem/librpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/librpmem/librpmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/librpmem/rpmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/librpmem/rpmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/librpmem/rpmem_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/librpmem/rpmem_persist.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/librpmem/librpmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/librpmem/librpmem.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
TARGET NODE ADDRESS FORMAT
REMOTE POOL ATTRIBUTES
SSH
FORK
CAVEATS
LIBRARY API VERSIONING
ENVIRONMENT
DEBUGGING AND ERROR HANDLING
EXAMPLE
ACKNOWLEDGEMENTS
SEE ALSO
NAME librpmem - remote persistent memory support library (EXPERIMENTAL)
SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; cc ... -lrpmem Library API versioning: const char *rpmem_check_version( unsigned major_required, unsigned minor_required); Error handling: const char *rpmem_errormsg(void); Other library functions: A description of other librpmem functions can be found on the following manual pages:</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/librpmem/rpmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/librpmem/rpmem_create.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
NOTES
SEE ALSO
NAME rpmem_create(), rpmem_open(), rpmem_set_attr(), rpmem_close(), rpmem_remove()
most commonly used functions for remote access to persistent memory SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; RPMEMpool *rpmem_create(const char *target, const char *pool_set_name, void *pool_addr, size_t pool_size, unsigned *nlanes, const struct rpmem_pool_attr *create_attr); RPMEMpool *rpmem_open(const char *target, const char *pool_set_name, void *pool_addr, size_t pool_size, unsigned *nlanes, struct rpmem_pool_attr *open_attr); int rpmem_set_attr(RPMEMpool *rpp, const struct rpmem_pool_attr *attr); int rpmem_close(RPMEMpool *rpp); int rpmem_remove(const char *target, const char *pool_set_name, int flags); DESCRIPTION The rpmem_create() function creates a remote pool on a given target node, using pool set file pool_set_name to map the remote pool.</description></item><item><title>librpmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/librpmem/rpmem_persist.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/librpmem/rpmem_persist.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RETURN VALUE
CAVEATS
SEE ALSO
NAME rpmem_persist(), rpmem_deep_persist(), rpmem_flush(), rpmem_drain(), rpmem_read()
functions to copy and read remote pools SYNOPSIS #include &amp;lt;librpmem.h&amp;gt; int rpmem_persist(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane, unsigned flags); int rpmem_deep_persist(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane); int rpmem_flush(RPMEMpool *rpp, size_t offset, size_t length, unsigned lane, unsigned flags); int rpmem_drain(RPMEMpool *rpp, unsigned lane, unsigned flags); int rpmem_read(RPMEMpool *rpp, void *buff, size_t offset, size_t length, unsigned lane); DESCRIPTION The rpmem_persist() function copies data of given length at given offset from the associated local memory pool and makes sure the data is persistent on the remote node before the function returns.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/vmem/libvmem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/vmem/libvmem/</guid><description>Discontinuation of the project The libvmem project will no longer be maintained by Intel.
Intel has ceased development and contributions including, but not limited to, maintenance, bug fixes, new releases, or updates, to this project. Intel no longer accepts patches to this project. If you have an ongoing need to use this project, are interested in independently developing it, or would like to maintain patches for the open source software community, please create your own fork of this project.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/libvmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/libvmem.3/</guid><description>NAME libvmem - volatile memory allocation library
SYNOPSIS #include &amp;lt;libvmem.h&amp;gt; cc ... -lvmem Memory pool management: VMEM *vmem_create(const char *dir, size_t size); VMEM *vmem_create_in_region(void *addr, size_t size); void vmem_delete(VMEM *vmp); int vmem_check(VMEM *vmp); void vmem_stats_print(VMEM *vmp, const char *opts); Memory allocation related functions: void *vmem_malloc(VMEM *vmp, size_t size); void vmem_free(VMEM *vmp, void *ptr); void *vmem_calloc(VMEM *vmp, size_t nmemb, size_t size); void *vmem_realloc(VMEM *vmp, void *ptr, size_t size); void *vmem_aligned_alloc(VMEM *vmp, size_t alignment, size_t size); char *vmem_strdup(VMEM *vmp, const char *s); size_t vmem_malloc_usable_size(VMEM *vmp, void *ptr); Managing overall library behavior: const char *vmem_check_version( unsigned major_required, unsigned minor_required); void vmem_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s), void (*print_func)(const char *s)); Error handling: &amp;quot;constchar*vmem_errormsg(void); DESCRIPTION libvmem provides common malloc-like interfaces to memory pools built on memory-mapped files.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/libvmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/libvmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/libvmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/libvmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libvmem/libvmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libvmem/libvmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libvmem/vmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libvmem/vmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libvmem/vmem_malloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libvmem/vmem_malloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libvmem/libvmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libvmem/libvmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libvmem/vmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libvmem/vmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libvmem/vmem_malloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libvmem/vmem_malloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libvmem/libvmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libvmem/libvmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libvmem/vmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libvmem/vmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libvmem/vmem_malloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libvmem/vmem_malloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libvmem/libvmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libvmem/libvmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libvmem/vmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libvmem/vmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libvmem/vmem_malloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libvmem/vmem_malloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/libvmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/libvmem.3/</guid><description>NAME libvmem - volatile memory allocation library
SYNOPSIS #include &amp;lt;libvmem.h&amp;gt; cc ... -lvmem Memory pool management: VMEM *vmem_create(const char *dir, size_t size); VMEM *vmem_create_in_region(void *addr, size_t size); void vmem_delete(VMEM *vmp); int vmem_check(VMEM *vmp); void vmem_stats_print(VMEM *vmp, const char *opts); Memory allocation related functions: void *vmem_malloc(VMEM *vmp, size_t size); void vmem_free(VMEM *vmp, void *ptr); void *vmem_calloc(VMEM *vmp, size_t nmemb, size_t size); void *vmem_realloc(VMEM *vmp, void *ptr, size_t size); void *vmem_aligned_alloc(VMEM *vmp, size_t alignment, size_t size); char *vmem_strdup(VMEM *vmp, const char *s); size_t vmem_malloc_usable_size(VMEM *vmp, void *ptr); Managing overall library behavior: const char *vmem_check_version( unsigned major_required, unsigned minor_required); void vmem_set_funcs( void *(*malloc_func)(size_t size), void (*free_func)(void *ptr), void *(*realloc_func)(void *ptr, size_t size), char *(*strdup_func)(const char *s), void (*print_func)(const char *s)); Error handling: &amp;quot;constchar*vmem_errormsg(void); DESCRIPTION libvmem provides common malloc-like interfaces to memory pools built on memory-mapped files.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.3/libvmem.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.3/libvmem.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libvmem/libvmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libvmem/libvmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libvmem/vmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libvmem/vmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/libvmem/vmem_malloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/libvmem/vmem_malloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libvmem/libvmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libvmem/libvmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libvmem/vmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libvmem/vmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/libvmem/vmem_malloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/libvmem/vmem_malloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libvmem/libvmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libvmem/libvmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libvmem/vmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libvmem/vmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/libvmem/vmem_malloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/libvmem/vmem_malloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libvmem/libvmem.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libvmem/libvmem.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libvmem/vmem_create.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libvmem/vmem_create.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmem | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/libvmem/vmem_malloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/libvmem/vmem_malloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmmalloc | PMDK</title><link>https://pmem.io/vmem/libvmmalloc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/vmem/libvmmalloc/</guid><description>The libvmmalloc library libvmmalloc interposes the traditional malloc/free interfaces and, in a way fully transparent to the program, substitutes the system heap with a volatile memory pool built on memory-mapped file. Such memory pool works in a similar manner as the memory pools provided by libvmem, except that it is created and destroyed automatically for each process that uses libvmmalloc.
The typical usage of libvmmalloc is to load it before all other libraries by setting the environment variable LD_PRELOAD.</description></item><item><title>libvmmalloc | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/libvmmalloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/libvmmalloc.3/</guid><description>NAME libvmmalloc - general purpose volatile memory allocation library
SYNOPSIS $ LD_PRELOAD=libvmmalloc.so command [ args... ] or #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;malloc.h&amp;gt; #include &amp;lt;libvmmalloc.h&amp;gt; $ cc [ flag... ] file... -lvmmalloc [ library... ] void *malloc(size_t size); void free(void *ptr); void *calloc(size_t number, size_t size); void *realloc(void *ptr, size_t size); int posix_memalign(void **memptr, size_t alignment, size_t size); void *aligned_alloc(size_t alignment, size_t size); void *memalign(size_t alignment, size_t size); void *valloc(size_t size); void *pvalloc(size_t size); size_t malloc_usable_size(const void *ptr); void cfree(void *ptr); DESCRIPTION libvmmalloc transparently converts all the dynamic memory allocations into Persistent Memory allocations.</description></item><item><title>libvmmalloc | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/libvmmalloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/libvmmalloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmmalloc | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/libvmmalloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/libvmmalloc.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmmalloc | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/libvmmalloc/libvmmalloc.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/libvmmalloc/libvmmalloc.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmmalloc | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/libvmmalloc/libvmmalloc.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/libvmmalloc/libvmmalloc.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmmalloc | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/libvmmalloc/libvmmalloc.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/libvmmalloc/libvmmalloc.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmmalloc | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/libvmmalloc/libvmmalloc.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/libvmmalloc/libvmmalloc.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libvmmalloc | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/libvmmalloc.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/libvmmalloc.3/</guid><description>NAME libvmmalloc - general purpose volatile memory allocation library
SYNOPSIS $ LD_PRELOAD=libvmmalloc.so command [ args... ] or #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;malloc.h&amp;gt; #include &amp;lt;libvmmalloc.h&amp;gt; $ cc [ flag... ] file... -lvmmalloc [ library... ] void *malloc(size_t size); void free(void *ptr); void *calloc(size_t number, size_t size); void *realloc(void *ptr, size_t size); int posix_memalign(void **memptr, size_t alignment, size_t size); void *aligned_alloc(size_t alignment, size_t size); void *memalign(size_t alignment, size_t size); void *valloc(size_t size); void *pvalloc(size_t size); size_t malloc_usable_size(const void *ptr); void cfree(void *ptr); DESCRIPTION libvmmalloc transparently converts all the dynamic memory allocations into Persistent Memory allocations.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmem_ctl/pmem_ctl.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmem_ctl/pmem_ctl.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmem_ctl/pmem_ctl.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmem_ctl/pmem_ctl.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmem_ctl/pmem_ctl.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmem_ctl/pmem_ctl.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmem_ctl/pmem_ctl.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmem_ctl/pmem_ctl.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmem_ctl | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmem_ctl/pmem_ctl.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmem_ctl/pmem_ctl.5/</guid><description>NAME
DESCRIPTION
CTL EXTERNAL CONFIGURATION
SEE ALSO
NAME ctl - interface for examination and modification of the library&amp;rsquo;s internal state.
DESCRIPTION The CTL namespace is organized in a tree structure. Starting from the root, each node can be either internal, containing other elements, or a leaf. Internal nodes themselves can only contain other nodes and cannot be entry points. There are two types of those nodes: named and indexed. Named nodes have string identifiers.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-convert.1/</guid><description>NAME
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with create command creates a pool file of specified type.
The only valid pool types is: obj which stands for pmemobj pool. By default the pool file is created with minimum allowed size for specified pool type. The minimum sizes for obj pool type is PMEMOBJ_MIN_POOL.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE:
The obj pool type is not supported by the dump command.
NOTICE:
The dump command is left only for backward compatibility.
DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.
The main task of this command is to print all usable information from pool headers and user data in human readable format.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) are removed. By default the pmempool rm does not remove pool set files. All pool files are removed using unlink(3) call, except the pools created on device dax which are zeroed instead.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.e. all parts are healthy, and if any of them is not, the corrupted or missing parts are recreated and filled with data from one of the healthy replicas.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-check.1/</guid><description>NAME pmempool-check - Check and repair Persistent Memory Pool
SYNOPSIS pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;
DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option. The output messages may be also suppressed using -q option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-convert.1/</guid><description>NAME pmempool-convert - Convert pool files from old layout versions to the newest one.
SYNOPSIS pmempool convert &amp;lt;file&amp;gt;
DESCRIPTION The pmempool invoked with the convert command performs a conversion of the specified pool to the newest layout supported by this tool. Currently only libpmemobj(3) pools are supported. It is advised to have a backup of the pool before conversion. The conversion process is not fail-safe - power interruption may damage the pool.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-create.1/</guid><description>NAME pmempool-create - Create Persistent Memory Pool of specified type
SYNOPSIS pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt;
DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk*,* pmemlog and pmemobj pools respectively. By default the pool file is created with minimum allowed size for specified pool type.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-dump.1/</guid><description>NAME pmempool-dump - Dump user data from specified pool
SYNOPSIS pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;
DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output. It is possible to dump data to other file by specifying -o option. In this case data will be appended to this file.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-info.1/</guid><description>NAME pmempool-info - Print basic information about Persistent Memory Pool file
SYNOPSIS pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;
DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by NVML libraries. The main task of this command is to print all usable information from pool headers and user data in human readable format. It automatically recognizes pool type by parsing and analyzing pool header. The recognition is done by checking the signature in pool header.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool-rm.1/</guid><description>NAME pmempool-rm - Remove (unlink) poolset files
SYNOPSIS pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;..
DESCRIPTION The pmempool invoked with rm command removes (unlinks) all files specified in command line arguments. If the specified file is a poolset file all parts will be removed. All files are removed using the unlink (3) call. Without specifying the -i|--interactive option, the rm command prompts only before removing write-protected files. If specified file does not exist the rm command terminates with error code.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.1/pmempool/pmempool.1/</guid><description>NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]
DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by NVML libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes. Some of subcommands are required to work without any impact on processed pool, but some of them may create a new or modify an existing one.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively. By default the pool file is created with minimum allowed size for specified pool type.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output. It is possible to dump data to other file by specifying -o option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.
The main task of this command is to print all usable information from pool headers and user data in human readable format.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) and remote replicas are removed. By default the pmempool rm does not remove pool set files. All local and remote pool files are removed using unlink(3) call, except the pools created on device dax which are zeroed instead.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.e. all parts are healthy, and if any of them is not, the corrupted or missing parts are recreated and filled with data from one of the healthy replicas.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively. By default the pool file is created with minimum allowed size for specified pool type.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output. It is possible to dump data to other file by specifying -o option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.
The main task of this command is to print all usable information from pool headers and user data in human readable format.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) and remote replicas are removed. By default the pmempool rm does not remove pool set files. All local and remote pool files are removed using unlink(3) call, except the pools created on device dax which are zeroed instead.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.e. all parts are healthy, and if any of them is not, the corrupted or missing parts are recreated and filled with data from one of the healthy replicas.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively. By default the pool file is created with minimum allowed size for specified pool type.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output. It is possible to dump data to other file by specifying -o option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.
The main task of this command is to print all usable information from pool headers and user data in human readable format.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) and remote replicas are removed. By default the pmempool rm does not remove pool set files. All local and remote pool files are removed using unlink(3) call, except the pools created on device dax which are zeroed instead.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.e. all parts are healthy, and if any of them is not, the corrupted or missing parts are recreated and filled with data from one of the healthy replicas.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE:
The libpmemblk and libpmemlog libraries are deprecated (this affects pool types blk, btt and log) since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) are removed. By default the pmempool rm does not remove pool set files.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-feature.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-feature.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-feature.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-feature.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively. By default the pool file is created with minimum allowed size for specified pool type.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output. It is possible to dump data to other file by specifying -o option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.
The main task of this command is to print all usable information from pool headers and user data in human readable format.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) and remote replicas are removed. By default the pmempool rm does not remove pool set files. All local and remote pool files are removed using unlink(3) call, except the pools created on device dax which are zeroed instead.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.e. all parts are healthy, and if any of them is not, the corrupted or missing parts are recreated and filled with data from one of the healthy replicas.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool-check.1/</guid><description>NAME pmempool-check - Check and repair Persistent Memory Pool
SYNOPSIS pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;
DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option. The output messages may be also suppressed using -q option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool-create.1/</guid><description>NAME pmempool-create - Create Persistent Memory Pool of specified type
SYNOPSIS pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt;
DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk*,* pmemlog and pmemobj pools respectively. By default the pool file is created with minimum allowed size for specified pool type.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool-dump.1/</guid><description>NAME pmempool-dump - Dump user data from specified pool
SYNOPSIS pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;
DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output. It is possible to dump data to other file by specifying -o option. In this case data will be appended to this file.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool-info.1/</guid><description>NAME pmempool-info - Print basic information about Persistent Memory Pool file
SYNOPSIS pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;
DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by NVML libraries. The main task of this command is to print all usable information from pool headers and user data in human readable format. It automatically recognizes pool type by parsing and analyzing pool header. The recognition is done by checking the signature in pool header.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool-rm.1/</guid><description>NAME pmempool-rm - Remove (unlink) poolset files
SYNOPSIS pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;..
DESCRIPTION The pmempool invoked with rm command removes (unlinks) all files specified in command line arguments. If the specified file is a poolset file all parts will be removed. All files are removed using the unlink (3) call. Without specifying the -i|--interactive option, the rm command prompts only before removing write-protected files. If specified file does not exist the rm command terminates with error code.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1/pmempool/pmempool.1/</guid><description>NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]
DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by NVML libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes. Some of subcommands are required to work without any impact on processed pool, but some of them may create a new or modify an existing one.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE:
The libpmemblk and libpmemlog libraries are deprecated (this affects pool types blk, btt and log) since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) are removed. By default the pmempool rm does not remove pool set files.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.0.0 release.
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively. By default the pool file is created with minimum allowed size for specified pool type.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output. It is possible to dump data to other file by specifying -o option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.
The main task of this command is to print all usable information from pool headers and user data in human readable format.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) and remote replicas are removed. By default the pmempool rm does not remove pool set files. All local and remote pool files are removed using unlink(3) call, except the pools created on device dax which are zeroed instead.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.e. all parts are healthy, and if any of them is not, the corrupted or missing parts are recreated and filled with data from one of the healthy replicas.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively. By default the pool file is created with minimum allowed size for specified pool type.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output. It is possible to dump data to other file by specifying -o option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.
The main task of this command is to print all usable information from pool headers and user data in human readable format.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) and remote replicas are removed. By default the pmempool rm does not remove pool set files. All local and remote pool files are removed using unlink(3) call, except the pools created on device dax which are zeroed instead.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.e. all parts are healthy, and if any of them is not, the corrupted or missing parts are recreated and filled with data from one of the healthy replicas.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively. By default the pool file is created with minimum allowed size for specified pool type.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output. It is possible to dump data to other file by specifying -o option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.
The main task of this command is to print all usable information from pool headers and user data in human readable format.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) and remote replicas are removed. By default the pmempool rm does not remove pool set files. All local and remote pool files are removed using unlink(3) call, except the pools created on device dax which are zeroed instead.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.e. all parts are healthy, and if any of them is not, the corrupted or missing parts are recreated and filled with data from one of the healthy replicas.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; NOTE NOTICE:
The libpmemblk and libpmemlog libraries are deprecated (this affects pool types blk, btt and log) since PMDK 1.13.0 release.
DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) are removed. By default the pmempool rm does not remove pool set files.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
NOTE: Support for Windows and FreeBSD deprecated since PMDK 1.13.0 release and will be removed in the PMDK 2.0.0 release.
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] NOTE NOTICE: The libpmemblk and libpmemlog libraries are deprecated since PMDK 1.13.0 release.
DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-feature.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-feature.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-feature.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-check.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-convert.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-create.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-dump.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-feature.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-info.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-rm.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-sync.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool-transform.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/pmempool/pmempool.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-check.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-check.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-check - check and repair persistent memory pool
SYNOPSIS $ pmempool check [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with check command checks consistency of a given pool file. If the pool file is consistent pmempool exits with 0 value. If the pool file is not consistent non-zero error code is returned.
In case of any errors, the proper message is printed. The verbosity level may be increased using -v option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-convert.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-convert.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-convert - this is a wrapper around pmdk-convert tool. More information can be found in pmdk-convert(1) man page.
SEE ALSO pmdk-convert(1), pmempool(1), libpmemblk(7), libpmemlog(7), libpmemobj(7), libpmempool(7) and https://pmem.io</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-create.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-create.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-create - create a persistent memory pool
SYNOPSIS $ pmempool create [&amp;lt;options&amp;gt;] [&amp;lt;type&amp;gt;] [&amp;lt;bsize&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with create command creates a pool file of specified type. Depending on a pool type it is possible to provide more properties of pool.
Valid pool types are: blk, log and obj which stands for pmemblk, pmemlog and pmemobj pools respectively. By default the pool file is created with minimum allowed size for specified pool type.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-dump.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-dump.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
EXAMPLE
SEE ALSO
NAME pmempool-dump - dump user data from persistent memory pool
SYNOPSIS $ pmempool dump [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with dump command dumps user data from specified pool file. The output format may be either binary or hexadecimal.
By default the output format is hexadecimal.
By default data is dumped to standard output. It is possible to dump data to other file by specifying -o option.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-feature.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-feature.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
COMPATIBILITY
DISCLAIMER
EXAMPLE
SEE ALSO
NAME pmempool-feature - toggle or query pool set features
SYNOPSIS $ pmempool feature (-e|-d|-q feature-name) [options] &amp;lt;file&amp;gt; DESCRIPTION The pmempool feature command enables / disables or queries pool set features.
Available pool feature-names are:
SINGLEHDR - only the first part in each replica contains the pool part internal metadata. This value can be used only with -q. It can not be enabled or disabled.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-info.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-info.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
RANGE
STATISTICS
EXAMPLE
SEE ALSO
NAME pmempool-info - show information about persistent memory pool
SYNOPSIS $ pmempool info [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt; DESCRIPTION The pmempool invoked with info command analyzes an existing pool created by PMDK libraries provided by file parameter. The file can be either existing pool file, a part file or a poolset file.
The main task of this command is to print all usable information from pool headers and user data in human readable format.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-rm.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-rm.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
SEE ALSO
NAME pmempool-rm - remove a persistent memory pool
SYNOPSIS $ pmempool rm [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;.. DESCRIPTION The pmempool rm command removes each specified file. If the specified file is a pool set file, all pool files (single-file pool or part files) and remote replicas are removed. By default the pmempool rm does not remove pool set files. All local and remote pool files are removed using unlink(3) call, except the pools created on device dax which are zeroed instead.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-sync.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-sync.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-sync - Synchronize replicas or their parts within a pool set.
SYNOPSIS pmempool sync [options] &amp;lt;poolset_file&amp;gt; NOTE: Only the pool set file used to create the pool should be used for syncing the pool.
DESCRIPTION The pmempool sync command synchronizes data between replicas within a pool set. It checks if metadata of all replicas in a pool set are consistent, i.e. all parts are healthy, and if any of them is not, the corrupted or missing parts are recreated and filled with data from one of the healthy replicas.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-transform.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool-transform.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLES
SEE ALSO
NAME pmempool-transform - Modify internal structure of a pool set.
SYNOPSIS pmempool transform [options] &amp;lt;poolset_file_src&amp;gt; &amp;lt;poolset_file_dst&amp;gt; DESCRIPTION The pmempool transform command modifies internal structure of a pool set defined by the poolset_file_src file, according to a structure described in the poolset_file_dst file.
The following operations are supported:
adding replicas - one or more new replicas can be added and synchronized with other replicas in the pool set,</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/pmempool/pmempool.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
COMMANDS
DEBUGGING
SEE ALSO
NAME pmempool - Persistent Memory Pool Management Tool
SYNOPSIS $ pmempool [--help] [--version] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] DESCRIPTION The pmempool is a management tool for Persistent Memory pool files created by PMDK libraries.
The main purpose of pmempool is to provide a user with a set of utilities for off-line analysis and manipulation of pools created by pmem libraries. The pmempool is a generic command which consists of subcommands for specific purposes.</description></item><item><title>pmempool | PMDK</title><link>https://pmem.io/pmdk/pmempool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/pmempool/</guid><description>The pmempool utility pmempool is a standalone utility for management and off-line analysis of persistent memory pools. It works for both the single-file pools and for pool set files.
NOTE: Support for Windows and FreeBSD are deprecated since PMDK 1.13.0 release and was removed in the PMDK 2.0.0 release.
See the pmempool(1) man page for documentation and examples:
for the current master, or the latest stable version (1.12). To see man pages for older releases, go to the section &amp;ldquo;Older versions&amp;rdquo; below.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/pmreorder/pmreorder.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/pmreorder/pmreorder.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
ENGINES
INSTRUMENTATION
PMEMCHECK STORE LOG
ENVIRONMENT
EXAMPLE
SEE ALSO
NAME pmreorder - performs a persistent consistency check using a store reordering mechanism
SYNOPSIS $ python pmreorder &amp;lt;options&amp;gt; DESCRIPTION The pmreorder tool is a collection of python scripts designed to parse and replay operations logged by pmemcheck - a persistent memory checking tool.
Pmreorder performs the store reordering between persistent memory barriers - a sequence of flush-fence operations.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/pmreorder/pmreorder.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/pmreorder/pmreorder.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
ENGINES
INSTRUMENTATION
PMEMCHECK STORE LOG
ENVIRONMENT
EXAMPLE
SEE ALSO
NAME pmreorder - performs a persistent consistency check using a store reordering mechanism
SYNOPSIS $ python pmreorder &amp;lt;options&amp;gt; DESCRIPTION The pmreorder tool is a collection of python scripts designed to parse and replay operations logged by pmemcheck - a persistent memory checking tool.
Pmreorder performs the store reordering between persistent memory barriers - a sequence of flush-fence operations.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/pmreorder/pmreorder.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/pmreorder/pmreorder.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
ENGINES
INSTRUMENTATION
PMEMCHECK STORE LOG
ENVIRONMENT
EXAMPLE
SEE ALSO
NAME pmreorder - performs a persistent consistency check using a store reordering mechanism
SYNOPSIS $ python pmreorder &amp;lt;options&amp;gt; DESCRIPTION The pmreorder tool is a collection of python scripts designed to parse and replay operations logged by pmemcheck - a persistent memory checking tool.
Pmreorder performs the store reordering between persistent memory barriers - a sequence of flush-fence operations.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/pmreorder/pmreorder.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/pmreorder/pmreorder.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
ENGINES
INSTRUMENTATION
PMEMCHECK STORE LOG
ENVIRONMENT
EXAMPLE
SEE ALSO
NAME pmreorder - performs a persistent consistency check using a store reordering mechanism
SYNOPSIS $ python pmreorder &amp;lt;options&amp;gt; DESCRIPTION The pmreorder tool is a collection of python scripts designed to parse and replay operations logged by pmemcheck - a persistent memory checking tool.
Pmreorder performs the store reordering between persistent memory barriers - a sequence of flush-fence operations.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/pmreorder/pmreorder.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/pmreorder/pmreorder.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
ENGINES
INSTRUMENTATION
PMEMCHECK STORE LOG
ENVIRONMENT
EXAMPLE
SEE ALSO
NAME pmreorder - performs a persistent consistency check using a store reordering mechanism
SYNOPSIS $ python pmreorder &amp;lt;options&amp;gt; DESCRIPTION The pmreorder tool is a collection of python scripts designed to parse and replay operations logged by pmemcheck - a persistent memory checking tool.
Pmreorder performs the store reordering between persistent memory barriers - a sequence of flush-fence operations.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/pmreorder/pmreorder.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/pmreorder/pmreorder.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/pmreorder/pmreorder.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/pmreorder/pmreorder.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/pmreorder/pmreorder.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/pmreorder/pmreorder.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/pmreorder/pmreorder.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/pmreorder/pmreorder.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/pmreorder/pmreorder.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/pmreorder/pmreorder.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
ENGINES
INSTRUMENTATION
PMEMCHECK STORE LOG
ENVIRONMENT
EXAMPLE
SEE ALSO
NAME pmreorder - performs a persistent consistency check using a store reordering mechanism
SYNOPSIS $ python pmreorder &amp;lt;options&amp;gt; DESCRIPTION The pmreorder tool is a collection of python scripts designed to parse and replay operations logged by pmemcheck - a persistent memory checking tool.
Pmreorder performs the store reordering between persistent memory barriers - a sequence of flush-fence operations.</description></item><item><title>pmreorder | PMDK</title><link>https://pmem.io/pmdk/pmreorder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/pmreorder/</guid><description>The pmreorder utility pmreorder is a standalone python tool that performs consistency check of persistent programs using a store reordering mechanism.
See the pmreorder man page for current master documentation and examples or see older versions:
pmreorder version 1.11 pmreorder version 1.10 pmreorder version 1.9 pmreorder version 1.8 pmreorder version 1.7 pmreorder version 1.6 pmreorder version 1.5</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/master/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/master/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7) allows building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.13/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.13/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/poolset/poolset.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/poolset/poolset.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/poolset/poolset.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/poolset/poolset.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/poolset/poolset.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/master/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/master/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.10/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.10/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.11/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.11/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.12/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.12/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.13/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.13/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.4/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.4/poolset/poolset.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.5/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.5/poolset/poolset.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.6/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.6/poolset/poolset.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.7/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.7/poolset/poolset.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.8/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.8/poolset/poolset.5/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>poolset | PMDK</title><link>https://pmem.io/pmdk/manpages/windows/v1.9/poolset/poolset.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/windows/v1.9/poolset/poolset.5/</guid><description>NAME
SYNOPSIS
DESCRIPTION
REPLICAS
POOL SET OPTIONS
NOTES
SEE ALSO
NAME poolset - persistent memory pool configuration file format
SYNOPSIS mypool.set DESCRIPTION Depending on the configuration of the system, the available non-volatile memory space may be divided into multiple memory devices. In such case, the maximum size of the transactional object store could be limited by the capacity of a single memory device. Therefore, libpmemobj(7), libpmemblk(7) and libpmemlog(7) allow building object stores spanning multiple memory devices by creation of persistent memory pools consisting of multiple files, where each part of such a pool set may be stored on a different pmem-aware filesystem.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.10/rpmemd/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.10/rpmemd/rpmemd.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
CONFIGURATION FILES
EXAMPLE
DEFAULT CONFIGURATION
PERSISTENCY METHODS
SEE ALSO
NAME rpmemd - librpmem target node process (EXPERIMENTAL)
SYNOPSIS $ rpmemd [--help] [--version] [&amp;lt;args&amp;gt;] DESCRIPTION The rpmemd process is executed on target node by librpmem(7) library over ssh(1) and facilitates access to persistent memory over RDMA. The rpmemd should not be run manually under normal conditions.
OPTIONS Command line options overwrite the default rpmemd configuration, the global configuration file and the user configuration file.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.11/rpmemd/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.11/rpmemd/rpmemd.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
CONFIGURATION FILES
EXAMPLE
DEFAULT CONFIGURATION
PERSISTENCY METHODS
SEE ALSO
NAME rpmemd - librpmem target node process (EXPERIMENTAL)
SYNOPSIS $ rpmemd [--help] [--version] [&amp;lt;args&amp;gt;] DESCRIPTION The rpmemd process is executed on target node by librpmem(7) library over ssh(1) and facilitates access to persistent memory over RDMA. The rpmemd should not be run manually under normal conditions.
OPTIONS Command line options overwrite the default rpmemd configuration, the global configuration file and the user configuration file.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.12/rpmemd/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.12/rpmemd/rpmemd.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
CONFIGURATION FILES
EXAMPLE
DEFAULT CONFIGURATION
PERSISTENCY METHODS
SEE ALSO
NAME rpmemd - librpmem target node process (DEPRECATED)
SYNOPSIS $ rpmemd [--help] [--version] [&amp;lt;args&amp;gt;] DESCRIPTION The rpmemd process is executed on target node by librpmem(7) library over ssh(1) and facilitates access to persistent memory over RDMA. The rpmemd should not be run manually under normal conditions.
OPTIONS Command line options overwrite the default rpmemd configuration, the global configuration file and the user configuration file.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.2/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.2/rpmemd.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.3/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.3/rpmemd.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.4/rpmemd/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.4/rpmemd/rpmemd.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.5/rpmemd/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.5/rpmemd/rpmemd.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.6/rpmemd/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.6/rpmemd/rpmemd.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.7/rpmemd/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.7/rpmemd/rpmemd.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.8/rpmemd/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.8/rpmemd/rpmemd.1/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>rpmemd | PMDK</title><link>https://pmem.io/pmdk/manpages/linux/v1.9/rpmemd/rpmemd.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmdk/manpages/linux/v1.9/rpmemd/rpmemd.1/</guid><description>NAME
SYNOPSIS
DESCRIPTION
OPTIONS
CONFIGURATION FILES
EXAMPLE
DEFAULT CONFIGURATION
PERSISTENCY METHODS
SEE ALSO
NAME rpmemd - librpmem target node process (EXPERIMENTAL)
SYNOPSIS $ rpmemd [--help] [--version] [&amp;lt;args&amp;gt;] DESCRIPTION The rpmemd process is executed on target node by librpmem(7) library over ssh(1) and facilitates access to persistent memory over RDMA. The rpmemd should not be run manually under normal conditions.
OPTIONS Command line options overwrite the default rpmemd configuration, the global configuration file and the user configuration file.</description></item></channel></rss>